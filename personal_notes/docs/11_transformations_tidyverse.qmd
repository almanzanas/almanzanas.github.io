---
title: "Transformations with Tidyverse"
---

Dataset: <https://archive.ics.uci.edu/ml/datasets/Adult>

```{r}
#install.packages('tidyverse')
library(tidyverse)
```

Tidy data is one observation per row, one measurement or variable per column and one value per cell.

```{r}
header <- c("age", "workclass", "fnlwgt","education",
"education_num", "marital_status", "occupation",
"relationship", "race", "sex", "capital_gain", "capital_loss","hours_per_week", "native_country", "target")

df <- read_csv("https://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.data", col_names = header, 
                   trim_ws = TRUE)

head(df)
```

# Slicing and filtering

The basic form of dplyr for slicing it to use a `.` to consider everything from the object that precedes it. The returned object will be a tibble.

```{r}
df %>% .[1:4, c(2:5)]
```

-   `slice_min(), slice_max()`: to fetch the top or bottom observation given a percentage.
-   `slice_sample()`: to extract a sample.

```{r}
df %>% slice_min(age, prop = 0.15)
```

```{r}
df %>% slice_sample(n=10, replace = FALSE) %>% .[,1:4]
```

## Filtering

-   `filter()`: returns rows given a condition.
-   `select()`: to choose variable to show in the given order.

```{r}
df %>%
  filter( age < 30 ) %>%
  select( marital_status, age, education ) %>%
  slice_sample( n = 10)
```

-   distinct(): to extract unique values.

```{r}
df %>% distinct(sex) 
```

# Grouping and summarizing data

The next functions are complementary, usually used together.

-   `group_by()`: to group a variable by its values
-   `summarize()`: given a function with a variable returns the result.
-   `ungroup()`: after group_by() with more than one variable, it returns a `tbl_df`. The ungrouped tibble requires less memory space than the tibble one.

```{r}
df %>% group_by(workclass) %>% .[1:10,1:4]
```

```{r}
df %>% group_by(sex) %>% summarise( avg_age = mean(age), sd_age = sd(age))
```

```{r}
marital.groups <- df %>% group_by(marital_status, sex) %>%
  summarize( avg_age = mean(age) )
marital.groups
```

```{r}
ungroup(marital.groups)
```

-   `quantile()`: returns the number corresponding the passing percentage.
-   `first()`: returns the first number. Combined with group_by() returns the first number of each group.
-   `across()`: applies a function to the selected columns.

```{r}
df %>% group_by(marital_status) %>% summarise(first(age))
```

```{r}
df %>% group_by(sex) %>% summarise( "50%" = quantile(age, 0.5))
```

```{r}
df %>% select(1,3,5,11,12,13) %>%
  summarise( across(everything(), mean) )
```
