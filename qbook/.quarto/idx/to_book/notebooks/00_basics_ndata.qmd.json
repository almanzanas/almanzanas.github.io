{"title":"R: The very basics","markdown":{"yaml":{"title":"R: The very basics"},"headingText":"The very basics","containsRefs":false,"markdown":"\n\n\n## Getting Help\n\nAt the command line we can look for help through the commands:\n\n-   `help()`: gets information on a particular R function, e.g. `help(matrix)`\n\n-   `?`: works the same as the previous one, e.g. `?\"matrix\"`\n\n-   `help.search()`: It's useful if we know the subject rather than the name.\n\n-   `apropos()`: returns a vector of names of objects containing that string, e.g. `apropos(\"matrix\")` returns every object with 'matrix' in its name.\n\n-   `args()`: displays the set of arguments expected by a given function.\n\n```{r}\nargs(matrix)\n```\n\n# R Data: Vectors\n\nA vector is the basic unit of computation in R. The atomic class which we can see with `help(vector)` are:\n\n-   logical: TRUE or FALSE (T or F as synonyms)\n-   integer\n-   numeric or double\n-   character: is the text\n-   raw: can hold binary data\n-   complex\n\nTo combines items into a vector we use `c()` function. Cal also be used to combine vector, as long as all the vectors are of the same sort.\n\n```{r}\nc(2, 25)\n```\n\n```{r}\n# R has formatted the numbers in a consistent way\nc(-2, pi, 25)\n```\n\n```{r}\nc(c(2, 3), c(pi, 16.7, 5), c(-12, -16))\n```\n\nTo set consecutive integers:\n\n```{r}\n1:7\n```\n\n```{r}\n# Sequence in reverse\n9:-2\n```\n\n```{r}\n# It's 3 plus the sequence\n3 + 2:5\n```\n\nUsing `help(Syntax)` It can be seen a list of operators and their precedences, and precedence can always be over-ridden with parentheses.\n\nAlso with `seq()` we can create sequences, with better control of starting points, ending points, lengths, and step sizes. With help we can see:\n\n``` r\nseq(...)\n\n## Default S3 method:\nseq(from = 1, to = 1, by = ((to - from)/(length.out - 1)),\n    length.out = NULL, along.with = NULL, ...)\n\n# Examples:\nseq(17)\nseq(0, 1, length.out = 11)\nseq(1, 9, by = 2)\n```\n\nLogical vectors ofen are constructed by R in response to an operation:\n\n```{r}\n35:41 >= 37\n```\n\nTo calculate the number or proportions of elements in a vector we use `sum()` for count and `mean()` for proportions:\n\n```{r}\n# like we saw, five out of seven elements in this vector are greater or equal to 37\nsum(35:41 >= 37)\n```\n\n```{r}\n# 5 out of 7 are aprox. 71.4%\nmean(35:41 >= 37)\n```\n\n## Vector Operations\n\nArithmetic operations on vectors produce vectors.\n\n```{r}\n5:10\n```\n\n```{r}\n(5:10)^2\n```\n\nThere are functions which returns a single number (that is also a vector), such as: `length(), sum(), mean(), sd(), min(), max()`. The function `range()` returns the smallest and largest values, and `summary()` returns a vector of summary statistics.\n\n```{r}\n# An assigment with parentheses case print this assigment\n(th1 <- c(20, 15, 10, 5, 0)^2)\n```\n\n```{r}\nth2 <- 105:101\nth2 + th1\n```\n\n```{r}\nth2 / th1\n```\n\nIt's Computed element by element, that's why print 'Inf', because 101/0 refer to an infinite value.\n\n```{r}\n# Print the larger value anywhere\nmax(th1, th2)\n```\n\n```{r}\n# 'Parallel maximum' print the larger of each pair\npmax(th2, th1)\n```\n\nLoginac vectors can also be combined. The operator `|` for 'or' return TRUE if either element is TRUE; the `&` operator for 'and' return TRUE only if both elements are TRUE. This single version evaluate the condition for every pair of elements from both vectors, the double version ( `|| , &&`) evaluate multiple TRUE/FALSE conditions from left to right, stopping as soon as possible (are useful in `if()` statements).\n\nRecycling\n\nWhen a vector does not match with other vector to be operated, the shorter one starts again, recycling it's elements.\n\n```{r}\n# Two vector with the same length, 6\n5:10 + c(0, 10, 100, 1000, 10000, 100000)\n# The sum is element by element\n```\n\n```{r}\n# Two vectors, 6 and 3 elements\n5:10 + c(1, 10, 100)\n```\n\n```{r}\n# 6-vector and 5 vector. The second recycle it's first element (10 + 3)\n5:10 + c(3, 4, 5, 6, 7)\n\n```\n\nRecycling a vector of length 1 (`(5:10) + 4`) is very common, but the other lengths ir rarer. If we see the last warning, It's better to treat that as an error and try to resolve it.\n\n## Handling character vectors\n\nWe can add names to a vector to identify individual entries. R accept letters, numbers, dots, and underscores:\n\n```{r}\nvec <- c(201, 202, 203)\nnames(vec)\n```\n\n```{r}\n# It is a bad practice to have a vector's name invalid:\nnames(vec) <- c(\"a\", \"b\", \"with space\")\nnames(vec)\n```\n\n```{r}\n# Also, we can assign names directly\nvec <- c(a = 201, b = 202, with.space = 203)\nvec\n```\n\n## Data Types\n\nThe most common data types are numeric, logical and character. These are some less-common data types:\n\n-   integers: values between -(2^31^ -1) and 2^31^ -1. Values outside this range may be displayed as integers but will be stored as doubles. To regard an item as an integer you can add `L` on its end ( `246L` ), this only makes sense whether really is an integer.\n-   raw: refers to data kept in binary (hexadecimal) form. Is data from images, sound and video, R will stored as raw. It can be converted into character data with `rawToChar()` function. Reading raw data could be useful to handle the case of unexpected characters.\n-   complex number: R can manipulate complex numbers but almost never arise in data cleaning.\n\nWe can see what data type is a vector with `typeof()` which differentiates between integer and double. Other function called `mode()` calls them both numeric. The `str()` function return the data type and the first few entries. And `class()` is more general operator for complex types.\n\nThe functions: `is.logical(), is.integer(), is.numeric(), is.character()` returns a single logical value whether is TRUE or FALSE. A particularly useful function for more complicated or user-defined clases is `is()` which lets you specify the class as an argument: `is(pi, \"numeric\")`.\n\n```{r}\ntypeof(vec)\n```\n\n```{r}\nmode(vec)\n```\n\n### Data Type conversion\n\nR modifies the entire vector to be of the more complicated type. If you create a numeric vector but you adds a character, the entire vector will be converted to character:\n\n```{r}\nvec <- c(1, 2, 3, 4, 5, 6, \"7\")\nvec\n```\n\nTypes: logical \\< raw \\< numeric \\< complex \\< character.\n\nOther group of functios are `as.` to convert vectors:\n\n-   `as.numeric`: a character will be converted to a numeric if it has the syuntax of a number.\n\n    ```{r}\n    # The element which no fit as numeric will be NA values by coercion\n    as.numeric( c(\"123.4\", \"-1234e-2\", \"4,567\", \"45. 67\", \"$12\", \"45%\"))\n    ```\n\n-   `as.logical`: Numeric values that are zero become FALSE, otherwise become TRUE. Sometimes numbers that you expect to be zero aren't because of floating-point error.\n\n    ```{r}\n    # The third is FALSE because it is outside the range of double precision.\n    # The last element 'should' be zero but aren't because floating-point error.\n    as.logical( c(123, 5-5, -1e-34, 1e-500, 1- 1/49 * 49) )\n    ```\n\nNumeric, non-missing values never produce NA when converted to logical.\n\n## Subsets of Vectors\n\n*subsetting* or *extracting* is to pull out a piece of a vector.\n\n### subscript: numeric\n\n```{r}\n# 5-vector\n(a <- 101:105)\n# extract element number 3\na[3]\n```\n\nWe can use a numeric expression to compute a subscript but only if we are sure that expression is an integer.\n\n```{r}\n# extract the fourth and second element\na[c(4, 2)]\n# extract the element corresponding to 3+2 \na[3+2]\n```\n\nNegative numbers omit this elements, but you cannot mix negative and positive numbers. Zeros are permited but they are ignored by R.\n\n```r\na[-2]\n# Omit the first and second element\na[- (1:2) ]\n# mix of positive and negative, result an error\na[c(-1, 2)]\n```\n\n### Subscript: logical\n\nA logical subscript is a logical vector of the same length as the thing being extracted from. TRUE are returned, FALSE are not.\n\n```{r}\n# numeric vector with ages\nage <- c(21, 32, 43, 54, 65, 76)\nage > 60\n```\n\nWe can use the last logical vector to extract elements of age, or combining it with other vectors.\n\n```{r}\n# Which ages are greater than 60\nage[age > 60]\n\n```\n\n```{r}\npeople <- c(\"Yoshua\", \"Mery\", \"Alex\", \"John\", \"Lee\", \"Cindy\")\n# To which people corresponds their age greater than 60\npeople[age > 60]\n\n# Creating a new variable with the previous subscript\nage.gt.60 <- age > 60\npeople[age.gt.60]\n```\n\nErrors to avoid:\n\n```{r}\n# R convert the logical subscript to numeric\n# the extraction produces the first element of the vector two times\npeople[0 + age.gt.60]\n\n# With the negative sign, R convert again into numeric values\n# The extraction drops the first value and rest are returned\npeople[-age.gt.60]\n\n# This is, probably, the intended form:\n# The operator ! to print which values are not greater than 60\npeople[ !age.gt.60 ]\n```\n\nThe `which()` function can be used to convert a logical vector into a numeric. It returns the indices of the element that are TRUE.\n\nTo find the location of every minimum value in the variable 'y' we can use `which(y == min(y)`. The alternative are `which.min()` and `which.max()` but only select the first index with the minimum or maximum value.\n\n### subscript: names\n\nA name subscript will need to be a character.\n\n```{r}\n(vec <- c(a = 201, b = 202, with.space = 203) )\n\nvec[\"b\"]\n\n# Names of 'vec' distinct to 'a'\nvec[names(vec) != \"a\"]\n```\n\n### Vector length 0\n\nThis usually happens when all of the elements of a logical subscript are FALSE.\n\n```{r}\na\nb <- a[a < 99]\nb\n```\n\nIf a zero-length vector is used as the condition in an `if()` statement, an error results:\n\n```r\n# the sum of a numeric or logical vector of length 0 is itself zero\nsum( b + 12345)\n\nif (b < 2) cat(\"yes\\n\")\n```\n\n### Replacing elements of a vector\n\nIf we extract elements, we can use the extraction operation on the left side of an assigment for replacing.\n\n```{r}\na\na[3] <- 203\na\na[a > 104] <- -999\na\n```\n\n```{r}\n# Replacing using names\nnames(vec) <- c(\"a\", \"b\", \"c\")\nvec\n\ncat(\"\\n\")\n\nvec[\"b\"] <- 302\nvec\n```\n\nIt is possible too combine two vectors (if the vectors are different types, R convert them) and also assign elements of a vector out past its end.\n\n```{r}\n(a <- 101:103)\n(b <- -5:-1)\ncat(\"\\n\")\n\na[4:8] <- b\na\ncat(\"\\n\")\n\n# b[6] does not exists, will be filled with NA to add b[7]\nb[7] <- 3\nb\n```\n\n## Missing Data NA\n\nWhen we try to extract an item that was never present in a vector appears missing values. NA values rule: any computation with an NA itself becomes an NA. With mathematical computations we can use `na.rm = TRUE` argument to compute the result after omitting missing values.\n\nWe can use `anyNA()` function to determine whether any of the values are missing (TRUE or FALSE). Also, `is.na()` fuction return TRUE or FALSE for every element in the vector. We can use `where(is.na(vector))`to find the numeric indices of the missing elements.\n\n```{r}\n# Creating a vector with missing values\nnax <- 101:106\nnax[ c(3, 5) ] <- NA\nnax\ncat(\"\\n\")\n\nis.na(nax)\ncat(\"\\n\")\n\nwhich(is.na(nax) )\n\ncat(\"\\nMean 'nax' vector: \")\nmean(nax)\nmean(nax, na.rm=TRUE)\n\n```\n\nWe can remove missing values with `vec[!is.na(vec)]` which return non-missing entries, but `na.omit()` function deletes the missing values but also keeps track of where in the vector they used to be. This information is stored in vector's 'attributes':\n\n```{r}\n# To return non-missing values:\nnax[!is.na(nax)]\ncat(\"\\n\")\n\n# Storing non missing values in a variable and keeping track of deleted ones\n(nay <- na.omit(nax))\nattr(nay, \"na.action\")\nattr(nay, \"class\")\n```\n\nWe can have a vector 'b' with data and a vector 'a' as index which contain NA values. If we use 'a' as filter, it returns every coincident value and missing value, this behaviour can be changed with `b[!is.na(a) & a == 2]`\n\n```{r}\n(b <- 101:104)\n(a <- c(1, 2, NA, 4))\ncat(\"\\n\")\n\nb[a == 2]\ncat(\"\\n\")\n\nb[!is.na(a) & a == 2]\n\n```\n\n-   `NaN` : Special value, means \"Not a Number\". It si the result of specific computations such as 0/0. NaN is considered a missing value.\n-   `Inf` : Appears when a positive number is accidentally divided by zero. Inf values are not missing.\n\nInf + NA = NA\\\nNaN + NA = NaN\n\nWe generally wanto to identify any of these values: the function `is.finite()` produces TRUE for numbers that are neither NA nor NaN nor Inf. It serves as a check on valid values. The command `all(is.finite(vector) )` is to see a numeric vector elements which are not special values.\n\n-   `NULL` : is an object with zero length, no contents, no class. It often arise trying to access an element which does not exist. The function `is.null()` is for testing NULL values. If you index using a NULL value the result will be a vector of length 0.\n\n## The `Table( )` function\n\n`Table()` produce a table returning for each unique value the number of times that value appears.\n\n```{r}\nvec <- rep ( c(\"red\", \"blue\", NA, \"green\"), c(4, 2, 1, 3) )\nvec\ncat(\"\\n\")\n\ntable(vec)\n```\n\n`table()` arguments:\n\n-   `useNA =`\n\n    -   `\"no\"` : default option. Exclude NA values.\n    -   `\"ifany\"` : show an entry for NA if there are any.\n    -   `\"always\"` : show an entry for NA whether there are any NA values or not.\n\n-   `exclude =`\n\n    -   `c(NA, NaN)` : default option.\n\n    -   We can add a value of the vector to exclude, also we can pass `NULL`.\n\n```{r}\ntable(vec, useNA = \"always\")\ncat(\"\\n\")\n\ntable(vec, exclude=\"green\")\n```\n\nAlso, we can pass to `table()` function two vectors to create a two-way table (cross-tabulation). in R a two-way table is treated the same as a matrix.\n\n```{r}\nvec2 <- rep ( c(\"north\", \"south\", \"east\", \"west\"), c(2, 3, 2, 3) )\ntable(vec,vec2, useNA=\"ifany\")\n```\n\nA three and higher-way tables are produced when you pass three or more equal-length vectors.\n\nFor very large vectors, the `data.table()` function in the `data.table` package may prove more efficient than `table()`.\n\nThe `xtabs()` function is useful for creating more complex tables.\n\n### Operating on tables\n\n-   `prop.table()` : passing a variable with table assigned produces the proportions of the total counts in the table by cell (or row, or column). The second argument references 1 to rows, or 2 to columns.\n\n```{r}\nyear <- rep (2015:2017, each=5)\nmarket <- c(\"a\", \"a\", \"b\", \"a\", \"b\", \"b\", \"b\", \"a\", \"b\", \n            \"b\", \"a\", \"b\", \"a\", \"b\", \"a\")\ncost <- c(64, 87, 71, 79, 79, 91, 86, 92, NA,\n          55, 37, 41, 60, 66, 82)\n\n# assign a table with the vectors we want to 'tab'\ntab <- table(market, year)\ntab\ncat(\"\\n\")\n\n# proportions along rows\nprop.table(tab)\ncat(\"\\n\")\n\n# proportions throwout columns\nprop.table(tab, 2)\n\n```\n\n-   `margin.table()` : produce the marginals totals from a table.\n\n-   `addmargins()` : to a given table incorporates those totals producing a new row and column by default. Passing as second argument 1 or 2, you can specified if only wants rows or columns.\n\n```{r}\ncat(\"margin.table function for columns:\\n\")\nmargin.table(tab, 2)\n\ncat(\"\\naddmargins function in the table: \\n\")\naddmargins(tab)\n```\n\n-   `tapply()` : the arguments are, first the vector where perform the computation, second the vector with the index to group, and then the function to apply. To group with more than one vector (index) we can use a `list()`.\n\n```{r}\ncat(\"There are NA in cost? \")\nanyNA(cost)\ncat(\"\\n\")\n\ntapply (cost, year, min, na.rm=TRUE)\ncat(\"\\n\")\n\ntapply (cost, list(market, year), mean, na.rm = TRUE)\n```\n\nIt is posible to use with tapply() custom fuctions, as an example, for (x) return the sum of the squares of each entry of x:\n\n```{r}\ntapply (cost, list(market, year),\n        function (x) sum (x^2, na.rm = TRUE))\n```\n\n## Other Actions on Vectors\n\n### Rounding\n\n-   `round()` : to round a number with specific amount of decimals. Passing a negative number as second argument will round the nearest power of 10.\n\n-   `signif()` : retain a specific number of digits.\n\n-   `trunc()` : discards the decimal part returning an integer.\n\n-   `floor()` ; `ceiling()` : round to the next lower or higher integer respectively.\n\n```{r}\n(dec <- 123.4567)\n\ncat(\"\\nRound function to 3 decimals: \\n\")\nround(dec, 3)\n\ncat(\"\\nRound function (-1) to nearest power of 10: \\n\")\nround(dec, -1)\n\ncat(\"\\nSignif function to 4 numbers: \\n\")\nsignif(dec, 4)\n\ncat(\"\\nTrunc function: \\n\")\ntrunc(dec)\n\ncat(\"\\nFloor function to round to the lower integer: \\n\")\nfloor(dec)\n\ncat(\"\\nRound function to round to the higher integer: \\n\")\nceiling(dec)\n```\n\n### Sorting and Ordering\n\n-   `sort()` : sorting from smallest to largest. It will drop NA and NaN values by default.\n\n    -   `decreasing=TRUE` will reverse the order.\n    -   `na.last` will add NA values, TRUE at the end and FALSE at the beginning.\n\n-   `order()` : returns the indices which can be used to sort a vector.\n\n    -   `na.last` as TRUE by default. TRUE at the end and FALSE at the beginning.\n\n```{r}\npeople\n(scores <- c(123, 456, 789, 456, 654, 987))\n\ncat(\"\\nSorting 'people' by their scores (descending): \\n\")\npeople[order(scores, decreasing=TRUE)]\n\ncat(\"\\nOrdering people by their scores, and in case \n    of a tie using their names alphabetically.: \\n\")\npeople[order(scores, people[1:6])]\n```\n\n### Vector as Sets\n\nTo find values that overlap between two vectors we can use `%in%` function. For example, we can use a command `a %in% b` which will return a vector the same length as 'a' with a logical indicator whether each element is found in 'b'. Witch `table(a %in% b)` we get the number of element in 'a' that were not found in 'b'.\n\n```{r}\n# Looking for which letter is in 'letters':\nc(\"g\", \"5\", \"b\", \"J\", \"!\") %in% letters\ncat(\"\\n\")\n\ntable (c(\"g\", \"5\", \"b\", \"J\", \"!\") %in% letters)\ncat(\"\\n\")\n\nwhich(c(\"g\", \"5\", \"b\", \"J\", \"!\") %in% letters)\n```\n\n-   `union()` : returns the elements in either passed vectors\n-   `intersect()` : returns the elements which are in both passed vectors\n-   `setdiff()` : returns the elements of 'a' not present in 'b'\n\n```{r}\ncat(\"Union 'a' and 'b':\\n\")\nunion (c(\"g\", \"5\", \"b\", \"J\", \"!\"), letters)\ncat(\"\\n\")\n\ncat(\"Intersect 'a' with 'b':\\n\")\nintersect (c(\"g\", \"5\", \"b\", \"J\", \"!\"), letters) \ncat(\"\\n\")\n\ncat(\"Defferent elemenets of 'a' in 'b':\\n\")\nsetdiff (c(\"g\", \"5\", \"b\", \"J\", \"!\"), letters) \n```\n\n## Duplicates\n\n-   `anyDuplicated()` : returns the duplicated values in a vector\n\n-   `unique()` : returns the distinct values, including NA and NaN.\n\n-   `duplicated(`) : returns a logical vector with TRUE per duplicated value (not the first value).\n\n    -   `fromLast=TRUE` reads from the end to the beginning. Using union() you can combine `fromLast=TRUE` and `fromLast=FALSE` to identify all duplicates.\n\n```{r}\nlet <- c(letters, c(\"j\", \"j\", \"x\"))\n\ncat(\"Duplicates?\\n\")\nlet[duplicated(let)]\n\ncat(\"\\n\")\n(tab <- table (let))\n\ncat(\"\\n\")\ntab[which (tab != 1)]\n\ncat(\"\\n\")\nnames (tab)[tab != 1]\n\ncat(\"\\n\")\ntable (table (let))\n```\n\nMatching is identify where in a vector we can find the values in another vector. The function `match()` is a more powerful version of `%in%`.\n\n-   `match()` : given two vectors returns where the element from 'a' is in 'b'. By default returns NA for no matches, we can change this with `nomatch=0` argument.\n\n```{r}\nnames1 <- c(\"Jensen\", \"Chang\", \"Johnson\", \"Lopez\", \"McNamara\", \"Reese\")\nnames2 <- c(\"Lopez\", \"Ruth\", \"Nakagawa\", \"Jensen\", \"Mays\")\n\nmatch(names1, names2)\n\ncat(\"\\n\")\nnames2[match(names1, names2, nomatch=0)]\n```\n\nThe 'Run length enconding' function is rle() which returns the number of repetitions and length.\n\n```{r}\nrle( c(\"a\", \"b\", \"b\", \"a\", \"c\", \"c\", \"c\", \"a\", \"a\"))\n```\n\nThe previous output show, with length 1 value 'a' followerd by 'b' with length 2, again 'a' length 1 and then 'c' with length 3, to finish with 'a' twice.\n\n## Summary\n\n### Conversions\n\n-   Converting character to numeric produces NA for things that aren’t numbers, like the character strings \"TRUE\" or \"\\$199.99\".\n-   Converting character to logical produces NA for any string that isn’t \"TRUE\", \"True\", \"true\", \"T\", \"FALSE\", \"False\", \"false\" or \"F\".\n-   Converting numeric to logical produces FALSE for a zero and TRUE for any non-zero entry (and watch out for floating-point error here).\n\n### Subscripts\n\n-   A logical subscript returns the values that match up with its TRUE entries.\n-   A numeric subscript returns the values specified in the subscript.\n-   character subscript will extract, from a named vector, elements whose names are present in the subscript.\n\n# R Data: Other Structures\n\n## Matrices\n\nEssentially is a vector two-dimensional like a rectangle. Every element of a matrix needs to be of the same type (numeric, logical or character).\n\nA matrix is filled column by column.\n\nUsing `length()` we get the total number of elements in the matrix, and using `dim()` we get the dimension as number of rows and columns.\n\n-   `cbind()` : combines a set of vectors into a matrix column by column.\n\n-   `rbind()` : combines a set of vectors into a matrix row by row.\n\nIf the vectors to combine have unequal length, R will recycle.\n\nWith matrix in the same way as vectors we can do arithmetic operations, that will be element by element. Also, `t(A)` transposes a matrix, and `solve()` inverts a matrix.\n\nTo extract and assign new values to elements the process is similar to a vector but now we have to pass two coordinates:\n\n```{r}\na <- matrix(101:115, nrow=5, ncol=3)\na\ncat(\"\\n\")\n\na[1,2]\n\ncat(\"\\n\")\na[-2,]\n\ncat(\"\\nObtaining row 4 and 2, and cols 3 and 1, in that order: \\n\")\na[c(4,2), c(3,1)]\n```\n\nTo create a vector from a matrix we can use `c()`, it will use the first column, then the second and so on. To extract data row by row, we can use `t()` to transpose the matrix first like `c(t(a))`.\n\n```{r}\nc(a)\ncat(\"\\n\")\n\nt(a)\n\ncat(\"\\n\")\nc(t(a))\n```\n\nIf we ask to a matrix for one column we'll get a vector, because dimensions of length 1 are usually dropped by default. We can use drop=FALSE argument to prevent that.\n\n```{r}\na[,2]\n\ncat(\"\\n\")\na[,2, drop=FALSE]\n```\n\n### Row and Column Names\n\nWith `dimnames()` we get rows and columns names. `rownames()` and `colnames()` to get rows and columns names respectively. As well as with `names()` and vectors, we can asign names to columns and rows with these functions.\n\n```{r}\nyear <- rep (2015:2017, each = 5)\nmarket <- c(2, 2, 3, 2, 3, 3, 3, 2, 3, 3, 2, 3, 2, 3, 2)\n\n(tbl <- table (market, year))\n\ncat(\"\\nCollaing to colnames(): \\n\")\ncolnames(tbl)\n\ncat(\"\\nAssigning new names to columns: \\n\")\ncolnames(tbl) <- c(\"Y15\", \"Y16\", \"Y17\")\ntbl\n```\n\nJust like before, we can call for the column name or row identifier to get them:\n\n```{r}\ntbl[,\"Y15\"]\n\ncat(\"\\n\")\ntbl[\"3\",]\n```\n\n### Applying Functions\n\nBuilt in functions which works across columns or rows: `colSums(), rowSums(), colMeans(), rowMeans()`.\n\n-   `apply()` : Useful to apply a custom function.\n\n    -   first argument, the matrix to which apply the function.\n\n    -   The direction, 1 for across rows, 2 for down columns.\n\n    -   The function to be applied.\n\n```{r}\na\n\ncat(\"\\n\")\nrowSums(a)\n\ncat(\"\\n\")\napply(a, 1, sum, na.rm=TRUE)\n\ncat(\"\\n\")\napply(a, 1, function (x) sum (x))\n```\n\nWe can guet a matrix result for the `apply()` function. If we compute across rows, sometimes will change the shape, we can use `t()` to prevent that.\n\n```{r}\napply(a, 2, range)\n\ncat(\"\\n\")\nt( apply(a, 1, range) )\n```\n\nWhen we are looking for specific values we can get vectors with different lengths, in that case R returns a list.\n\n```{r}\ncat(\"Getting elements location where the value is greater than 109:\\n\")\napply(a, 2, function (x) which (x > 109))\n```\n\n### Missing Values\n\nThe function apply() is very useful to count the number of missing values. Next, let's create a matrix using a semicolon to pass multiple commands in one line, also the multiple assigment operation to assign several things at once:\n\n```{r}\na <- matrix(101:115, 5, 3); a[5, 3] <- a[3, 1] <- NA\na\n\ncat(\"\\nSum of NA in each column: \\n\")\napply(a, 2, function (x) sum (is.na(x)))\n```\n\nTracking NA values with `which()` to identify the position on the vector will return a number of the position for each NA. However, using `arr.ind=TRUE` argument we'll obtain the coordinates:\n\n```{r}\nwhich(is.na(a))\n\ncat(\"\\n\")\nwhich(is.na(a), arr.ind=TRUE)\n```\n\n### Matrix Subscripts\n\nWith `which()` as a subscript we have the possibility to extract specific elements.\n\n```{r}\nb <- matrix (1:20, nrow=4, byrow=T)\nb <- cbind(b, c(3, 2, 0, 5))\ncolnames(b) <- c(\"P1\", \"P2\", \"P3\", \"P4\", \"P5\", \"Use\")\nrownames(b) <- c(\"Spring\", \"Summer\", \"Fall\", \"Winter\")\nb\n```\n\nGiven the previous matrix, the Use column specify which element of the row we want get. To generate this coordinates, we are going to generate a matrix, the first column will be the number of rows and the second column 'Use'. Then we can pass that matrix as a subscript to 'b' and extract the elements.\n\n```{r}\n(filt <- cbind(1:nrow(b), b[, \"Use\"]) )\n\ncat(\"\\n\")\nb[filt]\n\n```\n\n### Higher-way Arrays\n\nA matrix with three or more ways is called Array in R. We can encounter this while constructing a higher way `table()`:\n\n```{r}\nwho <- rep( c(\"Mery\", \"Kelly\"), c(2, 6))\nwhen <- rep( c(\"AM\", \"PM\"), 4)\nworked <- c(T, T, F, T, F, T, F, T)\nsch <- table(who, when, worked)\nsch\n```\n\nThe function `aperm()` is like `t()` but for higher-way arrays. Also we can use `c()` to produce a vector, and `apply()` or `prop.table()` works too.\n\n## Lists\n\nA list can have vector or diferent types and sizes, also might include matrices, lists or other R objects. Usually a list is returned by a modeling function in R but we can create a list with `list()`:\n\n```{r}\nali <- list( alpha = 1:4, beta = \"yes\", delta = log, 69)\nali\n```\n\n-   `split()` : divides a vector into pieces according to the value of another vector. Returns a list. Missing values in the second vector passed will be dropped.\n\n```{r}\nage <- c(31, 33, 42, 54, 65, 74, 24)\ngender <- c(\"F\", \"M\", \"F\", \"M\", \"M\", \"F\", \"F\")\n\ncat(\"Split age by gender:\\n\")\nsplit(age, gender)\n\ncat(\"\\nSplit ages when age is greater than 60\\n\")\nsplit(age, age > 60)\n```\n\nWe can see with `length()` function the number of elements inside a list, and with `lengths()` function the length of each element.\n\n```{r}\nlength( split(age, gender) )\n\ncat(\"\\nLengths: \\n\")\nlengths( split(age, gender) )\n```\n\nThe `str()` command gives a description of every element on the list:\n\n```{r}\nstr(ali)\n\ncat(\"\\n\")\nclass(ali)\n```\n\n### Excracting from list\n\nWorking with a list, the rule says *single backets produce a list, while double backets and dollar signs extract contents.*\n\n```{r}\ncat(\"Extracting the content of element 4 as a vector: \\n\")\nali[[4]]\n\ncat(\"\\nExtracting the element 1 as a list: \\n\")\nali[1]\n\ncat(\"\\nExtracting inside alpha the elements 2 and 4: \\n\")\nali$alpha[c(F, T, F, T)] \n\n\n```\n\nThe function `names()` also works with lists returning the names of each element and \"\" if the element no have name. We can assign names with it too.\n\nWhen we extract an element from a list with dollar sign, we do not need to know the complete name, it is enough if it's unambiguous:\n\n```{r}\nali$a\n\ncat(\"\\n\")\nali$de\n```\n\nTo assign new values to an element we need the full name, otherwise will be creating a new ítem.\n\n```{r}\nali$delta <- c(T, F, F, T)\nstr(ali)\n```\n\nTo remove an element from a list we can assign a NULL value:\n\n```{r}\nali$beta <- NULL\nstr(ali)\n```\n\n-   `unlist()` : try to turn the list into a vector:\n\n```{r}\nunlist(ali)\n```\n\nUsing dimnames() function we can see the names from a matrix as list format and also we can asign names:\n\n```{r}\nb\ncat(\"\\n\")\ndimnames(b)\n\ndimnames(b)[[1]][3] <- \"Autumn\"\ncat(\"\\n\")\nb\n\n```\n\nAn important list returned from a function is the list from `options()` which contain elements describing things like number of digits to be displayed, scientific notation, the editor... With `names(options())` we can see the names of the current options.\n\n```{r}\nnames(options())[3:15]\n```\n\n## Data Frames\n\nA data.frame is a list of vector with the same length which can be arrayed in a matrix-like rectangle. Each vector in the list will be the columns. To construct a data frame we use `data.frame()` function.\n\n```{r}\ndf <- data.frame (\n    Who = letters[1:5],\n    Cost = c(3, 2, 11, 4, 0),\n    Paid = c(F, T, F, T, T),\n    stringsAsFactors=FALSE\n)\nrow.names(df) <- as.character (row.names(df))\ndf\n```\n\nA data frame must have a column and row names, if they are not assigned R will create them. Also R ensure that column names are valid and not duplicated. For columns we can use `colnames()` or `dimnames()` to assign it, or `names()` with a list. For row names we have `row.names()` or `rownames()` functions.\n\nBy default the `data.frame()` function turns character vectors into factors but rarely we want it in data cleaning. We can chage this with `stringAsFactors=FALSE` argument.\n\n-   `head()` : return the first six rows of a given dataframe. Second argument is n=6 to specify a number of rows. A negative number returns the last n rows.\n\n-   `tail()` : return the last six rows of a given dataframe. Second argument is n=6 to specify a number of rows.\n\n-   `str()` : compact representation of the data frame with data type per column.\n\n-   `dim()` : returns the dimension, number of rows and columns.\n\n-   `summary()` : returns a brief description of each column.\n\n### Missing Values\n\nBecause a data frame can have differnt classes (data types) in its colums, the missing values can be of different classes too. A numeric vector will have numeric NA which is different to logical NA from a logical vector.\n\n-   `is.na()` : returns a logical matrix showing which elements are missing.\n\n-   `anyNA()` : returns TRUE or FALSE to the question There are missing values?\n\n-   `na.omit()` : omit the observations (rows) of the data frame in which one or more elements is missing. Also keeps a track, we can see the deleted observations with `attr(df, \"na.action\") ; attr(df, \"class\")`.\n\nExtract and Assignment\n\nWith data frames we can use both matrix and list styles of subsetting operations. In data frames when we select a row returns a data frame because can store different types of data. Selecting a column will produce a vector.\n\nUsing a doble bracket or a dollar sign will produce a vector. Using the name produce a data frame.\n\n```{r}\ndf[4,]\n\nf <- df$Paid\ndf[f,]\n\ndf[(df[\"Paid\"] == F),]\n\ndf[\"Cost\"]\n```\n\nTo extract a vector from a dataframe's column:\n\n```{r}\ndf[[2]]\n\ncat(\"\\n\")\ndf[[\"Cost\"]]\n\ncat(\"\\n\")\ndf[[\"Co\", exact=FALSE]]\n```\n\nPassing `drop=FALSE` argument we avoid to extract a vector:\n\n```{r}\ndf[, c(\"Who\", \"Paid\")]\n\ndf[, \"Who\"]\n\ndf[, \"Who\", drop=FALSE]\n```\n\nTo delete a column we can asign NULL to that column: `df$Paid <- NULL`\n\nIn a data frame or list if we pass a subscript for unexistance row wil produce one row with NA values. Sometimes happens when we delete a row and a program or ourselfs try to access to that row by name.\n\n## Operating on Lists and Data Frames\n\nIf we try to use `apply()` in a data frame, the function will convert it to a matrix, and the whole matrix is of the same data type. Also, we cannot use `apply()` to a list because does not have dimensions.\n\n-   `lapply()` : returns a list\n-   `sapply()` : runs `lapply()` and tries to make the output into a vector or a matrix. But if the return have different lengths, it will need to return a list. If it try to return items with diferent types, will convert these to a common type, then its better in these case use `lapply()`.\n\n```{r}\nsapply (df, class)\n```\n\n### Spliy, Apply, Combine\n\nFirst the data is split, then a function is applied to each piece, and the results recombined. The function `tapply()` do exactly that, but also we can use `split()` and `sapply()` or `lapply()`.\n\n```{r}\ndf2 <- data.frame (\n    Age = c(35, 24, 42, 63, 56, 66),\n    Spouse = c(31, 36, 40, 59, 60, 60),\n    Gender = c(\"F\", \"F\", \"M\", \"F\", \"M\", \"M\")\n)\nsplit (df2$Age, df2$Gender)\n\ncat(\"\\nUsing sapply() to obtain the mean by gender :\\n\")\nsapply (split (df2$Age, df2$Gender), mean)\n```\n\nAbove, `split()` divides Gender with Age values, then `sapply()` use `mean()` function to each part and returns a vector with the results (is the recombine). Let's see `tapply()` :\n\n```{r}\nround( tapply(df2$Age, df2$Gender, mean), 3 )\n```\n\nWe can use `split()` on a data frame unlike `tapply()`, doing that the data frame will be divided and then we can use `sapply()` or `lapply()` to each part.\n\n```{r}\nsplit (df2, df2$Gender)\n\ncat(\"\\nSummary differencing Gender: \\n\")\nlapply ( split (df2, df2$Gender), summary )\n```\n\n```{r}\ncat(\"\\nLet's see what happens with sapply: \\n\")\nsapply ( split (df2, df2$Gender), summary )\n```\n\nThe previous `sapply()` will try to construct a vector or matrix converting everything to a common type.\n\nA function to produce the same result is `by()` but without letting you save the list. It will performs the `summary()` operation on each column, broken down by gender:\n\n```{r}\nby ( df2, df2$Gender, summary )\n```\n\nSometimes the task split, apply and combine can be performed altogether, but but other times might require separate functions. Packages like `dplyr` for data frames or `plyr` for lists and arrays. Both are intended to be fast and efficient and to permit parallel computation.\n\n### All-Numeric Data Frames\n\nA data frame with all of its values are logical or numeric when is converted to a matrix the numeric type is preserved.\n\nTo convert vectors to another class exists as.numeric() and the other as. functions, also there are as.matrix() and as.data.frame() to convert data frames to matrices and vice versa. It is useful for all-numeric data frames and older functions that require numeric matrices.\n\n### Convenience Functions\n\nIt is recommended to users to use long names for data objects and columns for increases readability. But sometimes leads to use long line expression like:\n\n`CustPayment2016$JanDebt + CustPayment2016$FebPurch - CustPayment2016$FebPmt`\n\nThese can be handled with the functions:\n\n-   `with()` : to perform operations on a data frame. First argument is the data frame, then the expression to be performed. Cannot be assigned to.\\\n    `` with ( CustPayment2016, JanDebt `FebPurch - FebPmt ) ``\n\n-   `within()` : works in the same wey but unlike `with()`, this function can be assigned.\\\n    `CustPayment2016 <- within ( CustPayment2016, FebDebt <- JanDebt + FebPurch - FebPmt )`\n\nFor beginners and to use then interactively and not for programming there are functions to make the subsetting and transformation process easier ( but generally its avoided):\n\n-   `subset()` : To extract rows given a condition:\n\n    ```{r}\n    subset ( df, Paid == TRUE)\n\n    # Is the alternative to:\n    df[ df$Paid == TRUE, ]\n    ```\n\n-   `transform()` : To specify transformations to existing columns and returns the updated version.\n\nTo change the way we write functions we can use a 'pipe' as `%>%` provided by `magrittr` package. The pipe allows a function's output to serve as input to another function. Not every function is suitable for piping, the pipes are particularly useful for nested functions.\n\n```{r}\ncat(\"Nested: \\n\")\ncos (log (sqrt (8 - 3) ) )\n\nlibrary(\"magrittr\")\ncat(\"\\nUsing pipes: \\n\")\n(8 - 3) %>% sqrt %>% log %>% cos \n\n```\n\n### Re-Ordering, De-Duplicating, Sampling\n\nWe can create a vector with `order()` which contain indices sorted by the variables inside.\n\n``` r\ndf\nnew.order <- order( df$ID, df$Date )\n# convenient alternative:\nnew.order <- with ( df, order (ID, Date) )\n\n# 'new.order' have a vector with the rows sort by increasing ID\n# To have the data frame with the new order:\ndf[new.order, ]\n```\n\nFor duplicated values, we can use unique() passing the data frame to get every non-duplicated row. Just the floating-point error might be a problem detecting identical rows.\n\n-   sample() : first argument is the number of total rows, the second argument is the size of the sample we want. By default the result is a random set of integers without replacement. The row number of sampled data frame will be the same that originals.\n\n    ``` r\n    # Sample of 200 rows:\n    # First, create a vector selecting the rows\n    s200 <- sample ( nrow(df), 200 ) \n\n    # Using the sample vector to do the sampling:\n    df[s200, ]\n    ```\n\n## Date and Time Objects\n\n### Formatting Dates\n\nThe class Date internally store an integer representing the number of days since a particular origin date.\n\nDates can be represented in many shapes, american's form, rest-of-the-world form, etc. the `as.Date()` function converts text into Date class.\n\n```{r}\n# First '0' will be converted into origin date.\ndd <- as.Date ( c(0, 18252:18255), origin = \"1970-01-01\" )\n\ndd\n```\n\nAlso can convert text based representations in Date class such as \"7/4/2019\". In this case we have to pass `format=` argument, and the format string had to contain the same pattern that the input text:\n\n-   `%b ; %B` : name of the month\n-   `%a ; %A` : name of the day of the week\n-   `%d` : day of the month\n-   `%m` : month in number\n-   `%y ; %Y` : for the yy or YYYY year.\n-   `%F` : Equivalent to %Y-%m-%d.\n-   `%x` : Date. Locale-specific on output, `\"%y/%m/%d\"` on input.\n\n```{r}\nas.Date ( c(\"Feb 29, 2016\", \"Feb 29, 2017\", \"September 30, 2017\"), \n          format = \"%b %d, %Y\" )\n\n# The second date will result NA because is not valid\n```\n\nThe names of the days of the week and the months of the year are in computer's locale, to read other languages we can change locales R.\n\n```{r}\nsp.dt <- c(\"3 octubre 2016\", \"26 Marzo 2017\")\n\n( dts <- as.Date (sp.dt, format = \"%d %B %Y\") )\n\n# Changing locales to spanish:\nSys.setlocale (\"LC_TIME\", \"Spanish\")\n\n( dts <- as.Date (sp.dt, format = \"%d %B %Y\") )\n\n# Changing back:\nSys.setlocale (\"LC_TIME\", \"UK\")\n```\n\n### Operations on Date Objects\n\nThe functions `months()` and `weekdays()` returns the month name and weekday from passing Date object. It can be added the `abbreviate=TRUE` argument to abbreviate the output.\n\nTo extract the numeric month, day or year it can be used the `format()` function and then using `as.numeric()` to convert the character output to numeric.\n\n```{r}\ndt1 <- as.Date (\"2024/05/17\")\ndt2 <- as.Date (\"2024-07-03\")\n\n# Extracting weekdays:\nweekdays( c(dt1, dt2) )\ncat(\"\\n\")\n# Extracting month name:\nmonths( c(dt1, dt2), abbreviate = T )\ncat(\"\\n\")\n# Identifying Quarters:\nquarters( c(dt1, dt2) )\ncat(\"\\n\")\n\nformat ( c(dt1, dt2), \"%y\")\nformat ( c(dt1, dt2), \"%d\")\nformat ( c(dt1, dt2), \"%A, %B %d, %Y\")\n```\n\nThe difference between dates is a period of time stored as `difftime` object. Functions such as `mean()` and `range()` works well but `hist()` or `summary()` fails producing the expected results.\n\nUsually we will convert `difftime` objects to numeric with `as.numeric()` function, for that will be a good habit to specify `units = \"days\"` argument (with the unit we want.\n\n```{r}\ncat(\"Date1 adding 30 days: \\n\")\ndt1 + 30\n\ncat(\"\\nDifference between date1 and date2: \\n\")\n(dd <- dt2 - dt1)\n\ncat(\"\\nDifference to numeric: \\n\")\nas.numeric (dd)\nunits(dd)\ncat(\"\\nTo numeric but in weeks: \\n\")\nas.numeric (dd, units=\"weeks\")\n```\n\n### `POSIXt` Objects\n\n`POSIXlt` object is implemented as a list, meanwhile `POSIXct` object is like a number useful is will be stored in a column.\n\n```{r}\n(ready <- as.POSIXlt(\"2017-01-17 14:51:23\"))\n\ncat(\"\\n\")\nunlist (ready)\n\ncat(\"\\n\")\n( mdayn <- as.numeric(unlist (ready)[\"mday\"]) )\n```\n\nIn this last example we can see January is month 0 then December is month 11. Weekday is 0 to 6 starting on Sunday.\n\nHere it can be used too the `weekdays()`, `months()` and `quarters()` functions, as well as `format()` function. This will be less efficient than the list-type extraction, and it is recommended use `POSIXct` objects where possible because changing time zones with `POSIXlt` can encounter unexpected behavior.\n\nWhen we convert a `Date` object to `POSIXt` the time will be 00:00 (midnight), and when it converted from `POSIXt` to Date, the time will be truncated.\n\nas.POSIXct() and as.POSIXlt() works like as.Date() but the date can be followed by 24-hour clock time (or 12h with AM/PM).\n\n```{r}\n( ct1 <- as.POSIXct (\"Mar 30, 2017 12:26:08 am\", \n                     format = \"%b %d, %Y %I:%M:%S %p\") )\ncat(\"\\n\")\n(ct2 <- as.POSIXct (\"2017-03-29 22:26:08\", tz = \"UTC\"))\n\ncat(\"\\nLooking for diferences: \\n\")\nas.numeric (ct1 - ct2, units = \"secs\")\n```\n\nAll the objects in a vector of length \\>1 including `weekdays()` and `months()` will be displayed with the local time zone. For a single object these functions refer to the time zone of the object:\n\n```{r}\nc(ct1, ct2)\n\ncat(\"\\n\")\nweekdays(c(ct1, ct2))\ncat(\"\\n\")\nweekdays(ct2)\n```\n\nThe time zone can be converted changing `tzone` attribute:\\\n`attr ( ct1, tzone = \"UTC\" )`\n\nThe help of `Sys.timezone()` containing the names of the time zones. When a POSIXct object is converted to Date object is rendered in UTC time zone by default:\n\n```{r}\nas.Date(ct2)\nas.Date(ct1)\n```\n\nExample of `POSIXct` formatting flexibility:\n\n```{r}\n(crdt <- date() )\ncat(\"\\n\")\n\n(now <- as.POSIXct (crdt, format = \"%A %B %d %H:%M:%S %Y\" ) )\n\ncat(\"\\n\")\nas.Date (now)\n```\n\nMath Functions\n\nDate and `POSIXt` objects are numeric, then we can use some functions such as `range(), max(), min(), mean(), median()`, which will produce vectors of date objects.\n\n`diff()` : computes differences between adjacent elements in a vector.\n\n```{r}\ndiff ( range( c(ct1, ct2) ) )\n```\n\nThe function `table()` works too but does not work on `POSIXlt` (list) objects.\n\nWe can also create sequences with `seq()` function, it can be specified `by=\"day\"` argument:\n\n```{r}\nseq ( as.Date(\"2020-03-11\"), by = 3, length = 5 )\n\ncat(\"\\n\")\npdt <- as.POSIXct( (\"2020-03-11 13:05:00\") )\nseq ( pdt, by = 2, length = 3)\n\ncat(\"\\nSequence by days:\\n\")\nseq (pdt, by = \"day\", length = 3)\n\ncat(\"\\nBy day without altering the hour: \\n\")\nseq (pdt, by = \"DSTday\", length = 3)\n```\n\nWith `POSIXt` object using `by=\"day\"` the clock moves 24 hours, but `by=\"DSTday\"` moves 1 day preserving the clock.\n\nWe have to be more careful with `POSIXt` and `difftime` objects:\n\n```{r}\nd1 <- as.POSIXct (\"2017-05-01 12:00:00\")\nd2 <- as.POSIXct (\"2017-05-01 12:00:06\")\nd3 <- as.POSIXct (\"2017-05-07 12:00:00\")\ncat(\"Are equal (d2 - d1) and (d3 - d1) ? :\\n\")\n(d2 - d1) == (d3 - d1)\n\ncat(\"\\nSame operation but using as.numeric() : \\n\")\nas.numeric(d2 - d1) == as.numeric(d3 - d1)\n\ncat(\"\\nSame as.numeric but with units=days:\\n\")\nas.numeric(d2 - d1, units=\"days\") == as.numeric(d3 - d1, units=\"days\")\n```\n\n### Missing Values\n\nIn a vector dates of different classes should not be combined, a good practice is to use a function to force all the elements to have the same class.\n\n```{r}\nc(d1, NA)\n\ncat(\"\\n\")\nc(NA, d1)\n\ncat(\"\\n\")\nc( as.Date(NA), d1)\n\ncat(\"\\n\")\nc( as.POSIXct(NA), d1)\n```\n\nThe first `c(d1, NA)` knows what to do with the `NA` value because `d1` is first, but the second one do not, then convert the vector into numeric. That not happens in the third and fourth command when we specify which class is the `NA` value.\n\n### `Apply()` on Dates\n\nOften a data set will have a series of dates in each row, like with a data frame is better to use `lapply()` and `sapply()` functions:\n\n```{r}\ndt.df <- data.frame(\n    Start = c( seq (as.Date(\"2020-05-03\"), by=\"months\", length = 6) )\n)\n\n# Creating a new column\ndt.df$End <- c( seq (as.Date(\"2021-06-02\"), by=\"months\", length = 6) )\n\ndt.df\n```\n\n```{r}\nsapply ( 1:nrow(dt.df), \n         function (i) as.numeric (dt.df[i,2] - dt.df[i,1], \n                                  units = \"days\") ) \n```\n\n## Actions with Data Frames\n\n### Combining by Rows or Columns\n\nThe function `data.frame()` can be used with two data frames inside and will be joined. Also `cbind()` function is useful. Both can incorporate vectors and matrices as well. Remember that characters will be converted into Factors unless `stringAsFactors=FALSE`.\n\nIt is a good idea to check duplicated column names before combining, with `intersection()` function for example. If there are duplicated names R will use `make.names()` to generate unique alternatives (adding .1 .2 .3 ...).\n\n```{r}\nnames(df)\nnames(df2)\n# Forcing 'intersect' to get a column names coincidence\ndf2$Paid <- c(NA,NA,NA,NA,NA,NA)\nintersect( names(df), names(df2) )\n```\n\nWith `rbind()` we can combine data frames vertically (by rows). The columns in both data frames have to be the same, number and name, but not the order. Also the columns it's recommended to have the same class or R will convert to the common class. Pass `stringAsFactor=FALSE` with `rbind()` to ensure the character columns.\n\n``` r\n# Checking column names on two data frames:\nnam1 <- names (df1)\nnam2 <- names (df2)\n\nall (sort (nam1) == sort (nam2) )\n```\n\nAbove we sort the names of each data frame with a comparation expecting TRUE as result.\n\n``` r\n# Checking column classes\ncs1 <- sapply (df1, class)\ncs2 <- sapply (df2, class)\n\nisTRUE (all.equal (cs1, cs2[names (cs1) ] ) )\n```\n\nAnd now we compare both classes.\n\n-   `all.equal()` : compares two objects and returns TRUE if the match. Also returns a report if there are differences.\n-   `isTRUE()` : returns TRUE if its argument is a single TRUE (expected for `all.equal()` ) or FALSE if there are something else.\n\nWhen the rows have basic numeric names R will adjust the resulting rows. But with modified row names R will try to keep them and taking care of the matches.\n\nIf we have a large number of data frames, for example in a list as the result of `lapply()` function, we can use `do.call()` to combine them. The function takes the name of a function to be run and a list of arguments and run the function with those arguments:\n\n``` r\n# Result of lapply() function:\nlist.of.df\n\ndo.call ( \"rbind\", list.of.df )\n```\n\nIn the command above we are assuming that data frames meet the `rbind()` criteria. Other basic example can be: `do.call(\"log\", list(x = 32, base = 2)` where the list are the argument of `log().`\n\n### Merging Data Frames\n\nTo `merge()` usually the data frames to merge have a \"key\" field. Then `merge()` matches up the key and produces a data frame with one row per key with the columns of both data frames.\n\n-   `merge()` arguments:\n\n    -   `(all.x=FALSE, all.y=FALSE)` : default options. One row for each key that appears in bot x and y data frames (except when there are duplicated keys). Is an `'inner join'`.\n    -   `(all.x=TRUE, all.y=FALSE)` : One row for each key in x and columns of the corresponding keys that do not appear in y are filled with NA values. Is an `'left join'`.\n    -   `(all.x=FALSE, all.y=TRUE)` : Is the complementary one, an '`right join`'.\n    -   `(all.x=TRUE, all.y=TRUE)` : This id the '`outer join`', when the result has one row for every key in either x or y.\n\nWhen the keys are duplicated the function `merge()` does not care, it will do it. It is best to remove rows with duplicated keys or to create a new column with a unique key, before merging.\n\nIf the key match approximately (people names) the functions `adist()` and `agrep()` help find keys that match approximately.\n\n### Comparing Data Frames\n\n-   `identical()` : test for every strict equivalence. Returns `TRUE` when the two items are equal. Should not be applied to `POSIXlt` or data frames with this object.\n\n-   `all.equal()` : compares two objects but with more room for difference. Returns `TRUE` when two items are equal. By default is a match between names and attributes of two data frames. Correct way to compare: `isTRUE(all.equal(df1, df2))`\n\n    -   `tolerance=` how different two numbers need to be to be declarated different.\n\n### View and Editing Data Frames\n\n-   `View()` : shows a dear-only representation of a data frame.\n-   `edit()` : allows change to be made. Can be saved to reflect the changes\n-   `data.entry()` : the changes are saved automatically.\n\nIs strongly recommended to use commented scripts and functions because in that way all the steps in the process will be reproducible.\n\n## Handling Big Data\n\nR store the data in main memory on the machine being used.\n\nBash include tools to provide the ability to break the data into manageable pieces:\n\n-   `split` : breaks up a data set by rows.\n-   `cut` : extracts specific columns.\n-   `shuf` : which permits the lines in a file, which helps when taking random samples.\n\nThe `data.table` package advertises very fast subsetting and tabulation.\n\nThere are add-in packages to maintain \"pointers\" to data on disk, it is slower than memory but the storage can be expected to be huge:\n\n-   `bigmemory`\n-   `ff`\n-   `tm`\n\n## Data Handling Tools\n\nTo account for columns with a vector of two or more classes we can extract the classes into a variable:\n\n```{r}\ndf2\n```\n\n```{r}\n( col.cls <- sapply(df2, function (x) class (x)[1] ) )\n```\n\n-   table() to tabulate the columns classes.\n\n    ```{r}\n    table(col.cls)\n    ```\n\n-   To count missing values by column, or count negative or a number equal to 99 like other 'missing' values:\n\n    ```{r}\n    sapply( df2, function(x) sum(is.na(x) ) )\n    ```\n\n    -   If there are a large number of columns we can pass `sapply()` results to `table(`)\n\n    ```{r}\n    sapply( df2, function(x) sum(is.na(x) ) ) |> table()\n    ```\n\n    ```{r}\n    sapply( df2, function(x) sum (x < 0, na.rm = TRUE) )\n    ```\n\n-   To compute the ranges of numeric columns in a search of outliers or anomalies.\n\n    ```{r}\n    sapply (df2[, col.cls %in% c(\"numeric\", \"integer\") ], range, na.rm=TRUE ) \n    ```\n\n-   To count unique values by column:\n\n    ```{r}\n    sapply(df2, function(x) length(unique(na.omit(x) ) ) )\n    ```\n\nThe `apply()` function converts the data frame to a matrix first, should be used if all the columns of a data frame are of the same type. The `sapply()` function tries to return a vector or a matrix if it can, so if the return elements are of different classes they will often be converted. It is better to use `lapply()` unless we know that one of the other functions will succeed.\n\n# R Data: Text and Factors\n\nTwo ways to store test data, the vector of character strings and as a factor which is text entries as integers with character labels that match those integers.\n\n## Character Data\n\n### `length()` and `nchar()`\n\nOn a vector using `length()` we extract how many elements are in it, and using `nchar()` we extract how many letters there are in each element. The argument `keepNA=FALSE` allow `nchar()` to count `NA` values returning 2 of length.\n\n```{r}\nwriters <- c(\"asimov\", \"tolstoi\", \"wolf\", \"sanderson\", \"joyce\")\nlength(writers)\nnchar(writers)\n```\n\n### Escaped characters\n\nIn character strings some characters are protected, we have to use backslash `( \\ )` to use them.\n\nWe have to escape the double quotation marks and the backslash:\n\n*She wrote, \"To enter a 'new-line,' type \"\\\\n\" .\"*\n\n```{r}\n( quo <- \"She wrote, \\\"To enter a 'new-line,' type \\\"\\\\n\\\" .\\\"\" )\nnchar (quo)\ncat(quo, \"\\n\")\n```\n\nEmpty String\n\nA vector length 0 corresponds to `character(0)`. An empty string is a vector in which an element have spaces or not, indicated by `\"\"`. It will be length 1 and nchar 0. Spreadsheets will sometimes produce this empty strings or strings of spaces:\n\n```{r}\nblanks <- c (\" \", \" \", \"\", \"   \", \"\", \"2016\", \"\", \" 2016\", \"2016\", \"   \")\nlength(blanks)\ntable(blanks)\nnames(table(blanks))\nnzchar(blanks)\n\n# Removing white spaces located in the start or end of a element:\nnoblanks <- trimws(blanks)\ntable(noblanks)\nnames(table(noblanks))\n```\n\nThe function `nzchar()` returns TRUE for strings that have non-zero length and FALSE for empty strings. And with `trimws()` we can remove blanks at the beginning and end of each element.\n\n### Substrings\n\nFrequently in data cleaning we have to extract a piece of string, like a year or Zip code. For this task the `substring()` function takes a piece of text:\n\n-   `substring()` : given a vector extract the selected text.\n\n    -   `first=` position of the first character to extract\n\n    -   `last=` position of the last character up to 1 Million. Can be omitted to get the end of the string.\n\nAlso, `substring()` can be on the left side of an assignment, then we can add some text to each element of a vector.\n\n```{r}\ndt1 <- \"2017-02-03\"\n# Extracting the year\nsubstring(dt1, 1, 4)\n# Extracting day and month (last five characters)\nsubstring (dt1, nchar(dt1) - 4)\n\n```\n\nTo break a string into its individual characters we can do it with `strsplit()` and also with `substring()`:\n\n```{r}\nsubstring(dt1, 1:nchar(dt1), 1:nchar(dt1) )\nstrsplit(dt1, split = NULL)\n```\n\nTo change the last letters of a character element with `substring()` :\n\n```{r}\nholid <- month.name\nsubstring (holid[6:8], nchar(holid[6:8]) - 0 ) <- \"9\"\nholid[5:9]\n```\n\n### Case and Substitutions\n\nWe will need sometimes to manipulate the case of characters because R is case-sensitive.\n\n`tolower(), toupper(), casefold()` functions perfrom these convertions. Using `casefold()` have to be passed the argument `upper=` being `TRUE` or `FALSE` which change to upper or lower case respectively.\n\nThe function `chartr()` is a general solution for substitutions. It takes two arguments that are vectors of characters and changes each character in the first argument into the corresponding character in the second argument.\n\nTo capitalize the every first letter of a character string, from `help(\"casefold\")`:\n\n```{r}\n.simpleCap <- function(x) {\n    s <- strsplit(x, \" \")[[1]]\n    paste(toupper(substring(s, 1, 1)), substring(s, 2),\n          sep = \"\", collapse = \" \")\n}\n.simpleCap(\"the quick red fox jumps over the lazy brown dog\")\n```\n\n## Converting numbers into text\n\n### Formatting Numbers\n\n-   `format()` : is a way to format a set of numbers in a common way. E.g. lining up decimal points and commas.\n\n    -   `digits=` number of digits\n\n    -   `nsmall=` number of digits (minimum) in the 'small' part (the right of the decimal point).\n\n    -   `big.mark=` determine the comma in the 'big' part (the thousand mark).\n\n    -   `drop0trailing` , removes trailing zeros in the small part.\n\n    -   `zero.print=` , if TRUE, causes zeros to be printed with spaces.\n\n```{r}\nformat ( c(12.23, 1234.45678, 0, 10.000) )\nformat ( c(12.23, 1234.45678, 0, 10.000), big.mark=\",\" )\nformat ( c(12.23, 1234.45678, 0, 10.000),\n         digits = 6, nsmall = 2, zero.print = FALSE, width = 2)\n```\n\nDecimal part by default will be aligned. The last example shows a currency type format, which the `digits` and `nsmall` arguments have to be chosen carefully to produce two decimals.\n\nWith `sprintf()` we can include text and add leading zeros. The function have a format string containing text and conversion strings, which describe how numbers and other variables should appear in that output. A conversion strings start with a percent sign and contain modifiers and then a conversion character.\n\nThe conversion character `%i` or `%d` are for integer values, `%f` is for double-precision numerics, and `%s` is for character strings. This field can be formatted with two numbers separated by a period, the first one give the minimum width (total number of characters) and the second one is the number of digits to the right of the decimal points.\n\n```{r}\n# 8 characters, 2 decimals.\nsprintf ( \"%9.2f\", 1230.456789 )\n# 0 leading the character to fill with 0 until 8 characters.\nsprintf ( \"%09.2f\", 1230.456789 )\n# Like the previous one but with spaces\nsprintf ( \"% 9.2f\", 1230.456789 )\n# Always a simbol leading the number\nsprintf ( \"%+9.2f\", 1230.456789 )\n# Left Justified\nsprintf ( \"%-9.2f\", 1230.456789 )\n# exponential\nsprintf ( \"%9.3g\", 1230.456789 )\n```\n\nAlso we can use `sprintf()` with more than one vectors:\n\n```{r}\ncosts <- c(3, 22, 456.32, 89340.4235, 1230045605.959)\nsprintf ( \"I spent $%.0f in %s\", costs, month.name[2:6] )\n```\n\nIn the conversion, the field width or precision can be passed as an argument if we specify an asterisk in the format:\n\n```{r}\nbigs <- max (nchar (sprintf (\"%.2f\", costs) ) )\n\nsprintf (\"spent $%*.2f in %s\",\n         bigs, costs, month.name[2:6] )\n\n```\n\nThe function `sprintf()` can be very useful to generate labels:\n\n```{r}\nsprintf (\"%03d\", 1:15 )\n```\n\n### Scientific Notation\n\nWhen you represent a number by an optional sign, a number between 1 and 10 and a multiplier of a power of 10.\n\nIn R we can use `options()` to change scipen option. If `scipen=999` the scientific notion will be disabled, and `scipen=-999` will force scientific notion. When you close and open R `scipen` is re-set to default values. It is a better option to use `format(x, scientific=FALSE)`.\n\n```{r}\n100000\nc( 1, 100000 )\nc( 1, 100000, 123456 )\nas.integer (1000000 + 1 )\nformat ( 1000000, scientific=FALSE)\n```\n\n### Discretizing a Numeric Variable\n\nDiscretizing is to construct a categorical version of a numeric vector with a few levels for exploration or modeling purposes, it is also called 'binning'.\n\n-   `cut()` : the arguments are the vector to be discretized and the breakpoints; optionally we can pass labels to be applied to the new levels. The result is a factor vector.\n\n    -   `include.lowest=` if `TRUE` will include the left endpoint to the binning. By default will not be included.\n\n    -   `right=` if `FALSE` makes intervals include their left end and exclude the right.\n\n    -   `breaks=` passing an `integer` will produce that number of bins with equal width.\n\n```{r}\nvec <- c(1, 5, 7, 2, 8, 9, 3, 4, 10)\nas.character (cut (vec, c(1, 4, 7, 10), include.lowest=TRUE, right=FALSE) )\n```\n\n```{r}\n# Generating random numbers\nset.seed(168)\nrand.vec <- rnorm(1000)\n\n# cut() with breaks=5 of equal width\ntable (cut (rand.vec, breaks=5) )\n\n# Using quantile() to create bins with equal number of observations\ntable (cut (rand.vec, quantile(rand.vec) ) )\n\n# quantile() with probs argument to create 5 bins instead of 2\ntable (cut (rand.vec, \n            quantile(rand.vec, probs=seq(0, 1, 0.2) ), \n            include.lowest = TRUE ) )\n\n```\n\n## Character Strings\n\n-   `paste()` , `paste0()` : sticks together two character vectors, and if its necessary convert them into a `character` vector first. By default it will insert a space between them.\n\n    -   `sep=` to choose the separation, e.g. `sep=\".\"` or `sep=\"\"` .\n\n    -   `collapse=` combines all the strings of the vector into one long string. It will use the separator specified by the value of this argument. e.g. `collapse=\"\"` or `=\"\\t\"` .\n\n```{r}\npaste(\"a\", \"b\", \"c\")\n\npaste0( 1 == 2, 1 + 2)\npaste0(\"Arg\", sep=\".\", LETTERS[3:7])\npaste(letters[1:5], LETTERS[5:1], collapse = \", \")\n```\n\n### Column Names\n\nWhen a data frame is constructed from data without header names, R construct names such as V1 and V2. Usually we will want to replace these names to others more meaningful.\n\nFor example, we want column names for 36 months of balance data from 2021 to 2023, also 36 months of payment data for the same years.\n\n-   `outer()` : given two vectors, performs another function on each pair of elements producing a matrix.\n\n-   `expand.grid()` : given vectors of values produces a data frame containing all combinations of all the values.\n\n```{r}\nhead (\n    outer (month.abb, 2021:2023, paste, sep = \".\" ), 5\n)\n# Creating the month sequence for each year\nmonseq <- outer (month.abb, 2021:2023, paste, sep = \".\" )\n# Creating the column names\nnewnam <- c(\"ID\", \n            paste0 (\"Bal.\", monseq), \n            paste0 (\"Pay.\", monseq) )\n\nsample(newnam, 5)\n```\n\n```{r}\n# Alternative maybe more eficient but more tedious\np1 <- rep (c(\"Bal\", \"Pay\"), 12 * 3)\n# Each month 2 times for Bal and Pay, and then 3 times for the years\np2 <- rep ( rep(month.abb, each = 2), 3 )\n# Each year two times, for Bal and Pay\np3 <- rep (2021:2023, each = 24)\n\nnewnam <- c(\"ID\", paste(p1, p2, p3, sep=\".\") )\nsample(newnam, 5)\n```\n\n```{r}\nnames.df <- expand.grid (c(\"Bal\", \"Pay\"), \n                         month.abb, \n                         c(2021:2023) )\n\nnewnam <- paste ( names.df[[\"Var1\"]], \n                  names.df[[\"Var2\"]], \n                  names.df[[\"Var3\"]],\n                  sep = \".\" )\n\nsample(newnam, 5)\n```\n\n### Tabulating Dates\n\nTo summarize vectors of dates:\n\n```{r}\nset.seed(168)\nrnd.dts <- as.Date (sample (0:730, size = 600), origin = \"2021-01-01\")\n\ntable (quarters (rnd.dts) )\n\n# To combine year.month is also possible with substring() instead of format\ntable ( paste0 (format (rnd.dts, \"%Y\"), \".\", quarters(rnd.dts) ) )\n\n```\n\nIf we want to use the month instead of the quarter, we can extract the moth name with `month()` function and use paste, or it is possible to use `format()` directly with the year and the month name.\n\n```{r}\nym.order <- paste0 (2021:2023, \".\", month.name )\n\nym.tbl <- table (format(rnd.dts, \"%Y.%B\") )\n\nym.tbl[ym.order][1:5]\n```\n\n### Unique Keys\n\nOften we need to construct a column with an unique identifier for each row. These previous methods are useful for that task. Maybe the year and month are not enough and we have to add a customer ID or something else to achieve this column with unique keys.\n\n### Files and Path names\n\nTo create a vector with every file in the working directory and each one with it absolute path we can use `paste(getwd(), list.files(), sep=\"/\")` . If we use `list.files(full.names=TRUE)` will return only the relative path.\n\n## Regular Expressions\n\nWe use regular expressions to find strings that match a pattern. This patterns are case-sensitive but can be ignored. R can use POSIX regular expression and Perl-style re.\n\nFor regular expresson in R there are three primary tools which are `grep()`, `regexpr()` and `sub()`, all tree with its variants.\n\n-   `grep()` : given a pattern and a vector of strings, returns a numeric vector with the indices of the string that match the pattern.\n\n    -   `value=` if `TRUE` returns the matching string themselves.\n\n    -   `ignore.case=` if `TRUE` will ignore whether letters are in upper or lower-case.\n\n    -   `invert=` if `TRUE` reverses the search, returning the elements that not match. It's not available with `grepl()`\n\n    -   `fixed=` if `TRUE` suspends the rules about patterns and simply searches for an exact text string.\n\n    -   `perl=` if `TRUE` indicate to grep() to use Perl-type regular expressions.\n\n    -   `useBytes=` if `TRUE` the matching should be done byte by byte.\n\n-   `grepl()` : returns a logical vector indicating the elements that match.\n\nSpecial Characters in POSIX regular expressions:\n\n![](images/clipboard-3145267093.png)\n\nIt is common to see `.+` in regular expressions, that means *a sequence of one or more characters*. Also we can see `.*` for *zero or more characters*.\n\nIs is a mistake to add spaces to your pattern thinking 'it will be more readable', because the regular expression will then take the spaces literally and require that they appear.\n\nLooking in a character vector with dates:\n\n```{r}\ndt <- c(\n    \"Balance due 16 Jun or earlier in 2017\",\n    \"26 Aug or any day in 3021\",\n    \"'76 Trombones' marched in a 1962 film\",\n    \"4 Apr 2018\", \"9Aug2006\",\n    \"99 Voters May Register in 20188\"\n)\n\n```\n\n-   `.*` if we have leading text\n\n-   `[0-3]?[0-9]` matches a one digit number, the first digit is optional indicated by '?'\n\n-   `.*` again for additional text\n\n-   `(\", or.mon, \")` will be the variable with the month names separated by pipes `\"|\"`. The parenthesis make this a single pattern. The abbreviations will match a full name.\n\n-   `.*` more additional text\n\n-   `[1-2][0-9[{3}` four digits that have to start with 1 or 2\n\n```{r}\nor.mon <- paste (month.abb, collapse = \"|\")\nor.mon\nre <- paste0 ( \".*[0-3]?[0-9].*(\", or.mon, \").*[1-2][0-9]{3}\")\ngrep (re, dt, value = TRUE )\n```\n\nThe line with '20188' match because the four digits with `[1-2][0-9]{3}` match. Also the '99' matches because `[0-3]` is optional and the first 9 matches in the `[0-9]` pattern and the second match with `.*` .\n\n#### Escape Sequences\n\nTo write some special characters like the dollar sign \\$, we have to pass a backslash to escape \\$ from the engine which read regular expressions. To escape a character usually we should use `\\$` but in R we need to escape also the backslash because R have special characters like `\\n` to create a new-line. Then we will write double backslash and the simbol `\\\\$`. In some case, to look for the backslash itself we have to write four backslashes, two for the escape and other two for the search: `\\\\\\\\`. Using the argument fixed=TRUE can simplify the search of this patterns.\n\n```{r}\npain <- c(\"c:\\\\temp\", \"/bin/u\", \"$5\", \"\\n\", \"2 backs: \\\\\\\\\")\ngrep (\"$\", pain)\ngrep (\"\\\\$\", pain, value=TRUE)\ngrep (\"\\\\\\\\\", pain, value=TRUE)\ngrep (\"\\\\\", pain, value=TRUE, fixed=TRUE)\n# Looking for any slashes:\ngrep (\"\\\\|/\", pain, value=TRUE, fixed=FALSE)\n```\n\n#### Ranges\n\nWorking with ranges like `[0-9]` meaning any number between 0 and 9 we also can negate a character, for example `[^0123]` means any character other than 0, 1, 2, 3, 4.\n\nThe predefined character classes set include `[:lower:], [:upper:]` for lower- and upper-case; `[:alpha:]` for any letters; `[:alnum:]` for alphanumeric; `[:digit:]` for digits; `[:punct:]` for punctuation. There are more in `help(\"regex\")` pages. Then, `[[:digit:]]` match one digit and `[^[:digit:]]` match any character that is not a digit.\n\nTo finish, a word boundary is to search a word or string with a specific composition and can be identified by `\\b` or `\\< ... \\>`. For example using `\"\\\\<\\\\d{4}\\\\>\"` we are specifying a word that must include exactly four digits.\n\n### `regexpr()`\n\nThe function `regexpr()` is more precise than `grep()`, it will return the location of the first match within the string (number of the first character of the match). This information can be useful to extract the number itself and not only identify the string.\n\n```r\ndt\n# looking for a word with an integer:\n(regout <- regexpr( \"\\\\<\\\\d+\\\\>\", dt ) )\nattr(,\"match.legth\")\n```\n\nThe first '13' returned by `regexpr()` vector indicate that the 13th character is a number referencing the 16. The number -1 indicate that string no contains an integer as a word.\n\nThe attributes returned also give us information. `\"match.length\"` is the length of the match. Then, we could extract the `\"match.length\"` vector and use it with `substring()` to extract the number in the strings. Other method is with `regmatches()` given the character vector and the output of `regexpr()`:\n\n```r\nregmatches (dt, regout)\n```\n\nTo extract all integers in the character vector we will use `gregexpr()` but the return is a list because some strings can contain more than one integer word. With `regmatches()` we can extract the numbers anyway.\n\n```r\ngout <- gregexpr (\"\\\\<\\\\d+\\\\>\", dt)\nregmatches (dt, gout)\n\n# Creating a matrix with the return of regmatches\nmatrix (as.numeric (unlist (regmatches (dt, gout) ) ), ncol=2, byrow=T )\n```\n\nBu default the matching look for the match that are as long as possible. If in the pattern we add a '?' it will stop that. for example with `\\\\d.*?\\\\d` will produce \"4 Apr 3\" although there are more numbers (\"4 Apr 3021\").\n\n### Replacement with Regular Expressions\n\n-   `sub()` : replaces the first matching pattern.\n\n-   `gsub()` : replaces all the matching patterns.\n\nThe first argument for both a the pattern to search, the second is the characters to replace for, and the third argument is the character vector where to look for. Other option is to use backreferences, if the patters is composed by two patterns between parentheses we can use \\\\1 \\\\2 in the second argument to refer the matches:\n\n```{r}\nbros <- c(\"Isaac Asimov\", \"Leon Tolstoi\", \"Virginia Wolf\", \"Brandon Sanderson\")\n\n# Changing the name order with backreferences:\nsub (\"([[:alpha:]]+) ([[:alpha:]]+)\", \"\\\\2, \\\\1\", bros)\n```\n\n### Splitting with Regular Expressions\n\n-   `strsplit()` : given a vector and a pattern splits the text producing a list with one entry for each string. Also has the fixed=TRUE argument to not use regular expressions.\n\n```{r}\nkeys <- c(\"CA-2017-04-02-66J-44\", \n          \"MI-2017-07-17-41H-72\", \n          \"CA-2017-08-24-Missing-378\")\n\n(key.list <- strsplit (keys, \"-\") )\n\nmatrix ( unlist (key.list), ncol = 6, byrow = TRUE )\n```\n\n### Common Data Cleaning Task Using Regular Expressions\n\n#### Removing Leading and Trailing Spaces\n\n-   `\"^ *\"` : any string with leading spaces\n-   `\" *$\"` : any string with trailing spaces\n\n```{r}\ngsub ( \"^ *| *$\", \"\", c(\"  Text Spaces \", \"Trailing    \", \n                        \"None\", \"     Leading\" ) )\n```\n\n#### Format Currency to Numeric\n\nTaking into account $12,345.67 or 12,345.67€ we have to remove the symbol and the comma before converting into numeric.\n\n-   `\"\\\\$\"` : dollar symbol\n-   `\"\\\\€\"` : euro symbol\n-   `\"^[^0-9.]\"` : non-numeric leading character\n-   `\"[^[:digit:].]$\"` : non-numeric trailing character\n\n```{r}\nas.numeric ( gsub (\"(^[^0-9.]|,)|(,|[^[:digit:].]$)\",\n                   \"\", c(\"$12,345.67\", \"98,765.43€\") ) )\n```\n\n#### Removing HTML Tags\n\nWe are looking for <b>Bold</b> and other tags like that.\n\n-   `\"<.*?>\"` : Everything between < >\n\n```{r}\nhtml <- c('\n    <!DOCTYPE html>\n<html lang=\"es\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Ejemplo de HTML</title>\n</head>\n<body>\n    <h1>Bienvenido a mi página web</h1>\n    <p>Este es un <strong>ejemplo</strong> de un párrafo con <em>texto en cursiva</em> y <strong>texto en negrita</strong>.</p>\n    <ul>\n        <li>Elemento de lista 1</li>\n        <li>Elemento de lista 2</li>\n        <li>Elemento de lista 3</li>\n    </ul>\n    <a href=\"https://www.ejemplo.com\">Visita nuestro sitio web</a>\n</body>\n</html>\n')\n\nno.html <- gsub ( \"<.*?>\", \"\", html)\ngsub (\"\\\\n\", \"\", no.html)\n```\n\n```{r}\ncat(no.html)\n```\n\n#### Linux Paths to Windows or R Paths\n\n```{r}\n# Linux to Windows\ngsub (\"/\", \"\\\\\\\\\", \"/usr/local/bin\")\n\n# Windows to Linux\ngsub(\"\\\\\\\\\", \"/\", \"\\\\usr\\\\local\\\\bin\")\ngsub(\"\\\\\", \"/\", \"\\\\usr\\\\local\\\\bin\", fixed = TRUE)\n```\n\n### Recomendations\n\nBecause Regular Expressions are complicated be sure to document them well. For debugging there are online aids to diagnosing problems, be sure to specify regular expression type POSIX with GNI extensions or PCRE.\n\n## UTF-8 and Other Non-ASCII Characters\n\nLeading with symbols or letters with accent in Latin alphabet, each have their ASCII hexadecimal value, then we can use that after `\"\\x\"` to use it as a pattern in `grep()`, `gsub()` or other similar function. For example, to look for `Ê` we can introduce `\\xca` as `ca` represent the hexadecimal value for `Ê`. Also, Windows and Mac use different ASCII table with different some different values.\n\nUnicode symbols are intend to describe all the symbols in in all the world, and are shown in R by preceding them with `\\U` . The word China in simplified Chinese are represented `\"\\U4E2D\"` and `\"\\U56FD\"` . The most popular is UTF-8 encoding which a character in Unicode is represented by one or more bytes. The display of UTF-8 characters can be inconsistent between machines.\n\nR assigns an encoding to every element in a character vector and different elements in a vector may have different encodings. \n\n-   `Encoding()` : returns the encoding of the strings in a vector\n-   `iconv()` : to convert the encodings.\n\nIn R ASCII strings are unencoded; latin1 characters are encoded as latin1; non-latin unicode are encoded as UTF-8.\n\n```{r}\nyogi.utf <- \"It's d\\Ue9j\\Ue0 vu all over again.\"\nEncoding (yogi.utf)\nc( regexpr (\"\\\\xe0\", yogi.utf), regexpr (\"\\ue0\", yogi.utf), regexpr (\"à\", yogi.utf) )\n```\n\n```{r}\ndata.frame (a = \"\\U4e2d\\U56fd\", stringsAsFactors = FALSE)\n```\n\n## Factors\n\nA Factor vector looks like text but behaves like an integer. It can be created with `as.factor()` function which often is a final step; also are created when you add character vector into a data frame with `data.frame()` or `cbind()` functions.\n\nIt is recommended to turn the character vectors into factor only when all the data cleaning is finished, before modeling. \n\nA Factor vector the `class()` is `factor`, the `mode()` is `numeric` and the `typeof()` is `integer`. R will set the levels alphabetically.\n\n-   When you change a value of a factor vector, if that new value not corresponds to a level, will be NA.\n-   When you remove the elements with a specific value from the factor vector, that value is still one of the levels.\n\n```{r}\ncols.fac <- as.factor( c(\"red\", \"green\", \"blue\", \"red\", \"red\", \"red\", \"blue\") )\ncols.fac\ntable(cols.fac[cols.fac != \"red\"])\n```\n\n-   `levels()` : to check the levels in a factor vector and also to assign levels. This not change the underlying integer value corresponding that level.\n\n```{r}\nlevels(cols.fac)\nlevels(cols.fac)[2] <- \"yellow\"\nlevels(cols.fac)\n```\n\nThe levels can be reordered calling `factor()` function, this is useful for months and other levels that we want to have a custom order.\n\n```{r}\nfactor (cols.fac, levels = c(\"red\", \"blue\", \"yellow\") )\n```\n\n**Do not try** to change the order with `levels()` function. In this case will change the levels of the elements itself, will not change 'only' the order.\n\nTo convert a factor vector into character, can be used `as.character()` function, but a more efficient way is to use `levels(fac)[fac]`. Also, to convert the factor vector with levels which look like integers into number, **do not** use `as.numeric()`, first has to be converted into character. Now, if we have a gender column with F and M as levels of the factor vector, we want to convert this vector into numeric, 0 for F and 1 for M. The function `as.numeric()` will convert F to 1 and M to 2, to solve this we can use: `as.numeric(factor(gender))-1` . \n\nFinally, to combine two factor vectors, it is recommended to convert them first into characters, and then combine it. Later, if it's necessary, convert them again into factors. A exception can arise combining with `rbind()`, but other than this case, combining factor vector will usually end badly.\n\n```{r}\nind <- factor ( c(33, 4, 66, 3, 6, 77) )\nsrc <- 101:199\n# as.numeric will convert the vector elements into its assigned integers, not the levels.\nas.numeric(ind)\n```\n\n```{r}\n# Correct way, looking for that indices into 'src' vector:\nsrc[as.numeric (as.character (ind) )]\n# This will extract correctly the numbers\n```\n\n```{r}\ngender <- as.factor(c(\"F\", \"F\", \"M\", \"F\", \"M\", \"F\", \"M\") )\ngender\nas.numeric(gender) - 1\n```\n\n### Missing Values\n\nMissing values in factors are represented by `<NA>`. Actually, it is possible to have a level <NA> with NA values, but it is better no avoid that, as well is clever to avoid \"NA\" string value. The `levels()` function does not mention to `NA` values because they do not have level. \n\nWe can use the function `addNA()` to add a level which is a NA value, but will be better to replace NA values:\n\n```{r}\nmis.fac <- as.factor(c(\"F\", NA, \"M\", \"F\", NA, \"F\", \"M\") )\nmis.fac\nmis.fac <- as.character(mis.fac)\nmis.fac[is.na (mis.fac)] <- \"missing\"\n( mis.fac <- as.factor(mis.fac) )\n```\n\n## R Objects and Commands\n\n-   `get()` : accepts a character string and returns the object with that name.\n-   `exists()` : can test to see whether an object exists\n-   `get0()` : allow a value to be specified in place of the error.\n-   `ls()` : returns the names of the objects.\n-   `assing()` : given a name and a value creates a new R object. The argument `pos=1` at the command line has no effect, but inside a function it creates a variable in the Workspace.\n\n```{r}\nfor (i in 1:24)\n    assign (paste0 (LETTERS[i], c(month.abb,month.abb)[i] ), i, pos = 1 )\n\nlet.mon <- ls (pattern = \"^[A-Z]{2}?[a-z]{2}?\")\nlet.mon[3:6]\nsapply (let.mon, function(i) object.size(get(i)))\nremove (list = grep (\"^[A-Z]{2}?[a-z]{2}?\", ls(), value = T ) )\n```\n\n-   `parse()` : to create an R 'expression' object with `text` argument.\n-   `eval()` : executes the expression\n\n`eval(parse(text = \"log.11 <- log(11)\"))` : will create a variable called 'log.11'. The combination of `parse()` and `eval()` lets us construct R commands and execute them (allowing us to execute sequences of commands once we have created them with `paste()` and other tools).\n\n\n\n","srcMarkdownNoYaml":"\n\n# The very basics\n\n## Getting Help\n\nAt the command line we can look for help through the commands:\n\n-   `help()`: gets information on a particular R function, e.g. `help(matrix)`\n\n-   `?`: works the same as the previous one, e.g. `?\"matrix\"`\n\n-   `help.search()`: It's useful if we know the subject rather than the name.\n\n-   `apropos()`: returns a vector of names of objects containing that string, e.g. `apropos(\"matrix\")` returns every object with 'matrix' in its name.\n\n-   `args()`: displays the set of arguments expected by a given function.\n\n```{r}\nargs(matrix)\n```\n\n# R Data: Vectors\n\nA vector is the basic unit of computation in R. The atomic class which we can see with `help(vector)` are:\n\n-   logical: TRUE or FALSE (T or F as synonyms)\n-   integer\n-   numeric or double\n-   character: is the text\n-   raw: can hold binary data\n-   complex\n\nTo combines items into a vector we use `c()` function. Cal also be used to combine vector, as long as all the vectors are of the same sort.\n\n```{r}\nc(2, 25)\n```\n\n```{r}\n# R has formatted the numbers in a consistent way\nc(-2, pi, 25)\n```\n\n```{r}\nc(c(2, 3), c(pi, 16.7, 5), c(-12, -16))\n```\n\nTo set consecutive integers:\n\n```{r}\n1:7\n```\n\n```{r}\n# Sequence in reverse\n9:-2\n```\n\n```{r}\n# It's 3 plus the sequence\n3 + 2:5\n```\n\nUsing `help(Syntax)` It can be seen a list of operators and their precedences, and precedence can always be over-ridden with parentheses.\n\nAlso with `seq()` we can create sequences, with better control of starting points, ending points, lengths, and step sizes. With help we can see:\n\n``` r\nseq(...)\n\n## Default S3 method:\nseq(from = 1, to = 1, by = ((to - from)/(length.out - 1)),\n    length.out = NULL, along.with = NULL, ...)\n\n# Examples:\nseq(17)\nseq(0, 1, length.out = 11)\nseq(1, 9, by = 2)\n```\n\nLogical vectors ofen are constructed by R in response to an operation:\n\n```{r}\n35:41 >= 37\n```\n\nTo calculate the number or proportions of elements in a vector we use `sum()` for count and `mean()` for proportions:\n\n```{r}\n# like we saw, five out of seven elements in this vector are greater or equal to 37\nsum(35:41 >= 37)\n```\n\n```{r}\n# 5 out of 7 are aprox. 71.4%\nmean(35:41 >= 37)\n```\n\n## Vector Operations\n\nArithmetic operations on vectors produce vectors.\n\n```{r}\n5:10\n```\n\n```{r}\n(5:10)^2\n```\n\nThere are functions which returns a single number (that is also a vector), such as: `length(), sum(), mean(), sd(), min(), max()`. The function `range()` returns the smallest and largest values, and `summary()` returns a vector of summary statistics.\n\n```{r}\n# An assigment with parentheses case print this assigment\n(th1 <- c(20, 15, 10, 5, 0)^2)\n```\n\n```{r}\nth2 <- 105:101\nth2 + th1\n```\n\n```{r}\nth2 / th1\n```\n\nIt's Computed element by element, that's why print 'Inf', because 101/0 refer to an infinite value.\n\n```{r}\n# Print the larger value anywhere\nmax(th1, th2)\n```\n\n```{r}\n# 'Parallel maximum' print the larger of each pair\npmax(th2, th1)\n```\n\nLoginac vectors can also be combined. The operator `|` for 'or' return TRUE if either element is TRUE; the `&` operator for 'and' return TRUE only if both elements are TRUE. This single version evaluate the condition for every pair of elements from both vectors, the double version ( `|| , &&`) evaluate multiple TRUE/FALSE conditions from left to right, stopping as soon as possible (are useful in `if()` statements).\n\nRecycling\n\nWhen a vector does not match with other vector to be operated, the shorter one starts again, recycling it's elements.\n\n```{r}\n# Two vector with the same length, 6\n5:10 + c(0, 10, 100, 1000, 10000, 100000)\n# The sum is element by element\n```\n\n```{r}\n# Two vectors, 6 and 3 elements\n5:10 + c(1, 10, 100)\n```\n\n```{r}\n# 6-vector and 5 vector. The second recycle it's first element (10 + 3)\n5:10 + c(3, 4, 5, 6, 7)\n\n```\n\nRecycling a vector of length 1 (`(5:10) + 4`) is very common, but the other lengths ir rarer. If we see the last warning, It's better to treat that as an error and try to resolve it.\n\n## Handling character vectors\n\nWe can add names to a vector to identify individual entries. R accept letters, numbers, dots, and underscores:\n\n```{r}\nvec <- c(201, 202, 203)\nnames(vec)\n```\n\n```{r}\n# It is a bad practice to have a vector's name invalid:\nnames(vec) <- c(\"a\", \"b\", \"with space\")\nnames(vec)\n```\n\n```{r}\n# Also, we can assign names directly\nvec <- c(a = 201, b = 202, with.space = 203)\nvec\n```\n\n## Data Types\n\nThe most common data types are numeric, logical and character. These are some less-common data types:\n\n-   integers: values between -(2^31^ -1) and 2^31^ -1. Values outside this range may be displayed as integers but will be stored as doubles. To regard an item as an integer you can add `L` on its end ( `246L` ), this only makes sense whether really is an integer.\n-   raw: refers to data kept in binary (hexadecimal) form. Is data from images, sound and video, R will stored as raw. It can be converted into character data with `rawToChar()` function. Reading raw data could be useful to handle the case of unexpected characters.\n-   complex number: R can manipulate complex numbers but almost never arise in data cleaning.\n\nWe can see what data type is a vector with `typeof()` which differentiates between integer and double. Other function called `mode()` calls them both numeric. The `str()` function return the data type and the first few entries. And `class()` is more general operator for complex types.\n\nThe functions: `is.logical(), is.integer(), is.numeric(), is.character()` returns a single logical value whether is TRUE or FALSE. A particularly useful function for more complicated or user-defined clases is `is()` which lets you specify the class as an argument: `is(pi, \"numeric\")`.\n\n```{r}\ntypeof(vec)\n```\n\n```{r}\nmode(vec)\n```\n\n### Data Type conversion\n\nR modifies the entire vector to be of the more complicated type. If you create a numeric vector but you adds a character, the entire vector will be converted to character:\n\n```{r}\nvec <- c(1, 2, 3, 4, 5, 6, \"7\")\nvec\n```\n\nTypes: logical \\< raw \\< numeric \\< complex \\< character.\n\nOther group of functios are `as.` to convert vectors:\n\n-   `as.numeric`: a character will be converted to a numeric if it has the syuntax of a number.\n\n    ```{r}\n    # The element which no fit as numeric will be NA values by coercion\n    as.numeric( c(\"123.4\", \"-1234e-2\", \"4,567\", \"45. 67\", \"$12\", \"45%\"))\n    ```\n\n-   `as.logical`: Numeric values that are zero become FALSE, otherwise become TRUE. Sometimes numbers that you expect to be zero aren't because of floating-point error.\n\n    ```{r}\n    # The third is FALSE because it is outside the range of double precision.\n    # The last element 'should' be zero but aren't because floating-point error.\n    as.logical( c(123, 5-5, -1e-34, 1e-500, 1- 1/49 * 49) )\n    ```\n\nNumeric, non-missing values never produce NA when converted to logical.\n\n## Subsets of Vectors\n\n*subsetting* or *extracting* is to pull out a piece of a vector.\n\n### subscript: numeric\n\n```{r}\n# 5-vector\n(a <- 101:105)\n# extract element number 3\na[3]\n```\n\nWe can use a numeric expression to compute a subscript but only if we are sure that expression is an integer.\n\n```{r}\n# extract the fourth and second element\na[c(4, 2)]\n# extract the element corresponding to 3+2 \na[3+2]\n```\n\nNegative numbers omit this elements, but you cannot mix negative and positive numbers. Zeros are permited but they are ignored by R.\n\n```r\na[-2]\n# Omit the first and second element\na[- (1:2) ]\n# mix of positive and negative, result an error\na[c(-1, 2)]\n```\n\n### Subscript: logical\n\nA logical subscript is a logical vector of the same length as the thing being extracted from. TRUE are returned, FALSE are not.\n\n```{r}\n# numeric vector with ages\nage <- c(21, 32, 43, 54, 65, 76)\nage > 60\n```\n\nWe can use the last logical vector to extract elements of age, or combining it with other vectors.\n\n```{r}\n# Which ages are greater than 60\nage[age > 60]\n\n```\n\n```{r}\npeople <- c(\"Yoshua\", \"Mery\", \"Alex\", \"John\", \"Lee\", \"Cindy\")\n# To which people corresponds their age greater than 60\npeople[age > 60]\n\n# Creating a new variable with the previous subscript\nage.gt.60 <- age > 60\npeople[age.gt.60]\n```\n\nErrors to avoid:\n\n```{r}\n# R convert the logical subscript to numeric\n# the extraction produces the first element of the vector two times\npeople[0 + age.gt.60]\n\n# With the negative sign, R convert again into numeric values\n# The extraction drops the first value and rest are returned\npeople[-age.gt.60]\n\n# This is, probably, the intended form:\n# The operator ! to print which values are not greater than 60\npeople[ !age.gt.60 ]\n```\n\nThe `which()` function can be used to convert a logical vector into a numeric. It returns the indices of the element that are TRUE.\n\nTo find the location of every minimum value in the variable 'y' we can use `which(y == min(y)`. The alternative are `which.min()` and `which.max()` but only select the first index with the minimum or maximum value.\n\n### subscript: names\n\nA name subscript will need to be a character.\n\n```{r}\n(vec <- c(a = 201, b = 202, with.space = 203) )\n\nvec[\"b\"]\n\n# Names of 'vec' distinct to 'a'\nvec[names(vec) != \"a\"]\n```\n\n### Vector length 0\n\nThis usually happens when all of the elements of a logical subscript are FALSE.\n\n```{r}\na\nb <- a[a < 99]\nb\n```\n\nIf a zero-length vector is used as the condition in an `if()` statement, an error results:\n\n```r\n# the sum of a numeric or logical vector of length 0 is itself zero\nsum( b + 12345)\n\nif (b < 2) cat(\"yes\\n\")\n```\n\n### Replacing elements of a vector\n\nIf we extract elements, we can use the extraction operation on the left side of an assigment for replacing.\n\n```{r}\na\na[3] <- 203\na\na[a > 104] <- -999\na\n```\n\n```{r}\n# Replacing using names\nnames(vec) <- c(\"a\", \"b\", \"c\")\nvec\n\ncat(\"\\n\")\n\nvec[\"b\"] <- 302\nvec\n```\n\nIt is possible too combine two vectors (if the vectors are different types, R convert them) and also assign elements of a vector out past its end.\n\n```{r}\n(a <- 101:103)\n(b <- -5:-1)\ncat(\"\\n\")\n\na[4:8] <- b\na\ncat(\"\\n\")\n\n# b[6] does not exists, will be filled with NA to add b[7]\nb[7] <- 3\nb\n```\n\n## Missing Data NA\n\nWhen we try to extract an item that was never present in a vector appears missing values. NA values rule: any computation with an NA itself becomes an NA. With mathematical computations we can use `na.rm = TRUE` argument to compute the result after omitting missing values.\n\nWe can use `anyNA()` function to determine whether any of the values are missing (TRUE or FALSE). Also, `is.na()` fuction return TRUE or FALSE for every element in the vector. We can use `where(is.na(vector))`to find the numeric indices of the missing elements.\n\n```{r}\n# Creating a vector with missing values\nnax <- 101:106\nnax[ c(3, 5) ] <- NA\nnax\ncat(\"\\n\")\n\nis.na(nax)\ncat(\"\\n\")\n\nwhich(is.na(nax) )\n\ncat(\"\\nMean 'nax' vector: \")\nmean(nax)\nmean(nax, na.rm=TRUE)\n\n```\n\nWe can remove missing values with `vec[!is.na(vec)]` which return non-missing entries, but `na.omit()` function deletes the missing values but also keeps track of where in the vector they used to be. This information is stored in vector's 'attributes':\n\n```{r}\n# To return non-missing values:\nnax[!is.na(nax)]\ncat(\"\\n\")\n\n# Storing non missing values in a variable and keeping track of deleted ones\n(nay <- na.omit(nax))\nattr(nay, \"na.action\")\nattr(nay, \"class\")\n```\n\nWe can have a vector 'b' with data and a vector 'a' as index which contain NA values. If we use 'a' as filter, it returns every coincident value and missing value, this behaviour can be changed with `b[!is.na(a) & a == 2]`\n\n```{r}\n(b <- 101:104)\n(a <- c(1, 2, NA, 4))\ncat(\"\\n\")\n\nb[a == 2]\ncat(\"\\n\")\n\nb[!is.na(a) & a == 2]\n\n```\n\n-   `NaN` : Special value, means \"Not a Number\". It si the result of specific computations such as 0/0. NaN is considered a missing value.\n-   `Inf` : Appears when a positive number is accidentally divided by zero. Inf values are not missing.\n\nInf + NA = NA\\\nNaN + NA = NaN\n\nWe generally wanto to identify any of these values: the function `is.finite()` produces TRUE for numbers that are neither NA nor NaN nor Inf. It serves as a check on valid values. The command `all(is.finite(vector) )` is to see a numeric vector elements which are not special values.\n\n-   `NULL` : is an object with zero length, no contents, no class. It often arise trying to access an element which does not exist. The function `is.null()` is for testing NULL values. If you index using a NULL value the result will be a vector of length 0.\n\n## The `Table( )` function\n\n`Table()` produce a table returning for each unique value the number of times that value appears.\n\n```{r}\nvec <- rep ( c(\"red\", \"blue\", NA, \"green\"), c(4, 2, 1, 3) )\nvec\ncat(\"\\n\")\n\ntable(vec)\n```\n\n`table()` arguments:\n\n-   `useNA =`\n\n    -   `\"no\"` : default option. Exclude NA values.\n    -   `\"ifany\"` : show an entry for NA if there are any.\n    -   `\"always\"` : show an entry for NA whether there are any NA values or not.\n\n-   `exclude =`\n\n    -   `c(NA, NaN)` : default option.\n\n    -   We can add a value of the vector to exclude, also we can pass `NULL`.\n\n```{r}\ntable(vec, useNA = \"always\")\ncat(\"\\n\")\n\ntable(vec, exclude=\"green\")\n```\n\nAlso, we can pass to `table()` function two vectors to create a two-way table (cross-tabulation). in R a two-way table is treated the same as a matrix.\n\n```{r}\nvec2 <- rep ( c(\"north\", \"south\", \"east\", \"west\"), c(2, 3, 2, 3) )\ntable(vec,vec2, useNA=\"ifany\")\n```\n\nA three and higher-way tables are produced when you pass three or more equal-length vectors.\n\nFor very large vectors, the `data.table()` function in the `data.table` package may prove more efficient than `table()`.\n\nThe `xtabs()` function is useful for creating more complex tables.\n\n### Operating on tables\n\n-   `prop.table()` : passing a variable with table assigned produces the proportions of the total counts in the table by cell (or row, or column). The second argument references 1 to rows, or 2 to columns.\n\n```{r}\nyear <- rep (2015:2017, each=5)\nmarket <- c(\"a\", \"a\", \"b\", \"a\", \"b\", \"b\", \"b\", \"a\", \"b\", \n            \"b\", \"a\", \"b\", \"a\", \"b\", \"a\")\ncost <- c(64, 87, 71, 79, 79, 91, 86, 92, NA,\n          55, 37, 41, 60, 66, 82)\n\n# assign a table with the vectors we want to 'tab'\ntab <- table(market, year)\ntab\ncat(\"\\n\")\n\n# proportions along rows\nprop.table(tab)\ncat(\"\\n\")\n\n# proportions throwout columns\nprop.table(tab, 2)\n\n```\n\n-   `margin.table()` : produce the marginals totals from a table.\n\n-   `addmargins()` : to a given table incorporates those totals producing a new row and column by default. Passing as second argument 1 or 2, you can specified if only wants rows or columns.\n\n```{r}\ncat(\"margin.table function for columns:\\n\")\nmargin.table(tab, 2)\n\ncat(\"\\naddmargins function in the table: \\n\")\naddmargins(tab)\n```\n\n-   `tapply()` : the arguments are, first the vector where perform the computation, second the vector with the index to group, and then the function to apply. To group with more than one vector (index) we can use a `list()`.\n\n```{r}\ncat(\"There are NA in cost? \")\nanyNA(cost)\ncat(\"\\n\")\n\ntapply (cost, year, min, na.rm=TRUE)\ncat(\"\\n\")\n\ntapply (cost, list(market, year), mean, na.rm = TRUE)\n```\n\nIt is posible to use with tapply() custom fuctions, as an example, for (x) return the sum of the squares of each entry of x:\n\n```{r}\ntapply (cost, list(market, year),\n        function (x) sum (x^2, na.rm = TRUE))\n```\n\n## Other Actions on Vectors\n\n### Rounding\n\n-   `round()` : to round a number with specific amount of decimals. Passing a negative number as second argument will round the nearest power of 10.\n\n-   `signif()` : retain a specific number of digits.\n\n-   `trunc()` : discards the decimal part returning an integer.\n\n-   `floor()` ; `ceiling()` : round to the next lower or higher integer respectively.\n\n```{r}\n(dec <- 123.4567)\n\ncat(\"\\nRound function to 3 decimals: \\n\")\nround(dec, 3)\n\ncat(\"\\nRound function (-1) to nearest power of 10: \\n\")\nround(dec, -1)\n\ncat(\"\\nSignif function to 4 numbers: \\n\")\nsignif(dec, 4)\n\ncat(\"\\nTrunc function: \\n\")\ntrunc(dec)\n\ncat(\"\\nFloor function to round to the lower integer: \\n\")\nfloor(dec)\n\ncat(\"\\nRound function to round to the higher integer: \\n\")\nceiling(dec)\n```\n\n### Sorting and Ordering\n\n-   `sort()` : sorting from smallest to largest. It will drop NA and NaN values by default.\n\n    -   `decreasing=TRUE` will reverse the order.\n    -   `na.last` will add NA values, TRUE at the end and FALSE at the beginning.\n\n-   `order()` : returns the indices which can be used to sort a vector.\n\n    -   `na.last` as TRUE by default. TRUE at the end and FALSE at the beginning.\n\n```{r}\npeople\n(scores <- c(123, 456, 789, 456, 654, 987))\n\ncat(\"\\nSorting 'people' by their scores (descending): \\n\")\npeople[order(scores, decreasing=TRUE)]\n\ncat(\"\\nOrdering people by their scores, and in case \n    of a tie using their names alphabetically.: \\n\")\npeople[order(scores, people[1:6])]\n```\n\n### Vector as Sets\n\nTo find values that overlap between two vectors we can use `%in%` function. For example, we can use a command `a %in% b` which will return a vector the same length as 'a' with a logical indicator whether each element is found in 'b'. Witch `table(a %in% b)` we get the number of element in 'a' that were not found in 'b'.\n\n```{r}\n# Looking for which letter is in 'letters':\nc(\"g\", \"5\", \"b\", \"J\", \"!\") %in% letters\ncat(\"\\n\")\n\ntable (c(\"g\", \"5\", \"b\", \"J\", \"!\") %in% letters)\ncat(\"\\n\")\n\nwhich(c(\"g\", \"5\", \"b\", \"J\", \"!\") %in% letters)\n```\n\n-   `union()` : returns the elements in either passed vectors\n-   `intersect()` : returns the elements which are in both passed vectors\n-   `setdiff()` : returns the elements of 'a' not present in 'b'\n\n```{r}\ncat(\"Union 'a' and 'b':\\n\")\nunion (c(\"g\", \"5\", \"b\", \"J\", \"!\"), letters)\ncat(\"\\n\")\n\ncat(\"Intersect 'a' with 'b':\\n\")\nintersect (c(\"g\", \"5\", \"b\", \"J\", \"!\"), letters) \ncat(\"\\n\")\n\ncat(\"Defferent elemenets of 'a' in 'b':\\n\")\nsetdiff (c(\"g\", \"5\", \"b\", \"J\", \"!\"), letters) \n```\n\n## Duplicates\n\n-   `anyDuplicated()` : returns the duplicated values in a vector\n\n-   `unique()` : returns the distinct values, including NA and NaN.\n\n-   `duplicated(`) : returns a logical vector with TRUE per duplicated value (not the first value).\n\n    -   `fromLast=TRUE` reads from the end to the beginning. Using union() you can combine `fromLast=TRUE` and `fromLast=FALSE` to identify all duplicates.\n\n```{r}\nlet <- c(letters, c(\"j\", \"j\", \"x\"))\n\ncat(\"Duplicates?\\n\")\nlet[duplicated(let)]\n\ncat(\"\\n\")\n(tab <- table (let))\n\ncat(\"\\n\")\ntab[which (tab != 1)]\n\ncat(\"\\n\")\nnames (tab)[tab != 1]\n\ncat(\"\\n\")\ntable (table (let))\n```\n\nMatching is identify where in a vector we can find the values in another vector. The function `match()` is a more powerful version of `%in%`.\n\n-   `match()` : given two vectors returns where the element from 'a' is in 'b'. By default returns NA for no matches, we can change this with `nomatch=0` argument.\n\n```{r}\nnames1 <- c(\"Jensen\", \"Chang\", \"Johnson\", \"Lopez\", \"McNamara\", \"Reese\")\nnames2 <- c(\"Lopez\", \"Ruth\", \"Nakagawa\", \"Jensen\", \"Mays\")\n\nmatch(names1, names2)\n\ncat(\"\\n\")\nnames2[match(names1, names2, nomatch=0)]\n```\n\nThe 'Run length enconding' function is rle() which returns the number of repetitions and length.\n\n```{r}\nrle( c(\"a\", \"b\", \"b\", \"a\", \"c\", \"c\", \"c\", \"a\", \"a\"))\n```\n\nThe previous output show, with length 1 value 'a' followerd by 'b' with length 2, again 'a' length 1 and then 'c' with length 3, to finish with 'a' twice.\n\n## Summary\n\n### Conversions\n\n-   Converting character to numeric produces NA for things that aren’t numbers, like the character strings \"TRUE\" or \"\\$199.99\".\n-   Converting character to logical produces NA for any string that isn’t \"TRUE\", \"True\", \"true\", \"T\", \"FALSE\", \"False\", \"false\" or \"F\".\n-   Converting numeric to logical produces FALSE for a zero and TRUE for any non-zero entry (and watch out for floating-point error here).\n\n### Subscripts\n\n-   A logical subscript returns the values that match up with its TRUE entries.\n-   A numeric subscript returns the values specified in the subscript.\n-   character subscript will extract, from a named vector, elements whose names are present in the subscript.\n\n# R Data: Other Structures\n\n## Matrices\n\nEssentially is a vector two-dimensional like a rectangle. Every element of a matrix needs to be of the same type (numeric, logical or character).\n\nA matrix is filled column by column.\n\nUsing `length()` we get the total number of elements in the matrix, and using `dim()` we get the dimension as number of rows and columns.\n\n-   `cbind()` : combines a set of vectors into a matrix column by column.\n\n-   `rbind()` : combines a set of vectors into a matrix row by row.\n\nIf the vectors to combine have unequal length, R will recycle.\n\nWith matrix in the same way as vectors we can do arithmetic operations, that will be element by element. Also, `t(A)` transposes a matrix, and `solve()` inverts a matrix.\n\nTo extract and assign new values to elements the process is similar to a vector but now we have to pass two coordinates:\n\n```{r}\na <- matrix(101:115, nrow=5, ncol=3)\na\ncat(\"\\n\")\n\na[1,2]\n\ncat(\"\\n\")\na[-2,]\n\ncat(\"\\nObtaining row 4 and 2, and cols 3 and 1, in that order: \\n\")\na[c(4,2), c(3,1)]\n```\n\nTo create a vector from a matrix we can use `c()`, it will use the first column, then the second and so on. To extract data row by row, we can use `t()` to transpose the matrix first like `c(t(a))`.\n\n```{r}\nc(a)\ncat(\"\\n\")\n\nt(a)\n\ncat(\"\\n\")\nc(t(a))\n```\n\nIf we ask to a matrix for one column we'll get a vector, because dimensions of length 1 are usually dropped by default. We can use drop=FALSE argument to prevent that.\n\n```{r}\na[,2]\n\ncat(\"\\n\")\na[,2, drop=FALSE]\n```\n\n### Row and Column Names\n\nWith `dimnames()` we get rows and columns names. `rownames()` and `colnames()` to get rows and columns names respectively. As well as with `names()` and vectors, we can asign names to columns and rows with these functions.\n\n```{r}\nyear <- rep (2015:2017, each = 5)\nmarket <- c(2, 2, 3, 2, 3, 3, 3, 2, 3, 3, 2, 3, 2, 3, 2)\n\n(tbl <- table (market, year))\n\ncat(\"\\nCollaing to colnames(): \\n\")\ncolnames(tbl)\n\ncat(\"\\nAssigning new names to columns: \\n\")\ncolnames(tbl) <- c(\"Y15\", \"Y16\", \"Y17\")\ntbl\n```\n\nJust like before, we can call for the column name or row identifier to get them:\n\n```{r}\ntbl[,\"Y15\"]\n\ncat(\"\\n\")\ntbl[\"3\",]\n```\n\n### Applying Functions\n\nBuilt in functions which works across columns or rows: `colSums(), rowSums(), colMeans(), rowMeans()`.\n\n-   `apply()` : Useful to apply a custom function.\n\n    -   first argument, the matrix to which apply the function.\n\n    -   The direction, 1 for across rows, 2 for down columns.\n\n    -   The function to be applied.\n\n```{r}\na\n\ncat(\"\\n\")\nrowSums(a)\n\ncat(\"\\n\")\napply(a, 1, sum, na.rm=TRUE)\n\ncat(\"\\n\")\napply(a, 1, function (x) sum (x))\n```\n\nWe can guet a matrix result for the `apply()` function. If we compute across rows, sometimes will change the shape, we can use `t()` to prevent that.\n\n```{r}\napply(a, 2, range)\n\ncat(\"\\n\")\nt( apply(a, 1, range) )\n```\n\nWhen we are looking for specific values we can get vectors with different lengths, in that case R returns a list.\n\n```{r}\ncat(\"Getting elements location where the value is greater than 109:\\n\")\napply(a, 2, function (x) which (x > 109))\n```\n\n### Missing Values\n\nThe function apply() is very useful to count the number of missing values. Next, let's create a matrix using a semicolon to pass multiple commands in one line, also the multiple assigment operation to assign several things at once:\n\n```{r}\na <- matrix(101:115, 5, 3); a[5, 3] <- a[3, 1] <- NA\na\n\ncat(\"\\nSum of NA in each column: \\n\")\napply(a, 2, function (x) sum (is.na(x)))\n```\n\nTracking NA values with `which()` to identify the position on the vector will return a number of the position for each NA. However, using `arr.ind=TRUE` argument we'll obtain the coordinates:\n\n```{r}\nwhich(is.na(a))\n\ncat(\"\\n\")\nwhich(is.na(a), arr.ind=TRUE)\n```\n\n### Matrix Subscripts\n\nWith `which()` as a subscript we have the possibility to extract specific elements.\n\n```{r}\nb <- matrix (1:20, nrow=4, byrow=T)\nb <- cbind(b, c(3, 2, 0, 5))\ncolnames(b) <- c(\"P1\", \"P2\", \"P3\", \"P4\", \"P5\", \"Use\")\nrownames(b) <- c(\"Spring\", \"Summer\", \"Fall\", \"Winter\")\nb\n```\n\nGiven the previous matrix, the Use column specify which element of the row we want get. To generate this coordinates, we are going to generate a matrix, the first column will be the number of rows and the second column 'Use'. Then we can pass that matrix as a subscript to 'b' and extract the elements.\n\n```{r}\n(filt <- cbind(1:nrow(b), b[, \"Use\"]) )\n\ncat(\"\\n\")\nb[filt]\n\n```\n\n### Higher-way Arrays\n\nA matrix with three or more ways is called Array in R. We can encounter this while constructing a higher way `table()`:\n\n```{r}\nwho <- rep( c(\"Mery\", \"Kelly\"), c(2, 6))\nwhen <- rep( c(\"AM\", \"PM\"), 4)\nworked <- c(T, T, F, T, F, T, F, T)\nsch <- table(who, when, worked)\nsch\n```\n\nThe function `aperm()` is like `t()` but for higher-way arrays. Also we can use `c()` to produce a vector, and `apply()` or `prop.table()` works too.\n\n## Lists\n\nA list can have vector or diferent types and sizes, also might include matrices, lists or other R objects. Usually a list is returned by a modeling function in R but we can create a list with `list()`:\n\n```{r}\nali <- list( alpha = 1:4, beta = \"yes\", delta = log, 69)\nali\n```\n\n-   `split()` : divides a vector into pieces according to the value of another vector. Returns a list. Missing values in the second vector passed will be dropped.\n\n```{r}\nage <- c(31, 33, 42, 54, 65, 74, 24)\ngender <- c(\"F\", \"M\", \"F\", \"M\", \"M\", \"F\", \"F\")\n\ncat(\"Split age by gender:\\n\")\nsplit(age, gender)\n\ncat(\"\\nSplit ages when age is greater than 60\\n\")\nsplit(age, age > 60)\n```\n\nWe can see with `length()` function the number of elements inside a list, and with `lengths()` function the length of each element.\n\n```{r}\nlength( split(age, gender) )\n\ncat(\"\\nLengths: \\n\")\nlengths( split(age, gender) )\n```\n\nThe `str()` command gives a description of every element on the list:\n\n```{r}\nstr(ali)\n\ncat(\"\\n\")\nclass(ali)\n```\n\n### Excracting from list\n\nWorking with a list, the rule says *single backets produce a list, while double backets and dollar signs extract contents.*\n\n```{r}\ncat(\"Extracting the content of element 4 as a vector: \\n\")\nali[[4]]\n\ncat(\"\\nExtracting the element 1 as a list: \\n\")\nali[1]\n\ncat(\"\\nExtracting inside alpha the elements 2 and 4: \\n\")\nali$alpha[c(F, T, F, T)] \n\n\n```\n\nThe function `names()` also works with lists returning the names of each element and \"\" if the element no have name. We can assign names with it too.\n\nWhen we extract an element from a list with dollar sign, we do not need to know the complete name, it is enough if it's unambiguous:\n\n```{r}\nali$a\n\ncat(\"\\n\")\nali$de\n```\n\nTo assign new values to an element we need the full name, otherwise will be creating a new ítem.\n\n```{r}\nali$delta <- c(T, F, F, T)\nstr(ali)\n```\n\nTo remove an element from a list we can assign a NULL value:\n\n```{r}\nali$beta <- NULL\nstr(ali)\n```\n\n-   `unlist()` : try to turn the list into a vector:\n\n```{r}\nunlist(ali)\n```\n\nUsing dimnames() function we can see the names from a matrix as list format and also we can asign names:\n\n```{r}\nb\ncat(\"\\n\")\ndimnames(b)\n\ndimnames(b)[[1]][3] <- \"Autumn\"\ncat(\"\\n\")\nb\n\n```\n\nAn important list returned from a function is the list from `options()` which contain elements describing things like number of digits to be displayed, scientific notation, the editor... With `names(options())` we can see the names of the current options.\n\n```{r}\nnames(options())[3:15]\n```\n\n## Data Frames\n\nA data.frame is a list of vector with the same length which can be arrayed in a matrix-like rectangle. Each vector in the list will be the columns. To construct a data frame we use `data.frame()` function.\n\n```{r}\ndf <- data.frame (\n    Who = letters[1:5],\n    Cost = c(3, 2, 11, 4, 0),\n    Paid = c(F, T, F, T, T),\n    stringsAsFactors=FALSE\n)\nrow.names(df) <- as.character (row.names(df))\ndf\n```\n\nA data frame must have a column and row names, if they are not assigned R will create them. Also R ensure that column names are valid and not duplicated. For columns we can use `colnames()` or `dimnames()` to assign it, or `names()` with a list. For row names we have `row.names()` or `rownames()` functions.\n\nBy default the `data.frame()` function turns character vectors into factors but rarely we want it in data cleaning. We can chage this with `stringAsFactors=FALSE` argument.\n\n-   `head()` : return the first six rows of a given dataframe. Second argument is n=6 to specify a number of rows. A negative number returns the last n rows.\n\n-   `tail()` : return the last six rows of a given dataframe. Second argument is n=6 to specify a number of rows.\n\n-   `str()` : compact representation of the data frame with data type per column.\n\n-   `dim()` : returns the dimension, number of rows and columns.\n\n-   `summary()` : returns a brief description of each column.\n\n### Missing Values\n\nBecause a data frame can have differnt classes (data types) in its colums, the missing values can be of different classes too. A numeric vector will have numeric NA which is different to logical NA from a logical vector.\n\n-   `is.na()` : returns a logical matrix showing which elements are missing.\n\n-   `anyNA()` : returns TRUE or FALSE to the question There are missing values?\n\n-   `na.omit()` : omit the observations (rows) of the data frame in which one or more elements is missing. Also keeps a track, we can see the deleted observations with `attr(df, \"na.action\") ; attr(df, \"class\")`.\n\nExtract and Assignment\n\nWith data frames we can use both matrix and list styles of subsetting operations. In data frames when we select a row returns a data frame because can store different types of data. Selecting a column will produce a vector.\n\nUsing a doble bracket or a dollar sign will produce a vector. Using the name produce a data frame.\n\n```{r}\ndf[4,]\n\nf <- df$Paid\ndf[f,]\n\ndf[(df[\"Paid\"] == F),]\n\ndf[\"Cost\"]\n```\n\nTo extract a vector from a dataframe's column:\n\n```{r}\ndf[[2]]\n\ncat(\"\\n\")\ndf[[\"Cost\"]]\n\ncat(\"\\n\")\ndf[[\"Co\", exact=FALSE]]\n```\n\nPassing `drop=FALSE` argument we avoid to extract a vector:\n\n```{r}\ndf[, c(\"Who\", \"Paid\")]\n\ndf[, \"Who\"]\n\ndf[, \"Who\", drop=FALSE]\n```\n\nTo delete a column we can asign NULL to that column: `df$Paid <- NULL`\n\nIn a data frame or list if we pass a subscript for unexistance row wil produce one row with NA values. Sometimes happens when we delete a row and a program or ourselfs try to access to that row by name.\n\n## Operating on Lists and Data Frames\n\nIf we try to use `apply()` in a data frame, the function will convert it to a matrix, and the whole matrix is of the same data type. Also, we cannot use `apply()` to a list because does not have dimensions.\n\n-   `lapply()` : returns a list\n-   `sapply()` : runs `lapply()` and tries to make the output into a vector or a matrix. But if the return have different lengths, it will need to return a list. If it try to return items with diferent types, will convert these to a common type, then its better in these case use `lapply()`.\n\n```{r}\nsapply (df, class)\n```\n\n### Spliy, Apply, Combine\n\nFirst the data is split, then a function is applied to each piece, and the results recombined. The function `tapply()` do exactly that, but also we can use `split()` and `sapply()` or `lapply()`.\n\n```{r}\ndf2 <- data.frame (\n    Age = c(35, 24, 42, 63, 56, 66),\n    Spouse = c(31, 36, 40, 59, 60, 60),\n    Gender = c(\"F\", \"F\", \"M\", \"F\", \"M\", \"M\")\n)\nsplit (df2$Age, df2$Gender)\n\ncat(\"\\nUsing sapply() to obtain the mean by gender :\\n\")\nsapply (split (df2$Age, df2$Gender), mean)\n```\n\nAbove, `split()` divides Gender with Age values, then `sapply()` use `mean()` function to each part and returns a vector with the results (is the recombine). Let's see `tapply()` :\n\n```{r}\nround( tapply(df2$Age, df2$Gender, mean), 3 )\n```\n\nWe can use `split()` on a data frame unlike `tapply()`, doing that the data frame will be divided and then we can use `sapply()` or `lapply()` to each part.\n\n```{r}\nsplit (df2, df2$Gender)\n\ncat(\"\\nSummary differencing Gender: \\n\")\nlapply ( split (df2, df2$Gender), summary )\n```\n\n```{r}\ncat(\"\\nLet's see what happens with sapply: \\n\")\nsapply ( split (df2, df2$Gender), summary )\n```\n\nThe previous `sapply()` will try to construct a vector or matrix converting everything to a common type.\n\nA function to produce the same result is `by()` but without letting you save the list. It will performs the `summary()` operation on each column, broken down by gender:\n\n```{r}\nby ( df2, df2$Gender, summary )\n```\n\nSometimes the task split, apply and combine can be performed altogether, but but other times might require separate functions. Packages like `dplyr` for data frames or `plyr` for lists and arrays. Both are intended to be fast and efficient and to permit parallel computation.\n\n### All-Numeric Data Frames\n\nA data frame with all of its values are logical or numeric when is converted to a matrix the numeric type is preserved.\n\nTo convert vectors to another class exists as.numeric() and the other as. functions, also there are as.matrix() and as.data.frame() to convert data frames to matrices and vice versa. It is useful for all-numeric data frames and older functions that require numeric matrices.\n\n### Convenience Functions\n\nIt is recommended to users to use long names for data objects and columns for increases readability. But sometimes leads to use long line expression like:\n\n`CustPayment2016$JanDebt + CustPayment2016$FebPurch - CustPayment2016$FebPmt`\n\nThese can be handled with the functions:\n\n-   `with()` : to perform operations on a data frame. First argument is the data frame, then the expression to be performed. Cannot be assigned to.\\\n    `` with ( CustPayment2016, JanDebt `FebPurch - FebPmt ) ``\n\n-   `within()` : works in the same wey but unlike `with()`, this function can be assigned.\\\n    `CustPayment2016 <- within ( CustPayment2016, FebDebt <- JanDebt + FebPurch - FebPmt )`\n\nFor beginners and to use then interactively and not for programming there are functions to make the subsetting and transformation process easier ( but generally its avoided):\n\n-   `subset()` : To extract rows given a condition:\n\n    ```{r}\n    subset ( df, Paid == TRUE)\n\n    # Is the alternative to:\n    df[ df$Paid == TRUE, ]\n    ```\n\n-   `transform()` : To specify transformations to existing columns and returns the updated version.\n\nTo change the way we write functions we can use a 'pipe' as `%>%` provided by `magrittr` package. The pipe allows a function's output to serve as input to another function. Not every function is suitable for piping, the pipes are particularly useful for nested functions.\n\n```{r}\ncat(\"Nested: \\n\")\ncos (log (sqrt (8 - 3) ) )\n\nlibrary(\"magrittr\")\ncat(\"\\nUsing pipes: \\n\")\n(8 - 3) %>% sqrt %>% log %>% cos \n\n```\n\n### Re-Ordering, De-Duplicating, Sampling\n\nWe can create a vector with `order()` which contain indices sorted by the variables inside.\n\n``` r\ndf\nnew.order <- order( df$ID, df$Date )\n# convenient alternative:\nnew.order <- with ( df, order (ID, Date) )\n\n# 'new.order' have a vector with the rows sort by increasing ID\n# To have the data frame with the new order:\ndf[new.order, ]\n```\n\nFor duplicated values, we can use unique() passing the data frame to get every non-duplicated row. Just the floating-point error might be a problem detecting identical rows.\n\n-   sample() : first argument is the number of total rows, the second argument is the size of the sample we want. By default the result is a random set of integers without replacement. The row number of sampled data frame will be the same that originals.\n\n    ``` r\n    # Sample of 200 rows:\n    # First, create a vector selecting the rows\n    s200 <- sample ( nrow(df), 200 ) \n\n    # Using the sample vector to do the sampling:\n    df[s200, ]\n    ```\n\n## Date and Time Objects\n\n### Formatting Dates\n\nThe class Date internally store an integer representing the number of days since a particular origin date.\n\nDates can be represented in many shapes, american's form, rest-of-the-world form, etc. the `as.Date()` function converts text into Date class.\n\n```{r}\n# First '0' will be converted into origin date.\ndd <- as.Date ( c(0, 18252:18255), origin = \"1970-01-01\" )\n\ndd\n```\n\nAlso can convert text based representations in Date class such as \"7/4/2019\". In this case we have to pass `format=` argument, and the format string had to contain the same pattern that the input text:\n\n-   `%b ; %B` : name of the month\n-   `%a ; %A` : name of the day of the week\n-   `%d` : day of the month\n-   `%m` : month in number\n-   `%y ; %Y` : for the yy or YYYY year.\n-   `%F` : Equivalent to %Y-%m-%d.\n-   `%x` : Date. Locale-specific on output, `\"%y/%m/%d\"` on input.\n\n```{r}\nas.Date ( c(\"Feb 29, 2016\", \"Feb 29, 2017\", \"September 30, 2017\"), \n          format = \"%b %d, %Y\" )\n\n# The second date will result NA because is not valid\n```\n\nThe names of the days of the week and the months of the year are in computer's locale, to read other languages we can change locales R.\n\n```{r}\nsp.dt <- c(\"3 octubre 2016\", \"26 Marzo 2017\")\n\n( dts <- as.Date (sp.dt, format = \"%d %B %Y\") )\n\n# Changing locales to spanish:\nSys.setlocale (\"LC_TIME\", \"Spanish\")\n\n( dts <- as.Date (sp.dt, format = \"%d %B %Y\") )\n\n# Changing back:\nSys.setlocale (\"LC_TIME\", \"UK\")\n```\n\n### Operations on Date Objects\n\nThe functions `months()` and `weekdays()` returns the month name and weekday from passing Date object. It can be added the `abbreviate=TRUE` argument to abbreviate the output.\n\nTo extract the numeric month, day or year it can be used the `format()` function and then using `as.numeric()` to convert the character output to numeric.\n\n```{r}\ndt1 <- as.Date (\"2024/05/17\")\ndt2 <- as.Date (\"2024-07-03\")\n\n# Extracting weekdays:\nweekdays( c(dt1, dt2) )\ncat(\"\\n\")\n# Extracting month name:\nmonths( c(dt1, dt2), abbreviate = T )\ncat(\"\\n\")\n# Identifying Quarters:\nquarters( c(dt1, dt2) )\ncat(\"\\n\")\n\nformat ( c(dt1, dt2), \"%y\")\nformat ( c(dt1, dt2), \"%d\")\nformat ( c(dt1, dt2), \"%A, %B %d, %Y\")\n```\n\nThe difference between dates is a period of time stored as `difftime` object. Functions such as `mean()` and `range()` works well but `hist()` or `summary()` fails producing the expected results.\n\nUsually we will convert `difftime` objects to numeric with `as.numeric()` function, for that will be a good habit to specify `units = \"days\"` argument (with the unit we want.\n\n```{r}\ncat(\"Date1 adding 30 days: \\n\")\ndt1 + 30\n\ncat(\"\\nDifference between date1 and date2: \\n\")\n(dd <- dt2 - dt1)\n\ncat(\"\\nDifference to numeric: \\n\")\nas.numeric (dd)\nunits(dd)\ncat(\"\\nTo numeric but in weeks: \\n\")\nas.numeric (dd, units=\"weeks\")\n```\n\n### `POSIXt` Objects\n\n`POSIXlt` object is implemented as a list, meanwhile `POSIXct` object is like a number useful is will be stored in a column.\n\n```{r}\n(ready <- as.POSIXlt(\"2017-01-17 14:51:23\"))\n\ncat(\"\\n\")\nunlist (ready)\n\ncat(\"\\n\")\n( mdayn <- as.numeric(unlist (ready)[\"mday\"]) )\n```\n\nIn this last example we can see January is month 0 then December is month 11. Weekday is 0 to 6 starting on Sunday.\n\nHere it can be used too the `weekdays()`, `months()` and `quarters()` functions, as well as `format()` function. This will be less efficient than the list-type extraction, and it is recommended use `POSIXct` objects where possible because changing time zones with `POSIXlt` can encounter unexpected behavior.\n\nWhen we convert a `Date` object to `POSIXt` the time will be 00:00 (midnight), and when it converted from `POSIXt` to Date, the time will be truncated.\n\nas.POSIXct() and as.POSIXlt() works like as.Date() but the date can be followed by 24-hour clock time (or 12h with AM/PM).\n\n```{r}\n( ct1 <- as.POSIXct (\"Mar 30, 2017 12:26:08 am\", \n                     format = \"%b %d, %Y %I:%M:%S %p\") )\ncat(\"\\n\")\n(ct2 <- as.POSIXct (\"2017-03-29 22:26:08\", tz = \"UTC\"))\n\ncat(\"\\nLooking for diferences: \\n\")\nas.numeric (ct1 - ct2, units = \"secs\")\n```\n\nAll the objects in a vector of length \\>1 including `weekdays()` and `months()` will be displayed with the local time zone. For a single object these functions refer to the time zone of the object:\n\n```{r}\nc(ct1, ct2)\n\ncat(\"\\n\")\nweekdays(c(ct1, ct2))\ncat(\"\\n\")\nweekdays(ct2)\n```\n\nThe time zone can be converted changing `tzone` attribute:\\\n`attr ( ct1, tzone = \"UTC\" )`\n\nThe help of `Sys.timezone()` containing the names of the time zones. When a POSIXct object is converted to Date object is rendered in UTC time zone by default:\n\n```{r}\nas.Date(ct2)\nas.Date(ct1)\n```\n\nExample of `POSIXct` formatting flexibility:\n\n```{r}\n(crdt <- date() )\ncat(\"\\n\")\n\n(now <- as.POSIXct (crdt, format = \"%A %B %d %H:%M:%S %Y\" ) )\n\ncat(\"\\n\")\nas.Date (now)\n```\n\nMath Functions\n\nDate and `POSIXt` objects are numeric, then we can use some functions such as `range(), max(), min(), mean(), median()`, which will produce vectors of date objects.\n\n`diff()` : computes differences between adjacent elements in a vector.\n\n```{r}\ndiff ( range( c(ct1, ct2) ) )\n```\n\nThe function `table()` works too but does not work on `POSIXlt` (list) objects.\n\nWe can also create sequences with `seq()` function, it can be specified `by=\"day\"` argument:\n\n```{r}\nseq ( as.Date(\"2020-03-11\"), by = 3, length = 5 )\n\ncat(\"\\n\")\npdt <- as.POSIXct( (\"2020-03-11 13:05:00\") )\nseq ( pdt, by = 2, length = 3)\n\ncat(\"\\nSequence by days:\\n\")\nseq (pdt, by = \"day\", length = 3)\n\ncat(\"\\nBy day without altering the hour: \\n\")\nseq (pdt, by = \"DSTday\", length = 3)\n```\n\nWith `POSIXt` object using `by=\"day\"` the clock moves 24 hours, but `by=\"DSTday\"` moves 1 day preserving the clock.\n\nWe have to be more careful with `POSIXt` and `difftime` objects:\n\n```{r}\nd1 <- as.POSIXct (\"2017-05-01 12:00:00\")\nd2 <- as.POSIXct (\"2017-05-01 12:00:06\")\nd3 <- as.POSIXct (\"2017-05-07 12:00:00\")\ncat(\"Are equal (d2 - d1) and (d3 - d1) ? :\\n\")\n(d2 - d1) == (d3 - d1)\n\ncat(\"\\nSame operation but using as.numeric() : \\n\")\nas.numeric(d2 - d1) == as.numeric(d3 - d1)\n\ncat(\"\\nSame as.numeric but with units=days:\\n\")\nas.numeric(d2 - d1, units=\"days\") == as.numeric(d3 - d1, units=\"days\")\n```\n\n### Missing Values\n\nIn a vector dates of different classes should not be combined, a good practice is to use a function to force all the elements to have the same class.\n\n```{r}\nc(d1, NA)\n\ncat(\"\\n\")\nc(NA, d1)\n\ncat(\"\\n\")\nc( as.Date(NA), d1)\n\ncat(\"\\n\")\nc( as.POSIXct(NA), d1)\n```\n\nThe first `c(d1, NA)` knows what to do with the `NA` value because `d1` is first, but the second one do not, then convert the vector into numeric. That not happens in the third and fourth command when we specify which class is the `NA` value.\n\n### `Apply()` on Dates\n\nOften a data set will have a series of dates in each row, like with a data frame is better to use `lapply()` and `sapply()` functions:\n\n```{r}\ndt.df <- data.frame(\n    Start = c( seq (as.Date(\"2020-05-03\"), by=\"months\", length = 6) )\n)\n\n# Creating a new column\ndt.df$End <- c( seq (as.Date(\"2021-06-02\"), by=\"months\", length = 6) )\n\ndt.df\n```\n\n```{r}\nsapply ( 1:nrow(dt.df), \n         function (i) as.numeric (dt.df[i,2] - dt.df[i,1], \n                                  units = \"days\") ) \n```\n\n## Actions with Data Frames\n\n### Combining by Rows or Columns\n\nThe function `data.frame()` can be used with two data frames inside and will be joined. Also `cbind()` function is useful. Both can incorporate vectors and matrices as well. Remember that characters will be converted into Factors unless `stringAsFactors=FALSE`.\n\nIt is a good idea to check duplicated column names before combining, with `intersection()` function for example. If there are duplicated names R will use `make.names()` to generate unique alternatives (adding .1 .2 .3 ...).\n\n```{r}\nnames(df)\nnames(df2)\n# Forcing 'intersect' to get a column names coincidence\ndf2$Paid <- c(NA,NA,NA,NA,NA,NA)\nintersect( names(df), names(df2) )\n```\n\nWith `rbind()` we can combine data frames vertically (by rows). The columns in both data frames have to be the same, number and name, but not the order. Also the columns it's recommended to have the same class or R will convert to the common class. Pass `stringAsFactor=FALSE` with `rbind()` to ensure the character columns.\n\n``` r\n# Checking column names on two data frames:\nnam1 <- names (df1)\nnam2 <- names (df2)\n\nall (sort (nam1) == sort (nam2) )\n```\n\nAbove we sort the names of each data frame with a comparation expecting TRUE as result.\n\n``` r\n# Checking column classes\ncs1 <- sapply (df1, class)\ncs2 <- sapply (df2, class)\n\nisTRUE (all.equal (cs1, cs2[names (cs1) ] ) )\n```\n\nAnd now we compare both classes.\n\n-   `all.equal()` : compares two objects and returns TRUE if the match. Also returns a report if there are differences.\n-   `isTRUE()` : returns TRUE if its argument is a single TRUE (expected for `all.equal()` ) or FALSE if there are something else.\n\nWhen the rows have basic numeric names R will adjust the resulting rows. But with modified row names R will try to keep them and taking care of the matches.\n\nIf we have a large number of data frames, for example in a list as the result of `lapply()` function, we can use `do.call()` to combine them. The function takes the name of a function to be run and a list of arguments and run the function with those arguments:\n\n``` r\n# Result of lapply() function:\nlist.of.df\n\ndo.call ( \"rbind\", list.of.df )\n```\n\nIn the command above we are assuming that data frames meet the `rbind()` criteria. Other basic example can be: `do.call(\"log\", list(x = 32, base = 2)` where the list are the argument of `log().`\n\n### Merging Data Frames\n\nTo `merge()` usually the data frames to merge have a \"key\" field. Then `merge()` matches up the key and produces a data frame with one row per key with the columns of both data frames.\n\n-   `merge()` arguments:\n\n    -   `(all.x=FALSE, all.y=FALSE)` : default options. One row for each key that appears in bot x and y data frames (except when there are duplicated keys). Is an `'inner join'`.\n    -   `(all.x=TRUE, all.y=FALSE)` : One row for each key in x and columns of the corresponding keys that do not appear in y are filled with NA values. Is an `'left join'`.\n    -   `(all.x=FALSE, all.y=TRUE)` : Is the complementary one, an '`right join`'.\n    -   `(all.x=TRUE, all.y=TRUE)` : This id the '`outer join`', when the result has one row for every key in either x or y.\n\nWhen the keys are duplicated the function `merge()` does not care, it will do it. It is best to remove rows with duplicated keys or to create a new column with a unique key, before merging.\n\nIf the key match approximately (people names) the functions `adist()` and `agrep()` help find keys that match approximately.\n\n### Comparing Data Frames\n\n-   `identical()` : test for every strict equivalence. Returns `TRUE` when the two items are equal. Should not be applied to `POSIXlt` or data frames with this object.\n\n-   `all.equal()` : compares two objects but with more room for difference. Returns `TRUE` when two items are equal. By default is a match between names and attributes of two data frames. Correct way to compare: `isTRUE(all.equal(df1, df2))`\n\n    -   `tolerance=` how different two numbers need to be to be declarated different.\n\n### View and Editing Data Frames\n\n-   `View()` : shows a dear-only representation of a data frame.\n-   `edit()` : allows change to be made. Can be saved to reflect the changes\n-   `data.entry()` : the changes are saved automatically.\n\nIs strongly recommended to use commented scripts and functions because in that way all the steps in the process will be reproducible.\n\n## Handling Big Data\n\nR store the data in main memory on the machine being used.\n\nBash include tools to provide the ability to break the data into manageable pieces:\n\n-   `split` : breaks up a data set by rows.\n-   `cut` : extracts specific columns.\n-   `shuf` : which permits the lines in a file, which helps when taking random samples.\n\nThe `data.table` package advertises very fast subsetting and tabulation.\n\nThere are add-in packages to maintain \"pointers\" to data on disk, it is slower than memory but the storage can be expected to be huge:\n\n-   `bigmemory`\n-   `ff`\n-   `tm`\n\n## Data Handling Tools\n\nTo account for columns with a vector of two or more classes we can extract the classes into a variable:\n\n```{r}\ndf2\n```\n\n```{r}\n( col.cls <- sapply(df2, function (x) class (x)[1] ) )\n```\n\n-   table() to tabulate the columns classes.\n\n    ```{r}\n    table(col.cls)\n    ```\n\n-   To count missing values by column, or count negative or a number equal to 99 like other 'missing' values:\n\n    ```{r}\n    sapply( df2, function(x) sum(is.na(x) ) )\n    ```\n\n    -   If there are a large number of columns we can pass `sapply()` results to `table(`)\n\n    ```{r}\n    sapply( df2, function(x) sum(is.na(x) ) ) |> table()\n    ```\n\n    ```{r}\n    sapply( df2, function(x) sum (x < 0, na.rm = TRUE) )\n    ```\n\n-   To compute the ranges of numeric columns in a search of outliers or anomalies.\n\n    ```{r}\n    sapply (df2[, col.cls %in% c(\"numeric\", \"integer\") ], range, na.rm=TRUE ) \n    ```\n\n-   To count unique values by column:\n\n    ```{r}\n    sapply(df2, function(x) length(unique(na.omit(x) ) ) )\n    ```\n\nThe `apply()` function converts the data frame to a matrix first, should be used if all the columns of a data frame are of the same type. The `sapply()` function tries to return a vector or a matrix if it can, so if the return elements are of different classes they will often be converted. It is better to use `lapply()` unless we know that one of the other functions will succeed.\n\n# R Data: Text and Factors\n\nTwo ways to store test data, the vector of character strings and as a factor which is text entries as integers with character labels that match those integers.\n\n## Character Data\n\n### `length()` and `nchar()`\n\nOn a vector using `length()` we extract how many elements are in it, and using `nchar()` we extract how many letters there are in each element. The argument `keepNA=FALSE` allow `nchar()` to count `NA` values returning 2 of length.\n\n```{r}\nwriters <- c(\"asimov\", \"tolstoi\", \"wolf\", \"sanderson\", \"joyce\")\nlength(writers)\nnchar(writers)\n```\n\n### Escaped characters\n\nIn character strings some characters are protected, we have to use backslash `( \\ )` to use them.\n\nWe have to escape the double quotation marks and the backslash:\n\n*She wrote, \"To enter a 'new-line,' type \"\\\\n\" .\"*\n\n```{r}\n( quo <- \"She wrote, \\\"To enter a 'new-line,' type \\\"\\\\n\\\" .\\\"\" )\nnchar (quo)\ncat(quo, \"\\n\")\n```\n\nEmpty String\n\nA vector length 0 corresponds to `character(0)`. An empty string is a vector in which an element have spaces or not, indicated by `\"\"`. It will be length 1 and nchar 0. Spreadsheets will sometimes produce this empty strings or strings of spaces:\n\n```{r}\nblanks <- c (\" \", \" \", \"\", \"   \", \"\", \"2016\", \"\", \" 2016\", \"2016\", \"   \")\nlength(blanks)\ntable(blanks)\nnames(table(blanks))\nnzchar(blanks)\n\n# Removing white spaces located in the start or end of a element:\nnoblanks <- trimws(blanks)\ntable(noblanks)\nnames(table(noblanks))\n```\n\nThe function `nzchar()` returns TRUE for strings that have non-zero length and FALSE for empty strings. And with `trimws()` we can remove blanks at the beginning and end of each element.\n\n### Substrings\n\nFrequently in data cleaning we have to extract a piece of string, like a year or Zip code. For this task the `substring()` function takes a piece of text:\n\n-   `substring()` : given a vector extract the selected text.\n\n    -   `first=` position of the first character to extract\n\n    -   `last=` position of the last character up to 1 Million. Can be omitted to get the end of the string.\n\nAlso, `substring()` can be on the left side of an assignment, then we can add some text to each element of a vector.\n\n```{r}\ndt1 <- \"2017-02-03\"\n# Extracting the year\nsubstring(dt1, 1, 4)\n# Extracting day and month (last five characters)\nsubstring (dt1, nchar(dt1) - 4)\n\n```\n\nTo break a string into its individual characters we can do it with `strsplit()` and also with `substring()`:\n\n```{r}\nsubstring(dt1, 1:nchar(dt1), 1:nchar(dt1) )\nstrsplit(dt1, split = NULL)\n```\n\nTo change the last letters of a character element with `substring()` :\n\n```{r}\nholid <- month.name\nsubstring (holid[6:8], nchar(holid[6:8]) - 0 ) <- \"9\"\nholid[5:9]\n```\n\n### Case and Substitutions\n\nWe will need sometimes to manipulate the case of characters because R is case-sensitive.\n\n`tolower(), toupper(), casefold()` functions perfrom these convertions. Using `casefold()` have to be passed the argument `upper=` being `TRUE` or `FALSE` which change to upper or lower case respectively.\n\nThe function `chartr()` is a general solution for substitutions. It takes two arguments that are vectors of characters and changes each character in the first argument into the corresponding character in the second argument.\n\nTo capitalize the every first letter of a character string, from `help(\"casefold\")`:\n\n```{r}\n.simpleCap <- function(x) {\n    s <- strsplit(x, \" \")[[1]]\n    paste(toupper(substring(s, 1, 1)), substring(s, 2),\n          sep = \"\", collapse = \" \")\n}\n.simpleCap(\"the quick red fox jumps over the lazy brown dog\")\n```\n\n## Converting numbers into text\n\n### Formatting Numbers\n\n-   `format()` : is a way to format a set of numbers in a common way. E.g. lining up decimal points and commas.\n\n    -   `digits=` number of digits\n\n    -   `nsmall=` number of digits (minimum) in the 'small' part (the right of the decimal point).\n\n    -   `big.mark=` determine the comma in the 'big' part (the thousand mark).\n\n    -   `drop0trailing` , removes trailing zeros in the small part.\n\n    -   `zero.print=` , if TRUE, causes zeros to be printed with spaces.\n\n```{r}\nformat ( c(12.23, 1234.45678, 0, 10.000) )\nformat ( c(12.23, 1234.45678, 0, 10.000), big.mark=\",\" )\nformat ( c(12.23, 1234.45678, 0, 10.000),\n         digits = 6, nsmall = 2, zero.print = FALSE, width = 2)\n```\n\nDecimal part by default will be aligned. The last example shows a currency type format, which the `digits` and `nsmall` arguments have to be chosen carefully to produce two decimals.\n\nWith `sprintf()` we can include text and add leading zeros. The function have a format string containing text and conversion strings, which describe how numbers and other variables should appear in that output. A conversion strings start with a percent sign and contain modifiers and then a conversion character.\n\nThe conversion character `%i` or `%d` are for integer values, `%f` is for double-precision numerics, and `%s` is for character strings. This field can be formatted with two numbers separated by a period, the first one give the minimum width (total number of characters) and the second one is the number of digits to the right of the decimal points.\n\n```{r}\n# 8 characters, 2 decimals.\nsprintf ( \"%9.2f\", 1230.456789 )\n# 0 leading the character to fill with 0 until 8 characters.\nsprintf ( \"%09.2f\", 1230.456789 )\n# Like the previous one but with spaces\nsprintf ( \"% 9.2f\", 1230.456789 )\n# Always a simbol leading the number\nsprintf ( \"%+9.2f\", 1230.456789 )\n# Left Justified\nsprintf ( \"%-9.2f\", 1230.456789 )\n# exponential\nsprintf ( \"%9.3g\", 1230.456789 )\n```\n\nAlso we can use `sprintf()` with more than one vectors:\n\n```{r}\ncosts <- c(3, 22, 456.32, 89340.4235, 1230045605.959)\nsprintf ( \"I spent $%.0f in %s\", costs, month.name[2:6] )\n```\n\nIn the conversion, the field width or precision can be passed as an argument if we specify an asterisk in the format:\n\n```{r}\nbigs <- max (nchar (sprintf (\"%.2f\", costs) ) )\n\nsprintf (\"spent $%*.2f in %s\",\n         bigs, costs, month.name[2:6] )\n\n```\n\nThe function `sprintf()` can be very useful to generate labels:\n\n```{r}\nsprintf (\"%03d\", 1:15 )\n```\n\n### Scientific Notation\n\nWhen you represent a number by an optional sign, a number between 1 and 10 and a multiplier of a power of 10.\n\nIn R we can use `options()` to change scipen option. If `scipen=999` the scientific notion will be disabled, and `scipen=-999` will force scientific notion. When you close and open R `scipen` is re-set to default values. It is a better option to use `format(x, scientific=FALSE)`.\n\n```{r}\n100000\nc( 1, 100000 )\nc( 1, 100000, 123456 )\nas.integer (1000000 + 1 )\nformat ( 1000000, scientific=FALSE)\n```\n\n### Discretizing a Numeric Variable\n\nDiscretizing is to construct a categorical version of a numeric vector with a few levels for exploration or modeling purposes, it is also called 'binning'.\n\n-   `cut()` : the arguments are the vector to be discretized and the breakpoints; optionally we can pass labels to be applied to the new levels. The result is a factor vector.\n\n    -   `include.lowest=` if `TRUE` will include the left endpoint to the binning. By default will not be included.\n\n    -   `right=` if `FALSE` makes intervals include their left end and exclude the right.\n\n    -   `breaks=` passing an `integer` will produce that number of bins with equal width.\n\n```{r}\nvec <- c(1, 5, 7, 2, 8, 9, 3, 4, 10)\nas.character (cut (vec, c(1, 4, 7, 10), include.lowest=TRUE, right=FALSE) )\n```\n\n```{r}\n# Generating random numbers\nset.seed(168)\nrand.vec <- rnorm(1000)\n\n# cut() with breaks=5 of equal width\ntable (cut (rand.vec, breaks=5) )\n\n# Using quantile() to create bins with equal number of observations\ntable (cut (rand.vec, quantile(rand.vec) ) )\n\n# quantile() with probs argument to create 5 bins instead of 2\ntable (cut (rand.vec, \n            quantile(rand.vec, probs=seq(0, 1, 0.2) ), \n            include.lowest = TRUE ) )\n\n```\n\n## Character Strings\n\n-   `paste()` , `paste0()` : sticks together two character vectors, and if its necessary convert them into a `character` vector first. By default it will insert a space between them.\n\n    -   `sep=` to choose the separation, e.g. `sep=\".\"` or `sep=\"\"` .\n\n    -   `collapse=` combines all the strings of the vector into one long string. It will use the separator specified by the value of this argument. e.g. `collapse=\"\"` or `=\"\\t\"` .\n\n```{r}\npaste(\"a\", \"b\", \"c\")\n\npaste0( 1 == 2, 1 + 2)\npaste0(\"Arg\", sep=\".\", LETTERS[3:7])\npaste(letters[1:5], LETTERS[5:1], collapse = \", \")\n```\n\n### Column Names\n\nWhen a data frame is constructed from data without header names, R construct names such as V1 and V2. Usually we will want to replace these names to others more meaningful.\n\nFor example, we want column names for 36 months of balance data from 2021 to 2023, also 36 months of payment data for the same years.\n\n-   `outer()` : given two vectors, performs another function on each pair of elements producing a matrix.\n\n-   `expand.grid()` : given vectors of values produces a data frame containing all combinations of all the values.\n\n```{r}\nhead (\n    outer (month.abb, 2021:2023, paste, sep = \".\" ), 5\n)\n# Creating the month sequence for each year\nmonseq <- outer (month.abb, 2021:2023, paste, sep = \".\" )\n# Creating the column names\nnewnam <- c(\"ID\", \n            paste0 (\"Bal.\", monseq), \n            paste0 (\"Pay.\", monseq) )\n\nsample(newnam, 5)\n```\n\n```{r}\n# Alternative maybe more eficient but more tedious\np1 <- rep (c(\"Bal\", \"Pay\"), 12 * 3)\n# Each month 2 times for Bal and Pay, and then 3 times for the years\np2 <- rep ( rep(month.abb, each = 2), 3 )\n# Each year two times, for Bal and Pay\np3 <- rep (2021:2023, each = 24)\n\nnewnam <- c(\"ID\", paste(p1, p2, p3, sep=\".\") )\nsample(newnam, 5)\n```\n\n```{r}\nnames.df <- expand.grid (c(\"Bal\", \"Pay\"), \n                         month.abb, \n                         c(2021:2023) )\n\nnewnam <- paste ( names.df[[\"Var1\"]], \n                  names.df[[\"Var2\"]], \n                  names.df[[\"Var3\"]],\n                  sep = \".\" )\n\nsample(newnam, 5)\n```\n\n### Tabulating Dates\n\nTo summarize vectors of dates:\n\n```{r}\nset.seed(168)\nrnd.dts <- as.Date (sample (0:730, size = 600), origin = \"2021-01-01\")\n\ntable (quarters (rnd.dts) )\n\n# To combine year.month is also possible with substring() instead of format\ntable ( paste0 (format (rnd.dts, \"%Y\"), \".\", quarters(rnd.dts) ) )\n\n```\n\nIf we want to use the month instead of the quarter, we can extract the moth name with `month()` function and use paste, or it is possible to use `format()` directly with the year and the month name.\n\n```{r}\nym.order <- paste0 (2021:2023, \".\", month.name )\n\nym.tbl <- table (format(rnd.dts, \"%Y.%B\") )\n\nym.tbl[ym.order][1:5]\n```\n\n### Unique Keys\n\nOften we need to construct a column with an unique identifier for each row. These previous methods are useful for that task. Maybe the year and month are not enough and we have to add a customer ID or something else to achieve this column with unique keys.\n\n### Files and Path names\n\nTo create a vector with every file in the working directory and each one with it absolute path we can use `paste(getwd(), list.files(), sep=\"/\")` . If we use `list.files(full.names=TRUE)` will return only the relative path.\n\n## Regular Expressions\n\nWe use regular expressions to find strings that match a pattern. This patterns are case-sensitive but can be ignored. R can use POSIX regular expression and Perl-style re.\n\nFor regular expresson in R there are three primary tools which are `grep()`, `regexpr()` and `sub()`, all tree with its variants.\n\n-   `grep()` : given a pattern and a vector of strings, returns a numeric vector with the indices of the string that match the pattern.\n\n    -   `value=` if `TRUE` returns the matching string themselves.\n\n    -   `ignore.case=` if `TRUE` will ignore whether letters are in upper or lower-case.\n\n    -   `invert=` if `TRUE` reverses the search, returning the elements that not match. It's not available with `grepl()`\n\n    -   `fixed=` if `TRUE` suspends the rules about patterns and simply searches for an exact text string.\n\n    -   `perl=` if `TRUE` indicate to grep() to use Perl-type regular expressions.\n\n    -   `useBytes=` if `TRUE` the matching should be done byte by byte.\n\n-   `grepl()` : returns a logical vector indicating the elements that match.\n\nSpecial Characters in POSIX regular expressions:\n\n![](images/clipboard-3145267093.png)\n\nIt is common to see `.+` in regular expressions, that means *a sequence of one or more characters*. Also we can see `.*` for *zero or more characters*.\n\nIs is a mistake to add spaces to your pattern thinking 'it will be more readable', because the regular expression will then take the spaces literally and require that they appear.\n\nLooking in a character vector with dates:\n\n```{r}\ndt <- c(\n    \"Balance due 16 Jun or earlier in 2017\",\n    \"26 Aug or any day in 3021\",\n    \"'76 Trombones' marched in a 1962 film\",\n    \"4 Apr 2018\", \"9Aug2006\",\n    \"99 Voters May Register in 20188\"\n)\n\n```\n\n-   `.*` if we have leading text\n\n-   `[0-3]?[0-9]` matches a one digit number, the first digit is optional indicated by '?'\n\n-   `.*` again for additional text\n\n-   `(\", or.mon, \")` will be the variable with the month names separated by pipes `\"|\"`. The parenthesis make this a single pattern. The abbreviations will match a full name.\n\n-   `.*` more additional text\n\n-   `[1-2][0-9[{3}` four digits that have to start with 1 or 2\n\n```{r}\nor.mon <- paste (month.abb, collapse = \"|\")\nor.mon\nre <- paste0 ( \".*[0-3]?[0-9].*(\", or.mon, \").*[1-2][0-9]{3}\")\ngrep (re, dt, value = TRUE )\n```\n\nThe line with '20188' match because the four digits with `[1-2][0-9]{3}` match. Also the '99' matches because `[0-3]` is optional and the first 9 matches in the `[0-9]` pattern and the second match with `.*` .\n\n#### Escape Sequences\n\nTo write some special characters like the dollar sign \\$, we have to pass a backslash to escape \\$ from the engine which read regular expressions. To escape a character usually we should use `\\$` but in R we need to escape also the backslash because R have special characters like `\\n` to create a new-line. Then we will write double backslash and the simbol `\\\\$`. In some case, to look for the backslash itself we have to write four backslashes, two for the escape and other two for the search: `\\\\\\\\`. Using the argument fixed=TRUE can simplify the search of this patterns.\n\n```{r}\npain <- c(\"c:\\\\temp\", \"/bin/u\", \"$5\", \"\\n\", \"2 backs: \\\\\\\\\")\ngrep (\"$\", pain)\ngrep (\"\\\\$\", pain, value=TRUE)\ngrep (\"\\\\\\\\\", pain, value=TRUE)\ngrep (\"\\\\\", pain, value=TRUE, fixed=TRUE)\n# Looking for any slashes:\ngrep (\"\\\\|/\", pain, value=TRUE, fixed=FALSE)\n```\n\n#### Ranges\n\nWorking with ranges like `[0-9]` meaning any number between 0 and 9 we also can negate a character, for example `[^0123]` means any character other than 0, 1, 2, 3, 4.\n\nThe predefined character classes set include `[:lower:], [:upper:]` for lower- and upper-case; `[:alpha:]` for any letters; `[:alnum:]` for alphanumeric; `[:digit:]` for digits; `[:punct:]` for punctuation. There are more in `help(\"regex\")` pages. Then, `[[:digit:]]` match one digit and `[^[:digit:]]` match any character that is not a digit.\n\nTo finish, a word boundary is to search a word or string with a specific composition and can be identified by `\\b` or `\\< ... \\>`. For example using `\"\\\\<\\\\d{4}\\\\>\"` we are specifying a word that must include exactly four digits.\n\n### `regexpr()`\n\nThe function `regexpr()` is more precise than `grep()`, it will return the location of the first match within the string (number of the first character of the match). This information can be useful to extract the number itself and not only identify the string.\n\n```r\ndt\n# looking for a word with an integer:\n(regout <- regexpr( \"\\\\<\\\\d+\\\\>\", dt ) )\nattr(,\"match.legth\")\n```\n\nThe first '13' returned by `regexpr()` vector indicate that the 13th character is a number referencing the 16. The number -1 indicate that string no contains an integer as a word.\n\nThe attributes returned also give us information. `\"match.length\"` is the length of the match. Then, we could extract the `\"match.length\"` vector and use it with `substring()` to extract the number in the strings. Other method is with `regmatches()` given the character vector and the output of `regexpr()`:\n\n```r\nregmatches (dt, regout)\n```\n\nTo extract all integers in the character vector we will use `gregexpr()` but the return is a list because some strings can contain more than one integer word. With `regmatches()` we can extract the numbers anyway.\n\n```r\ngout <- gregexpr (\"\\\\<\\\\d+\\\\>\", dt)\nregmatches (dt, gout)\n\n# Creating a matrix with the return of regmatches\nmatrix (as.numeric (unlist (regmatches (dt, gout) ) ), ncol=2, byrow=T )\n```\n\nBu default the matching look for the match that are as long as possible. If in the pattern we add a '?' it will stop that. for example with `\\\\d.*?\\\\d` will produce \"4 Apr 3\" although there are more numbers (\"4 Apr 3021\").\n\n### Replacement with Regular Expressions\n\n-   `sub()` : replaces the first matching pattern.\n\n-   `gsub()` : replaces all the matching patterns.\n\nThe first argument for both a the pattern to search, the second is the characters to replace for, and the third argument is the character vector where to look for. Other option is to use backreferences, if the patters is composed by two patterns between parentheses we can use \\\\1 \\\\2 in the second argument to refer the matches:\n\n```{r}\nbros <- c(\"Isaac Asimov\", \"Leon Tolstoi\", \"Virginia Wolf\", \"Brandon Sanderson\")\n\n# Changing the name order with backreferences:\nsub (\"([[:alpha:]]+) ([[:alpha:]]+)\", \"\\\\2, \\\\1\", bros)\n```\n\n### Splitting with Regular Expressions\n\n-   `strsplit()` : given a vector and a pattern splits the text producing a list with one entry for each string. Also has the fixed=TRUE argument to not use regular expressions.\n\n```{r}\nkeys <- c(\"CA-2017-04-02-66J-44\", \n          \"MI-2017-07-17-41H-72\", \n          \"CA-2017-08-24-Missing-378\")\n\n(key.list <- strsplit (keys, \"-\") )\n\nmatrix ( unlist (key.list), ncol = 6, byrow = TRUE )\n```\n\n### Common Data Cleaning Task Using Regular Expressions\n\n#### Removing Leading and Trailing Spaces\n\n-   `\"^ *\"` : any string with leading spaces\n-   `\" *$\"` : any string with trailing spaces\n\n```{r}\ngsub ( \"^ *| *$\", \"\", c(\"  Text Spaces \", \"Trailing    \", \n                        \"None\", \"     Leading\" ) )\n```\n\n#### Format Currency to Numeric\n\nTaking into account $12,345.67 or 12,345.67€ we have to remove the symbol and the comma before converting into numeric.\n\n-   `\"\\\\$\"` : dollar symbol\n-   `\"\\\\€\"` : euro symbol\n-   `\"^[^0-9.]\"` : non-numeric leading character\n-   `\"[^[:digit:].]$\"` : non-numeric trailing character\n\n```{r}\nas.numeric ( gsub (\"(^[^0-9.]|,)|(,|[^[:digit:].]$)\",\n                   \"\", c(\"$12,345.67\", \"98,765.43€\") ) )\n```\n\n#### Removing HTML Tags\n\nWe are looking for <b>Bold</b> and other tags like that.\n\n-   `\"<.*?>\"` : Everything between < >\n\n```{r}\nhtml <- c('\n    <!DOCTYPE html>\n<html lang=\"es\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Ejemplo de HTML</title>\n</head>\n<body>\n    <h1>Bienvenido a mi página web</h1>\n    <p>Este es un <strong>ejemplo</strong> de un párrafo con <em>texto en cursiva</em> y <strong>texto en negrita</strong>.</p>\n    <ul>\n        <li>Elemento de lista 1</li>\n        <li>Elemento de lista 2</li>\n        <li>Elemento de lista 3</li>\n    </ul>\n    <a href=\"https://www.ejemplo.com\">Visita nuestro sitio web</a>\n</body>\n</html>\n')\n\nno.html <- gsub ( \"<.*?>\", \"\", html)\ngsub (\"\\\\n\", \"\", no.html)\n```\n\n```{r}\ncat(no.html)\n```\n\n#### Linux Paths to Windows or R Paths\n\n```{r}\n# Linux to Windows\ngsub (\"/\", \"\\\\\\\\\", \"/usr/local/bin\")\n\n# Windows to Linux\ngsub(\"\\\\\\\\\", \"/\", \"\\\\usr\\\\local\\\\bin\")\ngsub(\"\\\\\", \"/\", \"\\\\usr\\\\local\\\\bin\", fixed = TRUE)\n```\n\n### Recomendations\n\nBecause Regular Expressions are complicated be sure to document them well. For debugging there are online aids to diagnosing problems, be sure to specify regular expression type POSIX with GNI extensions or PCRE.\n\n## UTF-8 and Other Non-ASCII Characters\n\nLeading with symbols or letters with accent in Latin alphabet, each have their ASCII hexadecimal value, then we can use that after `\"\\x\"` to use it as a pattern in `grep()`, `gsub()` or other similar function. For example, to look for `Ê` we can introduce `\\xca` as `ca` represent the hexadecimal value for `Ê`. Also, Windows and Mac use different ASCII table with different some different values.\n\nUnicode symbols are intend to describe all the symbols in in all the world, and are shown in R by preceding them with `\\U` . The word China in simplified Chinese are represented `\"\\U4E2D\"` and `\"\\U56FD\"` . The most popular is UTF-8 encoding which a character in Unicode is represented by one or more bytes. The display of UTF-8 characters can be inconsistent between machines.\n\nR assigns an encoding to every element in a character vector and different elements in a vector may have different encodings. \n\n-   `Encoding()` : returns the encoding of the strings in a vector\n-   `iconv()` : to convert the encodings.\n\nIn R ASCII strings are unencoded; latin1 characters are encoded as latin1; non-latin unicode are encoded as UTF-8.\n\n```{r}\nyogi.utf <- \"It's d\\Ue9j\\Ue0 vu all over again.\"\nEncoding (yogi.utf)\nc( regexpr (\"\\\\xe0\", yogi.utf), regexpr (\"\\ue0\", yogi.utf), regexpr (\"à\", yogi.utf) )\n```\n\n```{r}\ndata.frame (a = \"\\U4e2d\\U56fd\", stringsAsFactors = FALSE)\n```\n\n## Factors\n\nA Factor vector looks like text but behaves like an integer. It can be created with `as.factor()` function which often is a final step; also are created when you add character vector into a data frame with `data.frame()` or `cbind()` functions.\n\nIt is recommended to turn the character vectors into factor only when all the data cleaning is finished, before modeling. \n\nA Factor vector the `class()` is `factor`, the `mode()` is `numeric` and the `typeof()` is `integer`. R will set the levels alphabetically.\n\n-   When you change a value of a factor vector, if that new value not corresponds to a level, will be NA.\n-   When you remove the elements with a specific value from the factor vector, that value is still one of the levels.\n\n```{r}\ncols.fac <- as.factor( c(\"red\", \"green\", \"blue\", \"red\", \"red\", \"red\", \"blue\") )\ncols.fac\ntable(cols.fac[cols.fac != \"red\"])\n```\n\n-   `levels()` : to check the levels in a factor vector and also to assign levels. This not change the underlying integer value corresponding that level.\n\n```{r}\nlevels(cols.fac)\nlevels(cols.fac)[2] <- \"yellow\"\nlevels(cols.fac)\n```\n\nThe levels can be reordered calling `factor()` function, this is useful for months and other levels that we want to have a custom order.\n\n```{r}\nfactor (cols.fac, levels = c(\"red\", \"blue\", \"yellow\") )\n```\n\n**Do not try** to change the order with `levels()` function. In this case will change the levels of the elements itself, will not change 'only' the order.\n\nTo convert a factor vector into character, can be used `as.character()` function, but a more efficient way is to use `levels(fac)[fac]`. Also, to convert the factor vector with levels which look like integers into number, **do not** use `as.numeric()`, first has to be converted into character. Now, if we have a gender column with F and M as levels of the factor vector, we want to convert this vector into numeric, 0 for F and 1 for M. The function `as.numeric()` will convert F to 1 and M to 2, to solve this we can use: `as.numeric(factor(gender))-1` . \n\nFinally, to combine two factor vectors, it is recommended to convert them first into characters, and then combine it. Later, if it's necessary, convert them again into factors. A exception can arise combining with `rbind()`, but other than this case, combining factor vector will usually end badly.\n\n```{r}\nind <- factor ( c(33, 4, 66, 3, 6, 77) )\nsrc <- 101:199\n# as.numeric will convert the vector elements into its assigned integers, not the levels.\nas.numeric(ind)\n```\n\n```{r}\n# Correct way, looking for that indices into 'src' vector:\nsrc[as.numeric (as.character (ind) )]\n# This will extract correctly the numbers\n```\n\n```{r}\ngender <- as.factor(c(\"F\", \"F\", \"M\", \"F\", \"M\", \"F\", \"M\") )\ngender\nas.numeric(gender) - 1\n```\n\n### Missing Values\n\nMissing values in factors are represented by `<NA>`. Actually, it is possible to have a level <NA> with NA values, but it is better no avoid that, as well is clever to avoid \"NA\" string value. The `levels()` function does not mention to `NA` values because they do not have level. \n\nWe can use the function `addNA()` to add a level which is a NA value, but will be better to replace NA values:\n\n```{r}\nmis.fac <- as.factor(c(\"F\", NA, \"M\", \"F\", NA, \"F\", \"M\") )\nmis.fac\nmis.fac <- as.character(mis.fac)\nmis.fac[is.na (mis.fac)] <- \"missing\"\n( mis.fac <- as.factor(mis.fac) )\n```\n\n## R Objects and Commands\n\n-   `get()` : accepts a character string and returns the object with that name.\n-   `exists()` : can test to see whether an object exists\n-   `get0()` : allow a value to be specified in place of the error.\n-   `ls()` : returns the names of the objects.\n-   `assing()` : given a name and a value creates a new R object. The argument `pos=1` at the command line has no effect, but inside a function it creates a variable in the Workspace.\n\n```{r}\nfor (i in 1:24)\n    assign (paste0 (LETTERS[i], c(month.abb,month.abb)[i] ), i, pos = 1 )\n\nlet.mon <- ls (pattern = \"^[A-Z]{2}?[a-z]{2}?\")\nlet.mon[3:6]\nsapply (let.mon, function(i) object.size(get(i)))\nremove (list = grep (\"^[A-Z]{2}?[a-z]{2}?\", ls(), value = T ) )\n```\n\n-   `parse()` : to create an R 'expression' object with `text` argument.\n-   `eval()` : executes the expression\n\n`eval(parse(text = \"log.11 <- log(11)\"))` : will create a variable called 'log.11'. The combination of `parse()` and `eval()` lets us construct R commands and execute them (allowing us to execute sequences of commands once we have created them with `paste()` and other tools).\n\n\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"output-file":"00_basics_ndata.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.555","bibliography":["../../references.bib"],"editor":"visual","tabset":true,"theme":{"light":["cosmo","../../style/style.scss"],"dark":["cosmo","../../style/dark.scss"]},"title":"R: The very basics"},"extensions":{"book":{"multiFile":true}}},"pdf":{"identifier":{"display-name":"PDF","target-format":"pdf","base-format":"pdf"},"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","output-file":"00_basics_ndata.pdf"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"block-headings":true,"bibliography":["../../references.bib"],"editor":"visual","documentclass":"scrreprt","title":"R: The very basics"},"extensions":{"book":{"selfContainedOutput":true}}}},"projectFormats":["html","pdf"]}