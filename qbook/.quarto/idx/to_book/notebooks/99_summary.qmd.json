{"title":"Base-R Summary","markdown":{"yaml":{"title":"Base-R Summary"},"headingText":"R-base","containsRefs":false,"markdown":"\n\n\n-   `help()`: gets information on a particular R function, e.g. `help(matrix)`\n    -   `help(Syntax)`: returns the help of a list of operators   \n-   `?`: works the same as the previous one, e.g. `?\"matrix\"`\n-   `help.search()`: It's useful if we know the subject rather than the name.\n-   `apropos()`: returns a vector of names of objects containing that string, e.g. `apropos(\"matrix\")` returns every object with 'matrix' in its name.\n-   `args()`: displays the set of arguments expected by a given function.\n\n\n-   `which()`: convert logical vector into numeric. Returns the indices of the elements TRUE.\n\n\n\n-   `seq()`: create sequences. Principal arguments are: from, to and by.\n\n\n\n-   `names()`: to show or assign names to a vector\n\n\n\n-   `typeof()`\n-   `mode()`\n-   `str()`\n-   `class()`\n\n\n\n-   `is()`\n-   `is.logical()`\n-   `is.integer()`\n-   `is.numeric()`\n-   `is.character()`\n\nTypes: logical \\< raw \\< numeric \\< complex \\< character.\n\n-   `as.numeric()`\n-   `as.character()`\n-   `as.integer()`\n-   `as.logical()`\n-   `as.factor()`\n\n\n\n-   `anyNA()`: Returns TRUE if the vector contains NA values.\n-   `is.na()`: Returns TRUE for every field NA.\n  -   `where(is.na(vector))`to find the numeric indices of the missing elements.\n-   `na.omit()`: deletes the missing values but also keeps track of where in the vector they used to be. This information is stored in vector's 'attributes':\n  -   `attr(nay, \"na.action\")`\n-   `is.null()`: \n\n\n\n-   `table()`:\n  -   `useNA =`\n      -   `\"no\"` : default option. Exclude NA values.\n      -   `\"ifany\"` : show an entry for NA if there are any.\n      -   `\"always\"` : show an entry for NA whether there are any NA values or not.\n  -   `exclude =`\n      -   `c(NA, NaN)` : default option.\n      -   We can add a value of the vector to exclude, also we can pass `NULL`.\n-   `xtabs()`: for more complex table\n-   `prop.table()` : passing a variable with table assigned produces the proportions of the total counts in the table by cell (or row, or column). The second argument references 1 to rows, or 2 to columns.\n-   `margin.table()` : produce the marginals totals from a table.\n-   `addmargins()` : to a given table incorporates those totals producing a new row and column by default. Passing as second argument 1 or 2, you can specified if only wants rows or columns.\n\n\n\n-   `tapply()` : the arguments are, first the vector where perform the computation, second the vector with the index to group, and then the function to apply. To group with more than one vector (index) we can use a `list()`.\n\n\n\n### Rounding\n\n-   `round()` : to round a number with specific amount of decimals. Passing a negative number as second argument will round the nearest power of 10.\n-   `signif()` : retain a specific number of digits.\n-   `trunc()` : discards the decimal part returning an integer.\n-   `floor()` ; `ceiling()` : round to the next lower or higher integer respectively.\n\n### Sorting and Ordering\n\n-   `sort()` : sorting from smallest to largest. It will drop NA and NaN values by default.\n    -   `decreasing=TRUE` will reverse the order.\n    -   `na.last` will add NA values, TRUE at the end and FALSE at the beginning.\n-   `order()` : returns the indices which can be used to sort a vector.\n    -   `na.last` as TRUE by default. TRUE at the end and FALSE at the beginning.\n\n### Matching\n\n-   `%in%`: to find values that overlap between two vectors.\n-   `union()` : returns the elements in either passed vectors\n-   `intersect()` : returns the elements which are in both passed vectors\n-   `setdiff()` : returns the elements of 'a' not present in 'b'\n\n### Duplicates\n\n-   `anyDuplicated()` : returns the duplicated values in a vector\n-   `unique()` : returns the distinct values, including NA and NaN.\n-   `duplicated(`) : returns a logical vector with TRUE per duplicated value (not the first value).\n    -   `fromLast=TRUE` reads from the end to the beginning. Using union() you can combine `fromLast=TRUE` and `fromLast=FALSE` to identify all duplicates.\n-   `match()` : given two vectors returns where the element from 'a' is in 'b'. By default returns NA for no matches, we can change this with `nomatch=0` argument.\n-   `rle()`: 'Run length encoding'. Returns the number of repetitions and length.\n\n\n\nWith mathematical computations we can use `na.rm = TRUE` argument to compute the result after omitting missing values.\n\n-   `length()`:\n-   `sum()`:\n-   `mean()`:\n-   `sd()`:\n-   `min()`:\n-   `max()`:\n  -   `pmax()`: parallel maximum, shows the max of each par of values.\n-   `range()`:\n-   `summary()`:\n-   `colSums(), rowSums(), colMeans(), rowMeans()`\n\n\n-   `length()`: returns the total number of elements in the matrix\n-   `dim()`: returns the dimension, rows x columns\n-   `cbind()` : combines a set of vectors into a matrix column by column.\n-   `rbind()` : combines a set of vectors into a matrix row by row.\n-   `solve()`: inverts a matrix\n-   `t()`: transposes a matrix\n-   `aperm()`: to transpose higher-way arrays\n\n\n-   `dimnames()`: returns rows and columns names.\n-   `rownames()`:\n-   `colnames()`:\n\n\n\n-   `apply()` : Useful to apply a custom function.\n    -   first argument, the matrix to which apply the function.\n    -   The direction, 1 for across rows, 2 for down columns.\n    -   The function to be applied.\n    -   `apply(a, 2, function (x) sum (is.na(x)))`\n\n\n-   `which()`: returns a number of the position for each element.\n  -   `arr.ind=TRUE`: returns coordinates.\n  -   `which(is.na(a))`\n\n## Lists\n\n-   `list()` \n-   `split()` : divides a vector into pieces according to the value of another vector. Returns a list. Missing values in the second vector passed will be dropped.\n-   `length()`:returns the number of elements inside a list, and with `lengths()` function the length of each element.\n-   `str()`: returns a description of every element on the list:\n-   `unlist()` : try to turn the list into a vector:\n\n## Data Frames\n\n-   `data.frame()`\n  -   `stringAsFactors=FALSE`\n-   `head()` : return the first six rows of a given dataframe. Second argument is n=6 to specify a number of rows. A negative number returns the last n rows.\n-   `tail()` : return the last six rows of a given dataframe. Second argument is n=6 to specify a number of rows.\n-   `str()` : compact representation of the data frame with data type per column.\n-   `dim()` : returns the dimension, number of rows and columns.\n-   `summary()` : returns a brief description of each column.\n\n\n\n-   `is.na()` : returns a logical matrix showing which elements are missing.\n-   `anyNA()` : returns TRUE or FALSE to the question There are missing values?\n-   `na.omit()` : omit the observations (rows) of the data frame in which one or more elements is missing. Also keeps a track, we can see the deleted observations with `attr(df, \"na.action\") ; attr(df, \"class\")`.\n\n\n\n-   `lapply()` : returns a list\n-   `sapply()` : runs `lapply()` and tries to make the output into a vector or a matrix. But if the return have different lengths, it will need to return a list. If it try to return items with diferent types, will convert these to a common type, then its better in these case use `lapply()`.\n\n\n### Split, Apply, Combine\n\nFirst the data is split, then a function is applied to each piece, and the results recombined. The function `tapply()` do exactly that, but also we can use `split()` and `sapply()` or `lapply()`.\n\n-   `sapply (split (df2$Age, df2$Gender), mean)`\n-   `tapply(df2$Age, df2$Gender, mean)`\n\n\n\n-   `with()` : to perform operations on a data frame. First argument is the data frame, then the expression to be performed. Cannot be assigned to.\n  -   ` with ( CustPayment2016, JanDebt `FebPurch - FebPmt )`\n-   `within()` : works in the same wey but unlike `with()`, this function can be assigned.\n  -   `CustPayment2016 <- within ( CustPayment2016, FebDebt <- JanDebt + FebPurch - FebPmt )`\n\n### Re-Ordering, De-Duplicating, Sampling\n\n-   `order()`: to sort a vector or data frame:\n  -   `new.order <- with ( df, order (ID, Date) )`\n-   `sample()` : first argument is the number of total rows, the second argument is the size of the sample we want. By default the result is a random set of integers without replacement. The row number of sampled data frame will be the same that originals.\n\n## Date and Time Objects\n\n-   `as.Date()`: converts text into Date class.\n  -   `format=`\n    -   `%b ; %B` : name of the month\n    -   `%a ; %A` : name of the day of the week\n    -   `%d` : day of the month\n    -   `%m` : month in number\n    -   `%y ; %Y` : for the yy or YYYY year.\n    -   `%F` : Equivalent to %Y-%m-%d.\n    -   `%x` : Date. Locale-specific on output, `\"%y/%m/%d\"` on input.\n- `months()`, `weekdays()`, `quarters()` returns the month name, weekday and quarter from passing Date object.\n  -   `abbreviate=TRUE` argument to abbreviate the output.\n-   `format()`: To extract the numeric month, day or year\n\nThe difference between dates is a period of time stored as `difftime` object. Functions such as `mean()` and `range()` works well but `hist()` or `summary()` fails producing the expected results.\n\nUsually we will convert `difftime` objects to numeric with `as.numeric()` function, for that will be a good habit to specify `units = \"days\"` argument (with the unit we want.\n\n### POSIX\n\n`POSIXlt` object is implemented as a list, meanwhile `POSIXct` object is like a number useful is will be stored in a column.\n\n- `as.POSIXct()` and `as.POSIXlt()`\n\nThe time zone can be converted changing `tzone` attribute:\\\n`attr ( ct1, tzone = \"UTC\" )`.\nThe help of `Sys.timezone()` containing the names of the time zones.\n\n-   `diff()` : computes differences between adjacent elements in a vector.\n-   `table()`: does not work on `POSIXlt` (list) objects.\n-   `seq()`: it can be specified `by=\"day\"` argument\n\n### Combining\n\n-   `intersection()`: useful for check duplicated column names\n-   `make.names()`: to generate unique column names\n-   `all.equal()` : compares two objects and returns TRUE if the match. Also returns a report if there are differences.\n-   `isTRUE()` : returns TRUE if its argument is a single TRUE (expected for `all.equal()` ) or FALSE if there are something else.\n\n\n\n-   `do.call()`: takes the name of a function to be run and a list of arguments and run the function with those arguments-\n  -   `do.call ( \"rbind\", list.of.df )`\n  \n\n\n-   `merge()` arguments:\n\n    -   `(all.x=FALSE, all.y=FALSE)` : default options. One row for each key that appears in bot x and y data frames (except when there are duplicated keys). Is an `'inner join'`.\n    -   `(all.x=TRUE, all.y=FALSE)` : One row for each key in x and columns of the corresponding keys that do not appear in y are filled with NA values. Is an `'left join'`.\n    -   `(all.x=FALSE, all.y=TRUE)` : Is the complementary one, an '`right join`'.\n    -   `(all.x=TRUE, all.y=TRUE)` : This id the '`outer join`', when the result has one row for every key in either x or y.\n\nIf the key match approximately (people names) the functions `adist()` and `agrep()` help find keys that match approximately.\n\n### Comparing Data Frames\n\n-   `identical()` : test for every strict equivalence. Returns `TRUE` when the two items are equal. Should not be applied to `POSIXlt` or data frames with this object.\n\n-   `all.equal()` : compares two objects but with more room for difference. Returns `TRUE` when two items are equal. By default is a match between names and attributes of two data frames. Correct way to compare: `isTRUE(all.equal(df1, df2))`\n\n    -   `tolerance=` how different two numbers need to be to be declarated different.\n\n### View and Editing Data Frames\n\n-   `View()` : shows a dear-only representation of a data frame.\n-   `edit()` : allows change to be made. Can be saved to reflect the changes\n-   `data.entry()` : the changes are saved automatically.\n\n## Characters\n\n-   `length()`: extract how many elements are in it\n-   `nchar()`: we extract how many letters there are in each element. \n  -   `keepNA=FALSE` allow `nchar()` to count `NA` values returning 2 of length.\n-   `nzchar()`: returns TRUE for strings that have non-zero length and FALSE for empty strings.\n-   `trimws()`: remove blanks at the beginning and end of each element.\n\n\n\n-   `substring()` : given a vector extract the selected text.\n    -   `first=` position of the first character to extract\n    -   `last=` position of the last character up to 1 Million. Can be omitted to get the end of the string.\n\n\n\n-   `tolower(), toupper()`: perform convertion to lower or upper case.\n-   `casefold()` have to be passed the argument `upper=` being `TRUE` or `FALSE` which change to upper or lower case respectively.\n\n\n\n-   `chartr()`: substitutions. It takes two arguments that are vectors of characters and changes each character in the first argument into the corresponding character in the second argument.\n\n\n### Formatting Numbers\n\n-   `format()` : is a way to format a set of numbers in a common way. E.g. lining up decimal points and commas.\n    -   `digits=` number of digits\n    -   `nsmall=` number of digits (minimum) in the 'small' part (the right of the decimal point).\n    -   `big.mark=` determine the comma in the 'big' part (the thousand mark).\n    -   `drop0trailing` , removes trailing zeros in the small part.\n    -   `zero.print=` , if TRUE, causes zeros to be printed with spaces.\n\n\n-   `sprintf()`: have a format string containing text and conversion strings, which describe how numbers and other variables should appear in that output. A conversion strings start with a percent sign and contain modifiers and then a conversion character.\n  -   The conversion character `%i` or `%d` are for integer values, `%f` is for double-precision numerics, and `%s` is for character strings. This field can be formatted with two numbers separated by a period, the first one give the minimum width (total number of characters) and the second one is the number of digits to the right of the decimal points.\n\n```{r}\n# 8 characters, 2 decimals.\nsprintf ( \"%9.2f\", 1230.456789 )\n# 0 leading the character to fill with 0 until 8 characters.\nsprintf ( \"%09.2f\", 1230.456789 )\n# Like the previous one but with spaces\nsprintf ( \"% 9.2f\", 1230.456789 )\n# Always a simbol leading the number\nsprintf ( \"%+9.2f\", 1230.456789 )\n# Left Justified\nsprintf ( \"%-9.2f\", 1230.456789 )\n# exponential\nsprintf ( \"%9.3g\", 1230.456789 )\n```\n\nAlso we can use `sprintf()` with more than one vectors:\n\n```{r}\ncosts <- c(3, 22, 456.32, 89340.4235, 1230045605.959)\nsprintf ( \"I spent $%.0f in %s\", costs, month.name[2:6] )\n```\n\n### Discretizing a Numeric Variable\n\nDiscretizing is to construct a categorical version of a numeric vector with a few levels for exploration or modeling purposes, it is also called 'binning'.\n\n-   `cut()` : the arguments are the vector to be discretized and the breakpoints; optionally we can pass labels to be applied to the new levels. The result is a factor vector.\n    -   `include.lowest=` if `TRUE` will include the left endpoint to the binning. By default will not be included.\n    -   `right=` if `FALSE` makes intervals include their left end and exclude the right.\n    -   `breaks=` passing an `integer` will produce that number of bins with equal width.\n\n### Character Strings\n\n-   `paste()` , `paste0()` : sticks together two character vectors, and if its necessary convert them into a `character` vector first. By default it will insert a space between them.\n    -   `sep=` to choose the separation, e.g. `sep=\".\"` or `sep=\"\"` .\n    -   `collapse=` combines all the strings of the vector into one long string. It will use the separator specified by the value of this argument. e.g. `collapse=\"\"` or `=\"\\t\"` .\n\n```r\n# To combine year.month is also possible with substring() instead of format\ntable ( paste0 (format (rnd.dts, \"%Y\"), \".\", quarters(rnd.dts) ) )\n```\n\n\n-   `outer()` : given two vectors, performs another function on each pair of elements producing a matrix.\n-   `expand.grid()` : given vectors of values produces a data frame containing all combinations of all the values.\n\n\n## Regular Expressions\n\n`help(\"regex\")`\n\nFor regular expresson in R there are three primary tools which are `grep()`, `regexpr()` and `sub()`, all tree with its variants.\n\n-   `grep()` : given a pattern and a vector of strings, returns a numeric vector with the indices of the string that match the pattern.\n    -   `value=` if `TRUE` returns the matching string themselves.\n    -   `ignore.case=` if `TRUE` will ignore whether letters are in upper or lower-case.\n    -   `invert=` if `TRUE` reverses the search, returning the elements that not match. It's not available with `grepl()`\n    -   `fixed=` if `TRUE` suspends the rules about patterns and simply searches for an exact text string.\n    -   `perl=` if `TRUE` indicate to grep() to use Perl-type regular expressions.\n    -   `useBytes=` if `TRUE` the matching should be done byte by byte.\n-   `grepl()` : returns a logical vector indicating the elements that match.\n\n\n\n-   `.*` if we have leading text\n-   `[0-3]?[0-9]` matches a one digit number, the first digit is optional indicated by '?'\n-   `.*` again for additional text\n-   `(\", or.mon, \")` will be the variable with the month names separated by pipes `\"|\"`. The parenthesis make this a single pattern. The abbreviations will match a full name.\n-   `.*` more additional text\n-   `[1-2][0-9[{3}` four digits that have to start with 1 or 2\n\n\n\nThe function `regexpr()` is more precise than `grep()`, it will return the location of the first match within the string (number of the first character of the match). This information can be useful to extract the number itself and not only identify the string.\n\n\n\n-   `sub()` : replaces the first matching pattern.\n\n-   `gsub()` : replaces all the matching patterns.\n\n-   `strsplit()` : given a vector and a pattern splits the text producing a list with one entry for each string. Also has the fixed=TRUE argument to not use regular expressions.\n\n\n### Common Data Cleaning Task Using Regular Expressions\n\nBecause Regular Expressions are complicated be sure to document them well. For debugging there are online aids to diagnosing problems, be sure to specify regular expression type POSIX with GNI extensions or PCRE.\n\n\n#### Removing Leading and Trailing Spaces\n\n-   `\"^ *\"` : any string with leading spaces\n-   `\" *$\"` : any string with trailing spaces\n\n```{r}\ngsub ( \"^ *| *$\", \"\", c(\"  Text Spaces \", \"Trailing    \", \n                        \"None\", \"     Leading\" ) )\n```\n\n#### Format Currency to Numeric\n\nTaking into account $12,345.67 or 12,345.67€ we have to remove the symbol and the comma before converting into numeric.\n\n-   `\"\\\\$\"` : dollar symbol\n-   `\"\\\\€\"` : euro symbol\n-   `\"^[^0-9.]\"` : non-numeric leading character\n-   `\"[^[:digit:].]$\"` : non-numeric trailing character\n\n```{r}\nas.numeric ( gsub (\"(^[^0-9.]|,)|(,|[^[:digit:].]$)\",\n                   \"\", c(\"$12,345.67\", \"98,765.43€\") ) )\n```\n\n### UTF-8 and Other Non-ASCII Characters\n\n-   `Encoding()` : returns the encoding of the strings in a vector\n-   `iconv()` : to convert the encodings.\n\n# Factors\n\n-   `as.factor()`\n-   `levels()` : to check the levels in a factor vector and also to assign levels. This not change the underlying integer value corresponding that level.\n`factor()`: The levels can be reordered, this is useful for months and other levels that we want to have a custom order.\n\n**Do not try** to change the order with `levels()` function. In this case will change the levels of the elements itself, will not change 'only' the order.\n\n-   `addNA()` to add a level which is a NA value, but will be better to replace NA values\n\n\n\n# R Objects and Commands\n\n-   `get()` : accepts a character string and returns the object with that name.\n-   `exists()` : can test to see whether an object exists\n-   `get0()` : allow a value to be specified in place of the error.\n-   `ls()` : returns the names of the objects.\n-   `assing()` : given a name and a value creates a new R object. The argument `pos=1` at the command line has no effect, but inside a function it creates a variable in the Workspace.\n\n```{r}\nfor (i in 1:24)\n    assign (paste0 (LETTERS[i], c(month.abb,month.abb)[i] ), i, pos = 1 )\n\nlet.mon <- ls (pattern = \"^[A-Z]{2}?[a-z]{2}?\")\nlet.mon[3:6]\nsapply (let.mon, function(i) object.size(get(i)))\nremove (list = grep (\"^[A-Z]{2}?[a-z]{2}?\", ls(), value = T ) )\n```\n\n-   `parse()` : to create an R 'expression' object with `text` argument.\n-   `eval()` : executes the expression\n\n`eval(parse(text = \"log.11 <- log(11)\"))` : will create a variable called 'log.11'. The combination of `parse()` and `eval()` lets us construct R commands and execute them (allowing us to execute sequences of commands once we have created them with `paste()` and other tools).\n\n\n\n\n","srcMarkdownNoYaml":"\n\n# R-base\n\n-   `help()`: gets information on a particular R function, e.g. `help(matrix)`\n    -   `help(Syntax)`: returns the help of a list of operators   \n-   `?`: works the same as the previous one, e.g. `?\"matrix\"`\n-   `help.search()`: It's useful if we know the subject rather than the name.\n-   `apropos()`: returns a vector of names of objects containing that string, e.g. `apropos(\"matrix\")` returns every object with 'matrix' in its name.\n-   `args()`: displays the set of arguments expected by a given function.\n\n\n-   `which()`: convert logical vector into numeric. Returns the indices of the elements TRUE.\n\n\n\n-   `seq()`: create sequences. Principal arguments are: from, to and by.\n\n\n\n-   `names()`: to show or assign names to a vector\n\n\n\n-   `typeof()`\n-   `mode()`\n-   `str()`\n-   `class()`\n\n\n\n-   `is()`\n-   `is.logical()`\n-   `is.integer()`\n-   `is.numeric()`\n-   `is.character()`\n\nTypes: logical \\< raw \\< numeric \\< complex \\< character.\n\n-   `as.numeric()`\n-   `as.character()`\n-   `as.integer()`\n-   `as.logical()`\n-   `as.factor()`\n\n\n\n-   `anyNA()`: Returns TRUE if the vector contains NA values.\n-   `is.na()`: Returns TRUE for every field NA.\n  -   `where(is.na(vector))`to find the numeric indices of the missing elements.\n-   `na.omit()`: deletes the missing values but also keeps track of where in the vector they used to be. This information is stored in vector's 'attributes':\n  -   `attr(nay, \"na.action\")`\n-   `is.null()`: \n\n\n\n-   `table()`:\n  -   `useNA =`\n      -   `\"no\"` : default option. Exclude NA values.\n      -   `\"ifany\"` : show an entry for NA if there are any.\n      -   `\"always\"` : show an entry for NA whether there are any NA values or not.\n  -   `exclude =`\n      -   `c(NA, NaN)` : default option.\n      -   We can add a value of the vector to exclude, also we can pass `NULL`.\n-   `xtabs()`: for more complex table\n-   `prop.table()` : passing a variable with table assigned produces the proportions of the total counts in the table by cell (or row, or column). The second argument references 1 to rows, or 2 to columns.\n-   `margin.table()` : produce the marginals totals from a table.\n-   `addmargins()` : to a given table incorporates those totals producing a new row and column by default. Passing as second argument 1 or 2, you can specified if only wants rows or columns.\n\n\n\n-   `tapply()` : the arguments are, first the vector where perform the computation, second the vector with the index to group, and then the function to apply. To group with more than one vector (index) we can use a `list()`.\n\n\n\n### Rounding\n\n-   `round()` : to round a number with specific amount of decimals. Passing a negative number as second argument will round the nearest power of 10.\n-   `signif()` : retain a specific number of digits.\n-   `trunc()` : discards the decimal part returning an integer.\n-   `floor()` ; `ceiling()` : round to the next lower or higher integer respectively.\n\n### Sorting and Ordering\n\n-   `sort()` : sorting from smallest to largest. It will drop NA and NaN values by default.\n    -   `decreasing=TRUE` will reverse the order.\n    -   `na.last` will add NA values, TRUE at the end and FALSE at the beginning.\n-   `order()` : returns the indices which can be used to sort a vector.\n    -   `na.last` as TRUE by default. TRUE at the end and FALSE at the beginning.\n\n### Matching\n\n-   `%in%`: to find values that overlap between two vectors.\n-   `union()` : returns the elements in either passed vectors\n-   `intersect()` : returns the elements which are in both passed vectors\n-   `setdiff()` : returns the elements of 'a' not present in 'b'\n\n### Duplicates\n\n-   `anyDuplicated()` : returns the duplicated values in a vector\n-   `unique()` : returns the distinct values, including NA and NaN.\n-   `duplicated(`) : returns a logical vector with TRUE per duplicated value (not the first value).\n    -   `fromLast=TRUE` reads from the end to the beginning. Using union() you can combine `fromLast=TRUE` and `fromLast=FALSE` to identify all duplicates.\n-   `match()` : given two vectors returns where the element from 'a' is in 'b'. By default returns NA for no matches, we can change this with `nomatch=0` argument.\n-   `rle()`: 'Run length encoding'. Returns the number of repetitions and length.\n\n\n\nWith mathematical computations we can use `na.rm = TRUE` argument to compute the result after omitting missing values.\n\n-   `length()`:\n-   `sum()`:\n-   `mean()`:\n-   `sd()`:\n-   `min()`:\n-   `max()`:\n  -   `pmax()`: parallel maximum, shows the max of each par of values.\n-   `range()`:\n-   `summary()`:\n-   `colSums(), rowSums(), colMeans(), rowMeans()`\n\n\n-   `length()`: returns the total number of elements in the matrix\n-   `dim()`: returns the dimension, rows x columns\n-   `cbind()` : combines a set of vectors into a matrix column by column.\n-   `rbind()` : combines a set of vectors into a matrix row by row.\n-   `solve()`: inverts a matrix\n-   `t()`: transposes a matrix\n-   `aperm()`: to transpose higher-way arrays\n\n\n-   `dimnames()`: returns rows and columns names.\n-   `rownames()`:\n-   `colnames()`:\n\n\n\n-   `apply()` : Useful to apply a custom function.\n    -   first argument, the matrix to which apply the function.\n    -   The direction, 1 for across rows, 2 for down columns.\n    -   The function to be applied.\n    -   `apply(a, 2, function (x) sum (is.na(x)))`\n\n\n-   `which()`: returns a number of the position for each element.\n  -   `arr.ind=TRUE`: returns coordinates.\n  -   `which(is.na(a))`\n\n## Lists\n\n-   `list()` \n-   `split()` : divides a vector into pieces according to the value of another vector. Returns a list. Missing values in the second vector passed will be dropped.\n-   `length()`:returns the number of elements inside a list, and with `lengths()` function the length of each element.\n-   `str()`: returns a description of every element on the list:\n-   `unlist()` : try to turn the list into a vector:\n\n## Data Frames\n\n-   `data.frame()`\n  -   `stringAsFactors=FALSE`\n-   `head()` : return the first six rows of a given dataframe. Second argument is n=6 to specify a number of rows. A negative number returns the last n rows.\n-   `tail()` : return the last six rows of a given dataframe. Second argument is n=6 to specify a number of rows.\n-   `str()` : compact representation of the data frame with data type per column.\n-   `dim()` : returns the dimension, number of rows and columns.\n-   `summary()` : returns a brief description of each column.\n\n\n\n-   `is.na()` : returns a logical matrix showing which elements are missing.\n-   `anyNA()` : returns TRUE or FALSE to the question There are missing values?\n-   `na.omit()` : omit the observations (rows) of the data frame in which one or more elements is missing. Also keeps a track, we can see the deleted observations with `attr(df, \"na.action\") ; attr(df, \"class\")`.\n\n\n\n-   `lapply()` : returns a list\n-   `sapply()` : runs `lapply()` and tries to make the output into a vector or a matrix. But if the return have different lengths, it will need to return a list. If it try to return items with diferent types, will convert these to a common type, then its better in these case use `lapply()`.\n\n\n### Split, Apply, Combine\n\nFirst the data is split, then a function is applied to each piece, and the results recombined. The function `tapply()` do exactly that, but also we can use `split()` and `sapply()` or `lapply()`.\n\n-   `sapply (split (df2$Age, df2$Gender), mean)`\n-   `tapply(df2$Age, df2$Gender, mean)`\n\n\n\n-   `with()` : to perform operations on a data frame. First argument is the data frame, then the expression to be performed. Cannot be assigned to.\n  -   ` with ( CustPayment2016, JanDebt `FebPurch - FebPmt )`\n-   `within()` : works in the same wey but unlike `with()`, this function can be assigned.\n  -   `CustPayment2016 <- within ( CustPayment2016, FebDebt <- JanDebt + FebPurch - FebPmt )`\n\n### Re-Ordering, De-Duplicating, Sampling\n\n-   `order()`: to sort a vector or data frame:\n  -   `new.order <- with ( df, order (ID, Date) )`\n-   `sample()` : first argument is the number of total rows, the second argument is the size of the sample we want. By default the result is a random set of integers without replacement. The row number of sampled data frame will be the same that originals.\n\n## Date and Time Objects\n\n-   `as.Date()`: converts text into Date class.\n  -   `format=`\n    -   `%b ; %B` : name of the month\n    -   `%a ; %A` : name of the day of the week\n    -   `%d` : day of the month\n    -   `%m` : month in number\n    -   `%y ; %Y` : for the yy or YYYY year.\n    -   `%F` : Equivalent to %Y-%m-%d.\n    -   `%x` : Date. Locale-specific on output, `\"%y/%m/%d\"` on input.\n- `months()`, `weekdays()`, `quarters()` returns the month name, weekday and quarter from passing Date object.\n  -   `abbreviate=TRUE` argument to abbreviate the output.\n-   `format()`: To extract the numeric month, day or year\n\nThe difference between dates is a period of time stored as `difftime` object. Functions such as `mean()` and `range()` works well but `hist()` or `summary()` fails producing the expected results.\n\nUsually we will convert `difftime` objects to numeric with `as.numeric()` function, for that will be a good habit to specify `units = \"days\"` argument (with the unit we want.\n\n### POSIX\n\n`POSIXlt` object is implemented as a list, meanwhile `POSIXct` object is like a number useful is will be stored in a column.\n\n- `as.POSIXct()` and `as.POSIXlt()`\n\nThe time zone can be converted changing `tzone` attribute:\\\n`attr ( ct1, tzone = \"UTC\" )`.\nThe help of `Sys.timezone()` containing the names of the time zones.\n\n-   `diff()` : computes differences between adjacent elements in a vector.\n-   `table()`: does not work on `POSIXlt` (list) objects.\n-   `seq()`: it can be specified `by=\"day\"` argument\n\n### Combining\n\n-   `intersection()`: useful for check duplicated column names\n-   `make.names()`: to generate unique column names\n-   `all.equal()` : compares two objects and returns TRUE if the match. Also returns a report if there are differences.\n-   `isTRUE()` : returns TRUE if its argument is a single TRUE (expected for `all.equal()` ) or FALSE if there are something else.\n\n\n\n-   `do.call()`: takes the name of a function to be run and a list of arguments and run the function with those arguments-\n  -   `do.call ( \"rbind\", list.of.df )`\n  \n\n\n-   `merge()` arguments:\n\n    -   `(all.x=FALSE, all.y=FALSE)` : default options. One row for each key that appears in bot x and y data frames (except when there are duplicated keys). Is an `'inner join'`.\n    -   `(all.x=TRUE, all.y=FALSE)` : One row for each key in x and columns of the corresponding keys that do not appear in y are filled with NA values. Is an `'left join'`.\n    -   `(all.x=FALSE, all.y=TRUE)` : Is the complementary one, an '`right join`'.\n    -   `(all.x=TRUE, all.y=TRUE)` : This id the '`outer join`', when the result has one row for every key in either x or y.\n\nIf the key match approximately (people names) the functions `adist()` and `agrep()` help find keys that match approximately.\n\n### Comparing Data Frames\n\n-   `identical()` : test for every strict equivalence. Returns `TRUE` when the two items are equal. Should not be applied to `POSIXlt` or data frames with this object.\n\n-   `all.equal()` : compares two objects but with more room for difference. Returns `TRUE` when two items are equal. By default is a match between names and attributes of two data frames. Correct way to compare: `isTRUE(all.equal(df1, df2))`\n\n    -   `tolerance=` how different two numbers need to be to be declarated different.\n\n### View and Editing Data Frames\n\n-   `View()` : shows a dear-only representation of a data frame.\n-   `edit()` : allows change to be made. Can be saved to reflect the changes\n-   `data.entry()` : the changes are saved automatically.\n\n## Characters\n\n-   `length()`: extract how many elements are in it\n-   `nchar()`: we extract how many letters there are in each element. \n  -   `keepNA=FALSE` allow `nchar()` to count `NA` values returning 2 of length.\n-   `nzchar()`: returns TRUE for strings that have non-zero length and FALSE for empty strings.\n-   `trimws()`: remove blanks at the beginning and end of each element.\n\n\n\n-   `substring()` : given a vector extract the selected text.\n    -   `first=` position of the first character to extract\n    -   `last=` position of the last character up to 1 Million. Can be omitted to get the end of the string.\n\n\n\n-   `tolower(), toupper()`: perform convertion to lower or upper case.\n-   `casefold()` have to be passed the argument `upper=` being `TRUE` or `FALSE` which change to upper or lower case respectively.\n\n\n\n-   `chartr()`: substitutions. It takes two arguments that are vectors of characters and changes each character in the first argument into the corresponding character in the second argument.\n\n\n### Formatting Numbers\n\n-   `format()` : is a way to format a set of numbers in a common way. E.g. lining up decimal points and commas.\n    -   `digits=` number of digits\n    -   `nsmall=` number of digits (minimum) in the 'small' part (the right of the decimal point).\n    -   `big.mark=` determine the comma in the 'big' part (the thousand mark).\n    -   `drop0trailing` , removes trailing zeros in the small part.\n    -   `zero.print=` , if TRUE, causes zeros to be printed with spaces.\n\n\n-   `sprintf()`: have a format string containing text and conversion strings, which describe how numbers and other variables should appear in that output. A conversion strings start with a percent sign and contain modifiers and then a conversion character.\n  -   The conversion character `%i` or `%d` are for integer values, `%f` is for double-precision numerics, and `%s` is for character strings. This field can be formatted with two numbers separated by a period, the first one give the minimum width (total number of characters) and the second one is the number of digits to the right of the decimal points.\n\n```{r}\n# 8 characters, 2 decimals.\nsprintf ( \"%9.2f\", 1230.456789 )\n# 0 leading the character to fill with 0 until 8 characters.\nsprintf ( \"%09.2f\", 1230.456789 )\n# Like the previous one but with spaces\nsprintf ( \"% 9.2f\", 1230.456789 )\n# Always a simbol leading the number\nsprintf ( \"%+9.2f\", 1230.456789 )\n# Left Justified\nsprintf ( \"%-9.2f\", 1230.456789 )\n# exponential\nsprintf ( \"%9.3g\", 1230.456789 )\n```\n\nAlso we can use `sprintf()` with more than one vectors:\n\n```{r}\ncosts <- c(3, 22, 456.32, 89340.4235, 1230045605.959)\nsprintf ( \"I spent $%.0f in %s\", costs, month.name[2:6] )\n```\n\n### Discretizing a Numeric Variable\n\nDiscretizing is to construct a categorical version of a numeric vector with a few levels for exploration or modeling purposes, it is also called 'binning'.\n\n-   `cut()` : the arguments are the vector to be discretized and the breakpoints; optionally we can pass labels to be applied to the new levels. The result is a factor vector.\n    -   `include.lowest=` if `TRUE` will include the left endpoint to the binning. By default will not be included.\n    -   `right=` if `FALSE` makes intervals include their left end and exclude the right.\n    -   `breaks=` passing an `integer` will produce that number of bins with equal width.\n\n### Character Strings\n\n-   `paste()` , `paste0()` : sticks together two character vectors, and if its necessary convert them into a `character` vector first. By default it will insert a space between them.\n    -   `sep=` to choose the separation, e.g. `sep=\".\"` or `sep=\"\"` .\n    -   `collapse=` combines all the strings of the vector into one long string. It will use the separator specified by the value of this argument. e.g. `collapse=\"\"` or `=\"\\t\"` .\n\n```r\n# To combine year.month is also possible with substring() instead of format\ntable ( paste0 (format (rnd.dts, \"%Y\"), \".\", quarters(rnd.dts) ) )\n```\n\n\n-   `outer()` : given two vectors, performs another function on each pair of elements producing a matrix.\n-   `expand.grid()` : given vectors of values produces a data frame containing all combinations of all the values.\n\n\n## Regular Expressions\n\n`help(\"regex\")`\n\nFor regular expresson in R there are three primary tools which are `grep()`, `regexpr()` and `sub()`, all tree with its variants.\n\n-   `grep()` : given a pattern and a vector of strings, returns a numeric vector with the indices of the string that match the pattern.\n    -   `value=` if `TRUE` returns the matching string themselves.\n    -   `ignore.case=` if `TRUE` will ignore whether letters are in upper or lower-case.\n    -   `invert=` if `TRUE` reverses the search, returning the elements that not match. It's not available with `grepl()`\n    -   `fixed=` if `TRUE` suspends the rules about patterns and simply searches for an exact text string.\n    -   `perl=` if `TRUE` indicate to grep() to use Perl-type regular expressions.\n    -   `useBytes=` if `TRUE` the matching should be done byte by byte.\n-   `grepl()` : returns a logical vector indicating the elements that match.\n\n\n\n-   `.*` if we have leading text\n-   `[0-3]?[0-9]` matches a one digit number, the first digit is optional indicated by '?'\n-   `.*` again for additional text\n-   `(\", or.mon, \")` will be the variable with the month names separated by pipes `\"|\"`. The parenthesis make this a single pattern. The abbreviations will match a full name.\n-   `.*` more additional text\n-   `[1-2][0-9[{3}` four digits that have to start with 1 or 2\n\n\n\nThe function `regexpr()` is more precise than `grep()`, it will return the location of the first match within the string (number of the first character of the match). This information can be useful to extract the number itself and not only identify the string.\n\n\n\n-   `sub()` : replaces the first matching pattern.\n\n-   `gsub()` : replaces all the matching patterns.\n\n-   `strsplit()` : given a vector and a pattern splits the text producing a list with one entry for each string. Also has the fixed=TRUE argument to not use regular expressions.\n\n\n### Common Data Cleaning Task Using Regular Expressions\n\nBecause Regular Expressions are complicated be sure to document them well. For debugging there are online aids to diagnosing problems, be sure to specify regular expression type POSIX with GNI extensions or PCRE.\n\n\n#### Removing Leading and Trailing Spaces\n\n-   `\"^ *\"` : any string with leading spaces\n-   `\" *$\"` : any string with trailing spaces\n\n```{r}\ngsub ( \"^ *| *$\", \"\", c(\"  Text Spaces \", \"Trailing    \", \n                        \"None\", \"     Leading\" ) )\n```\n\n#### Format Currency to Numeric\n\nTaking into account $12,345.67 or 12,345.67€ we have to remove the symbol and the comma before converting into numeric.\n\n-   `\"\\\\$\"` : dollar symbol\n-   `\"\\\\€\"` : euro symbol\n-   `\"^[^0-9.]\"` : non-numeric leading character\n-   `\"[^[:digit:].]$\"` : non-numeric trailing character\n\n```{r}\nas.numeric ( gsub (\"(^[^0-9.]|,)|(,|[^[:digit:].]$)\",\n                   \"\", c(\"$12,345.67\", \"98,765.43€\") ) )\n```\n\n### UTF-8 and Other Non-ASCII Characters\n\n-   `Encoding()` : returns the encoding of the strings in a vector\n-   `iconv()` : to convert the encodings.\n\n# Factors\n\n-   `as.factor()`\n-   `levels()` : to check the levels in a factor vector and also to assign levels. This not change the underlying integer value corresponding that level.\n`factor()`: The levels can be reordered, this is useful for months and other levels that we want to have a custom order.\n\n**Do not try** to change the order with `levels()` function. In this case will change the levels of the elements itself, will not change 'only' the order.\n\n-   `addNA()` to add a level which is a NA value, but will be better to replace NA values\n\n\n\n# R Objects and Commands\n\n-   `get()` : accepts a character string and returns the object with that name.\n-   `exists()` : can test to see whether an object exists\n-   `get0()` : allow a value to be specified in place of the error.\n-   `ls()` : returns the names of the objects.\n-   `assing()` : given a name and a value creates a new R object. The argument `pos=1` at the command line has no effect, but inside a function it creates a variable in the Workspace.\n\n```{r}\nfor (i in 1:24)\n    assign (paste0 (LETTERS[i], c(month.abb,month.abb)[i] ), i, pos = 1 )\n\nlet.mon <- ls (pattern = \"^[A-Z]{2}?[a-z]{2}?\")\nlet.mon[3:6]\nsapply (let.mon, function(i) object.size(get(i)))\nremove (list = grep (\"^[A-Z]{2}?[a-z]{2}?\", ls(), value = T ) )\n```\n\n-   `parse()` : to create an R 'expression' object with `text` argument.\n-   `eval()` : executes the expression\n\n`eval(parse(text = \"log.11 <- log(11)\"))` : will create a variable called 'log.11'. The combination of `parse()` and `eval()` lets us construct R commands and execute them (allowing us to execute sequences of commands once we have created them with `paste()` and other tools).\n\n\n\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"output-file":"99_summary.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.555","bibliography":["../../references.bib"],"editor":"visual","tabset":true,"theme":{"light":["cosmo","../../style/style.scss"],"dark":["cosmo","../../style/dark.scss"]},"title":"Base-R Summary"},"extensions":{"book":{"multiFile":true}}},"pdf":{"identifier":{"display-name":"PDF","target-format":"pdf","base-format":"pdf"},"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","output-file":"99_summary.pdf"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"block-headings":true,"bibliography":["../../references.bib"],"editor":"visual","documentclass":"scrreprt","title":"Base-R Summary"},"extensions":{"book":{"selfContainedOutput":true}}}},"projectFormats":["html","pdf"]}