---
title: "Enchanced Visualizations"
---

# Introduction to `ggplot2`

```{r message=FALSE, warning=FALSE}
library(tidyverse)
library(datasets)
library(patchwork)
data("mtcars")
```

## The grammar of graphics

-   Data: the dataset to use
-   Geometry: the type of graphic to be plotted. 
-   Aesthetics: Are what are to be seen in a plot. x axis, y axis, color, fill, shape, opacity, width and line type.
-   Statistics: graphics where there is a need to indicate the number of bins, regression type...
-   Coordinates: Cartesian or Polar coordinates. The x and y Cartesian coordinates by default will be used.
-   Facets: to plot multiple graphics for different groups.
-   Themes: are the preset configurations such as background color, grid, fonts... 

## Basic syntax of ggplot2

The basic syntax follows the order:

1.  What is the dataset to be used?
2.  What kind of graphic will be plotted?
3.  What goes on the X axis and Y axis?
4.  What is the graphic title?

```r
ggplot(data = df) +     # data set to use
    geom_point(         # type of grapth to plot 
    mapping = aes( x = X, y = Y) ) +        # Aesthetics
    ggtitle("Title")    # Title
```

## Plot types

### Histograms

-   `geom_histogram()`

```{r}
ggplot(mtcars) +
    geom_histogram(
        mapping = aes( x = mpg ), 
        bins = 20,
        color = "lightblue",
        fill = "darkblue",
        alpha = 0.6
    ) +
    ggtitle( "Whistogram of Miles per Gallon" )
```

### Boxplot

-   `geom_boxplot()`

For univariate plots it required only one axis. For multivariate the categories could be on X.

```{r}
ggplot( data = mtcars ) +
    geom_boxplot( aes( y = mpg ), fill = "lightblue", color = "darkblue" ) +
    ggtitle( "Boxplot of miles per gallon")
```

```{r}
ggplot( mtcars ) +
    geom_boxplot( aes( x = factor(am),
                       y = mpg ), fill = "lightblue" ) +
    labs( x = "Transmission",
          title = "Comparison betweeen automatic and manual transmission on MPG",
          subtitle = "The median of manual cars (1) is higher" )
```

### Scatterplot

-   `geom_point()`

Useful for see relationships between variables and correlations.

```{r}
ggplot( data = mtcars ) +
    geom_point( aes( x = wt, y = mpg ),
                color = "darkblue",
                size = 4,
                shape = 15, # squares
                alpha = 0.7 ) +
    labs ( x = "Weight of the cars",
           y = "Milles per Gallon",
           title = "How the weight affects MPG in cars?",
           subtitle = "As the weight increases, the car will maje less MPG")
```

### Barplots

-   `geom_bar()`
-   `stat_summary()`: alternative to geom_bar(), given the aesthetics, function and geometry to use.
-   `geom_col()`: requires x and y axes. It will return the bars with the summed y-axis by category.

Useful for categorical variables to show counts or values.

```{r}
ggplot( mtcars ) +
    geom_bar( aes( x = factor(am),
                   fill = factor(am) ) ) +      
                 # Fill in 'aes' using the same factor means color per category
    labs( x = "Automatic(0) | Manual(1)" ) +
    ggtitle( "Count of observations by transmission type" )
```

```{r}
ggplot( mtcars ) +
    geom_bar( aes( x = factor(am), 
                   y = mpg,
                   fill = factor(am) ),
              stat = "summary", fun = "mean" ) # To use the mean on 'y' axis
```
```{r}
ggplot( mtcars ) +
    stat_summary( aes( x = factor(am),
                       y = mpg,
                       fill = factor(am) ), 
                  fun = "mean",
                  geom = "bar" )
    # Alternative to the previous graphic
```
```{r}
ggplot( mtcars ) +
    geom_col( aes( x = factor(am),
                   y = mpg,
                   fill = factor(am) ) ) +
    labs( x = "Automatic(0) | Manual(1)" )
```

```{r}
ggplot( mtcars ) +
    geom_bar( aes( x = factor(cyl), fill = factor(vs) ),
              position = "stack" )
ggplot( mtcars ) +
    geom_bar( aes( x = factor(cyl), fill = factor(vs) ),
              position = "dodge" )
ggplot( mtcars ) +
    geom_bar( aes( x = factor(cyl), fill = factor(vs) ),
              position = "fill" )

```

### Line plots

-   `geom_line()`

Useful to show progression over time.

```{r}
df.line <- data.frame(
    month = seq(1, 12, 1),
    sales = rlnorm(12),
    sales2 = rgamma(12, 1)
)
df.line[1:5,]
```

```{r}
ggplot( df.line ) +
    geom_line( aes( x = month,
                    y = sales,
                    group = 1),
               linewidth = 1,
               color = "darkblue" ) +
    ggtitle( "Car sales throughout the months")
```
```{r}
ggplot( df.line ) +
    geom_line( aes( x = month,
                    y = sales,
                    group = 1,
                    color = "Sales year 1"), # the label for this line
               linewidth = 1,
               linetype = 2) +
    geom_line( aes( x = month,
                    y = sales2,
                    group = 1,
                    color = "Sales year 2"),
               linewidth = 1,
               linetype = 1) +
    ggtitle( "Car sales throughout the monts" ) +
    labs( subtitle = "Two year comparison",
          color = "Sales Year") # The title for the legend
```

### Smooth geometry

-   `geom_smooth()`
  -   `method=` by default polynomial function (`loess`). There are also linear regression (`lm`) generalized additive models (`gam`), robust linear models (`rlm`) and generalized linear models (`glm`).

It calculates a line that helps to see a trend in the points, using linear regression, polynomial regression or a general linear model.

```{r}
ggplot( mtcars ) +
  geom_point( aes( x = hp,
                   y = mpg,
                   color = factor(vs) ) ) +
  geom_smooth( aes( x = hp,
                    y = mpg ),
               method = 'loess' )
```

We can add `aes()` to `ggplot()` to be more efficient.

```{r}
ggplot( mtcars, aes( x = hp, y = mpg ) ) +
  geom_point( aes( color = factor(vs) ) ) +
  geom_smooth( method = 'loess' )
```

### Themes

-   `theme_bw(), theme_classic(), theme_light(), theme_dark(), theme_gray(), theme_linedraw(), theme_minimal(), and theme_void()`

Can be added to the visualization plot to change the preset visual configuration. Let's see how looks the last visualization:

```{r}
ggplot( mtcars, aes( x = hp, y = mpg ) ) +
  geom_point( aes( color = factor(vs) ) ) +
  geom_smooth( method = 'loess' ) +
  theme_bw()
ggplot( mtcars, aes( x = hp, y = mpg ) ) +
  geom_point( aes( color = factor(vs) ) ) +
  geom_smooth( method = 'loess' ) +
  theme_minimal()
ggplot( mtcars, aes( x = hp, y = mpg ) ) +
  geom_point( aes( color = factor(vs) ) ) +
  geom_smooth( method = 'loess' ) +
  theme_linedraw()
```

## Useful links

Cheatsheet:

https://github.com/rstudio/cheatsheets/blob/4ee6c2f03a32478560f927834af25c13c899a0a2/data-visualization.pdf

Adding labels to a graph with `geom_text()`:

https://r-graphics.org/recipe-bar-graph-labels

# Enchanced Visualizations `ggplot2`

```{r message=FALSE, warning=FALSE}
library(tidyverse)
library(lubridate)
library(datasets)
library(patchwork)
library(plotly)
data("diamonds")
```

## Facet grids

Facet grids to generate multiple graphics on a matrix.

-   `facet_grid()`: to divide the visualization
-   `facet_wrap()`: forces the subplots into a rectangular matrix
-   `vars()`: it is needed to pass the variables which will divide the `facet_grid()` or `facet_wrap()`.

```{r}
df.diam <- diamonds

ggplot( df.diam ) +
  geom_point( aes( x = carat, y = price, 
                   color = factor(cut), alpha = 0.5) )
```
```{r}
ggplot( df.diam ) +
  geom_point( aes( x = carat, y = price,
                   color = factor(cut),
                   alpha = 0.5 ) ) +
  facet_grid(rows = vars(cut) ) +
  theme( legend.position = "none" )
```

```{r}
ggplot( df.diam ) +
  geom_point( aes( x = carat, y = price,
                   color = cut, alpha = 0.6 ) ) +
  facet_grid( rows = vars(cut), cols = vars(clarity) ) +
  theme_minimal() +
  theme( legend.position = "none")
```

```{r}
g <- ggplot( df.diam ) +
  geom_point( aes( x = carat, y = price,
                   color = factor(cut),
                   alpha = 0.5 ) ) +
  facet_grid(rows = vars(cut) ) +
  theme_minimal() +
  theme( legend.position = "none" )
g + facet_wrap( vars(cut) )
```

## Map plots

This section will be a slightly view to the capabilities of ggplot2 with spatial data analysis.

-   geom_map()

The first thing to do is to load the map to an object. Then we have to map the locations of state capitals.

```{r}
# Load the map
us <- map_data("state")

# Load the dataset:
url <- "https://raw.githubusercontent.com/PacktPublishing/Data-Wrangling-with-R/main/Part3/Chapter11/USA_states.csv"
states <- read_csv(url)
remove(url)
```
```{r}
# 'state' column to lowercase
states <- states %>% mutate( state = str_to_lower(state) )

# Map locations
us_map <- ggplot( states ) +
  geom_map( aes( longitude, latitude,
                 map_id = state),
            map = us, color = "black", fill = "azure" ) +
  xlim(-130, -60) +
  ylim(20,55) +
  theme_void()

us_map +
  geom_point( aes( x = longitude,
                   y = latitude,
                   size = GDP,
                   fill = GDP),
              shape = 24 )
```

The `xlim()` and `ylim()` center the map to the states, there are other two points out of the map.

## Time series plots

Line plots may be the best type of graph to visualize a time series which is a sequence of days, months or other kind of time frame.

We will add to the plot `scale_x_date()` to create x-tics with the dates. Can be limited to make a 'close up' in a month with `limit=` argument, for example. With the argument `date_breaks()` it can be specified when we want a tick, the `date_labels=` argument to specified the format of date to print.

```{r}
df.time <- data.frame(
  date = seq(ymd('2022-01-01'), ymd('2022-06-30'), by = 'days'),
  measure = as.integer(runif(181, min = 600, max = 1000) +
    sort( rexp( 181, 0.001 ) ) )
)
head(df.time)
```
```{r}
basic.plot <- ggplot( df.time ) +
  geom_line( aes( x = date, y = measure ), size = 0.8 ) +
  theme_minimal()
basic.plot
```
```{r}
basic.plot + 
  scale_x_date(date_breaks = "4 weeks", date_labels = "%W %y")
```
```{r}
basic.plot + 
  scale_x_date(date_breaks = "1 weeks", date_labels = "%d %m",
               limit=as.Date( c("2022-05-01", "2022-06-01") ) )
```

## 3D Plots

The classic 2d plot will be the best option, however a 3D graphic could create a good impression to the audience. Sometimes a 3D graph can be useful, with surface graphics which represents the surface of a place. Also when two variables are very close to each other and the separation may happen in other dimension.

-   `plot_ly()`: from `plotly` library.

```{r}
# Surface 3D plot
surface <- matrix( as.integer( sort( abs( runif(160, 90, 180) ) ) ),
                   nrow = 80, ncol = 20 )

plot_ly(z = ~ surface) %>% add_surface()
```

```{r}
# 2D and 3D comparison

var1 = rnorm(20, mean = 25, sd = 5 )
var2 = var1 + rgamma(20,1)

df.2d3d <- data.frame( var1 = var1,
                       var2 = var2,
                       var3 = 1:20,
                       var4 = rep( c("A", "B"), each = 10) )

## plot 2d

ggplot(df.2d3d) +
    geom_point( aes( x = var1, y = var2, color = var4 ) )

```
```{r}
# Plot 3d

plot_ly( df.2d3d, x = ~var1, y = ~var2, z = ~var3,
         color = ~var4, colors = c("turquoise", "coral") ) %>%
    add_markers()   # To add the points
```

Just that, these are the two type of 3D graphs recommended, otherwise the third dimension could add more complexity to the interpretation of the data specially with comparisons. Then, 3D graphs are not good when precision is required.

## Adding interactivity to graphics

Combining `ggplot2` graphs with `plotly` it will add some interaction with the visualization.

Using one of the plots used before, this is how looks like adding interactivity:

-   `ggplotly()`: passing the `ggplot()` code will add interaction.

```{r}
ggplotly(
    
    ggplot( df.diam ) +
  geom_point( aes( x = carat, y = price, 
                   color = factor(cut), alpha = 0.5) )
  
)
```

Now, hovering the points we obtain the corresponding values.

PD: this last visualization with `ggplotly()` consumes a lot of computer's resources.

## Useful links

-   Maps with ggplot2: https://ggplot2-book.org/maps.html
-   plotly R: https://plotly.com/r/
-   Time series: https://r-graph-gallery.com/279-plotting-time-series-with-ggplot2.html

# Other Data Visualization Options

```{r}
library(tidyverse)
library(wordcloud2)
library(officer)
library(tidytext)
```

## Plotting graphics in Microsoft Power BI

Sometimes we will need a custom visualization for Power BI, then we can plot a ggplot2 graphic in Power BI which it will give us more flexibility.

```{r}
var1 = rnorm(200, mean = 25, sd = 5)
var2 = var1 + rnorm(200, mean = 25, sd = 15)

df.pwbi <- data.frame( var1 = var1,
                       var2 = var2,
                       var3 = 1:200,
                       var4 = rep( c("A", "B", "C", "D"), each = 50) )

write_csv(df.pwbi, "../data/r2pwrbi.csv")
```

Once we have the dataset imported to Power BI, when we click on the 'R' button on the visualizations side panel will show a pop-up to *Enable script visuals*.

It will appear a box on the dashboard, there we drop variables which we want to work. To do an histogram we drop only one. Once we do that, on the bottom field the 'R script editor' will be enabled.

-   Power BI will use 'dataset' variable name to hold the data.frame object with all the variables we drop on the plotting area.
-   It will remove duplicates entries.
-   The code it shown is commented for our information but is executed in background.

Let's try an histogram, for that I will use this code:

```{r}
dataset <- df.pwbi
library(ggplot2)

ggplot(dataset) +
    geom_histogram( aes(var1), bins = 10, 
                    color = "azure", fill = "darkblue") +
    labs( title = "Histogram of Variable 1",
          subtitle = "Random variable visualization on Power BI") +
    theme_minimal()
```

Once is written, just click 'Run script' and if its compatible, it will be shown.

# Preparing Data for plotting

Since there are many kind of graphics and its variables, the data scientist have to munge the data to fit a specific format to plot in.

A word cloud is a graphical representation of the most frequent words in a text and now we will learn how to prepare a text to be potted as a word cloud. First it'll be necessary to transform the text which has no rows or columns of data. Then the `wordcloud2` library expect a data.frame with the words and frequency.

```{r}
library(tidyverse)
library(wordcloud2)
library(officer)
library(tidytext)
```

The library officer allow us to read .docx with read_docx() and then docx_summary() returns a data.frame object of that.

```{r}
doc.text <- read_docx("../data/Chapter10_for_wordcloud.docx")
content <- docx_summary(doc.text)
head(content)
```

Our interest is 'text' variable to extract all the text of the chapter. We're going to drop the white fields after convert them in NA. Then we could convert this new 'text' objecto into a tibble because the tiny libraries work better with that type of object.

```{r}
text <- content %>% 
    select(text)

text <- na_if(text[["text"]], "")

text <- tibble(text)

text <- text %>% drop_na()
```

Tokenize the text is common in the natural language processing (NLP) area. The objective is break down the text into a minimal unit that carries a meaning.

-   `unnest_tokens()` will tokenize the text, passing `output=` argument with `word` in it. The input= argument will be the tibble with text. Returns a single column tibble.

The transformations that will perform are very common in text mining.

```{r}
text.tokens <- text %>%
    unnest_tokens( output = word, input = text )
text.tokens %>% head()
```

Now we need to clean the text, removing numbers and punctuation.

```{r}
text.tk.clean <- text.tokens %>%
    filter( str_detect(word, "\\D") )

text.tk.clean <- text.tk.clean %>%
    filter( !str_detect(word, "[:punct:]"))
```

Next step is to remove *stop words* which do not carry any meaning for the text (conjunctions, prepositions, pronouns). We can load an object with the stop words `data(stop_words)` and perform an `anti_join()` to avoid this words. The last thig to do is to add a frequency column.

```{r}
data(stop_words)

text.tk.clean <- text.tk.clean %>%
    anti_join(stop_words)

word.freq <- text.tk.clean %>%
    count(word, sort = TRUE)

head(word.freq, 10)
```

This resulting dataset is what we need to create a word cloud.

## Creating word clouds

```{r}
wordcloud2(data = word.freq, color = "random-dark", size = 1)
```

## Useful links

-   Text mining: https://www.tidytextmining.com/tidytext.html 
-   PowerBI visuals with R: https://learn.microsoft.com/en-us/power-bi/create-reports/desktop-r-visuals


















