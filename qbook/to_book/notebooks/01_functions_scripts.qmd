---
title: "Functions, scripts and performance"

---

# Writing Functions and Scripts

To accomplish repetitive task in data cleaning we are use functions and scripts.

## Functions

A function starts with the reserved word `function`. Continue with a a list of arguments inside parentheses. Then the body of the function enclosed in braces. 

```{r}
sqplus <- function (x, y = 2) {
    # y default value is 2
    # Args: x, numeric;
    #       y, numeric;
    if (x < 0) {
        warning ("Negative number cannot be operated")
        return (NA)
    }
    return (sqrt (x) + y)
}
# Trying the new function 'sqplus'
sqplus (x=9, y=3)
```

The ellipsis `(...)` is a special type of argument which captures all of the arguments that are not matched. If the ellipsis is the first argument, the rest of arguments have to match by name, without abbreviation. The `missing()` function returns `TRUE` if an argument is missing. When it is used inside a function should be located near the beginning. For example, if 'arg' gets assigned in code, then `missing(arg)` will be `FALSE.`

A *local variable* is one that exists inside the created function, stored in a special area of memory by R. The *global variables* are in the workspace. It should be avoided to use the created variable of the workspace into functions, because it can change, otherwise the built-in variables (pi or letters) it's OK. 

The *return value* is the result of the computation done by the function. A function returns whatever is inside the first call to `return()`; when `return()` is missing, the function returns whatever the last line it executes produces. The return can be hidden with `invisible()` command, but if you assign the output, the return value will be stored.

To create functions R provides with `fix()` function which open an editor to write that new function. If the passing function name with `fix()` already exists it will open the existing function for editing. When it saves, R checks to see if the new version of the function has no errors. If there is an error you can use `edit()` function (immediately after encountering an error) without argument to operate on the most recently edited function.

Using the `dump()` command creates a disk file with the exact text of the function. The first argument for `dump()` is a vector of the names of the items to be dumped, and the second argument is the file name ( `dump("func1", "func1.txt")` ). Once is on disk, it can be read with `source()` which also executes the code in your R session ( `source("func1.txt")` ). Also, if the function already exists, it will overwrite the function.

When we want to save complicated objects, the function `saveRDS()` will save on disk a binary file with that objects data and attributes ( `saveRDF(robj, "robjfile")` ). The, with `readRDS()` function returns the object just as it was saved, it won't replace the object, simply returns it.

And finally, `save()` function operates on sets of objects passing the object's names in quotation marks. The complementary function is `load()` and re-creates the items specified at the time the file was created, with their original names (R will over-write existing objects with that names).

## Scripts

A **script** (created under 'File/New file/R Script') contain R commands, comments, musings, invalid code for fixing... Usually, the script will be visible in a separate windows as interactive usage. The commands can be run by line with 'Control+Enter' where the mouse is, or selecting some lines. 

The scripts store a lot of the commands to use and often are run bit by bit interactively. If a line have an error, R will continue running all the commands. Also we can run a script all at one with the `source()` function and only the commands prior to the error are executed. 

A **shell script** is useful in a production environment where a specific task needs to be performed frequently. It is intended to be run a.l at once, not as part of an interactive session. Also can be run with `source()`. A script run with R, meanwhile a shell script run from a command line without having to open R.

The program 'Rscript' run shell scripts which the first line specify `#!Rscript` . Once the run is finished, returns to the command line. Normally are useful for produce output files, graphics, informative messages. With the command `Rscript --help` will show options when running shell scripts.

In a script a function is an entire unit but a script run line by line:

```r
# Function that will fail
if (i > 100)
    x <- x + 200
else
    x <- x - 200
```

The functions have to be 'protected' with brace. Here the second line does not end the expression because there is still an open brace:

```r
if (i > 100) {
    x <- x + 200
} else {
    x <- x - 200
}
```

What to do? Well, functions use local variables and when it's saved R examine the functions for errors; also it has to run all at once. Scripts can be run line by line and passed as text files; however they only create global variables, and then can over-write exiting objects.

## Error Handling

### Debugging with `cat()`

Insert `cat()` statements into the code at strategic locations to print results. When you see an error inserting before a `cat()` function to check the previous results is a good idea, and also labeling the statements to know where they are placed.

If you have a loop variable you can use `if(i %% 100 == 0) cat("We're on rep n ", i, "\n")` which will print a line every 100 iterations.

### Debugging with `traceback()`, `browser()` and `debug()`

When we don't know where the error is (can be nested or whatever) a call to `traceback()` show the sequence of function calls that led to the error. For advance users, the `recover()` function lists the set of calls and starts a browser session in the one that the user selects.

When a function or script encounters a call to `browser()`, it pauses and produce a prompt:

```r
Browse[1]> 
```

The `[1]` indicates that was called at the command line; `[2]` for a function called by a function; higher values for more nested function calls. There we can type the name of an object to display it, enter other function calls, create local variables... Usually it is used to display or modify the values of variables in the function. Also `browser()` has special commands:

-   `c` : continue, resume running.
-   `s` : step, go to the next statement (also inside other functions).
-   `n` : next, go to the next statement.
-   `f` : finish, to finish the loop or function.
-   `Q` : quit the browser.

Inside a function with `ls()` we ca see only the local variables of that function, and to see the global variables is `ls(pos = 1)`.

In a script we can use `verbose=` as an argument and as part of the script to print different messages. Also can be added an argument called `browse=` that specifies where calls to `browser()` might be made (but ensure by default is `FALSE`). If `verbose=` is `TRUE` or with a specific number it will print some messages while the script runs:

```r
process_file <- function(fname, verbose = 0) {

  if (verbose >= 1) {
    cat("Now operating on file", fname, "\n")
  }
  
  # Rest of the code
  # ...
  
  if (verbose >= 2) {
    cat("Detailed diagnostics: Finished processing file", fname, "\n")
  }
  
}

# Function with different verbose levels
process_file("data.csv", verbose = 1)
process_file("data.csv", verbose = 2)

```

Finally, `debug()` function labels a function to be 'browsed' whenever it runs. This persists until `undebug()` remove the label; and with `debugonce()` label a function for just once run. Debugging produce the browser prompt, save us to include the explicit call to `browse()` inside a function.

### Issuing Error and Warning Messages

Wherever the function `stop()` is it will stop the function and print a message. A common function of `stop()` is to test whether the arguments are of the expected type. The `stopifnot()` function acts like `stop()`, but if any expressions are not all `TRUE` stops and produce an error message indicating the first expression which was not `TRUE`.

```r
if(!is.matrix(x)) stop("X must be matrix")

# Check which could be false:
if(any(is.na (b)) || any(b < 0)) { stop("Illegal argument b") }
# The double || OR would stop evaluating if the first any() is TRUE.
# Then, if it's TRUE, we could add:
stopifnot(b > 0)
```

When it's not necessary to stops the function, `warning()` function prints out text supplied by the function (often after a call to `paste()` assembling some diagnostic info) and the function attempts to continue.

If more then 10 warning messages are generated, don't be displayed, we can call to `warnings()` to access the messages.

The `try()` function lets to try a expression and if fails return an object class 'try-error'. It is useful when we are relying on programs and files outside R's control.

```r
a <- function (arg1) {
    if (missing (arg1)) stop ("Missing argument in a!")
    return (arg1^2)
}

b <- function (input = 9, offset) {
    a.result <- a (offset)
    return (input + a.result)
}

b()
```

```{r}
traceback()
```

Reading from bottom to top of the `traceback()` output, we can see the error in a call to `b()`, which called `a()` at line #2 of the `b()` function, and the error took place at the second line of `a()`.

This is the same function but in this version using `try()` function:

```{r}
b <- function (input = 9, offset) {
    a.check <- try (a.result <- a (offset) )
    if (class (a.check)[1] == "try-error") {
        warning ("Call to a() failed; setting a.result = 3")
        a.result <- 3
    }
    return (input + a.result)
}

b()
```

Lots of R objects returns a vector of classes when we use `class()` function, that's why we specified `class(a.check)[1]`.

## Interacting with the OS

By default R presumes that is dealing with files in the working directory. The `getwd()` command prints the working directory and with `setwd()` we can change to a new location.

-   `list.files()` : list the files in the working directory (without arguments). 
    -   `full.names=` if `TRUE` list the files in a vector of directories, returns a path name.
    -   `recursive=` if `TRUE` find files in the working directory and subdirectories.
    -   `pattern=` to pass a regular expression, such as "`xlsx*$`" for excel files.
    -   `ignore.case=` if `TRUE` will ignore upper- and lower-case.
-   `file.info()` : gives information about a file. Can be passed an absolute path for a file outside the working directory.
-   `file.copy(), file.exists(), file.remove()`
-   `dir.exists(), dir.create()`

To list the Environment Variables we can use the function `Sys.getenv()`, as an argument we can specified a variable to extract. `R_HOME` for example gives the directory where R is installed. Also, to create or update variables is the command `Sys.setenv()` where we can pass a variable name and a value like `Sys.setenv(REPS = 12)`. This is a way to pass information from "outside" into R.

## Speeding process

Profiling is the process of measuring how much time and memory a function uses. The `Rprof()` function can help to identify both the steps that use time and memory. The function writes a log file, then with `summaryRprof()` we can get a report.

Using a vectorized function on a vector will almost always be more efficient than looping over the individual entries. If it's possible to replace a for() or while() loop with an apply() the result will be faster, more efficient. In large data sets where there are more many rows than columns, the point is to try to avoid loop over rows because looping over columns is usually much less costly.

```{r}
# Non-Vectorized:
f1 <- function (x, y = 2) {
    if (x < 0) {
        warning ("Neg(s)")
        return (NA)
    }
    return (sqrt(x) + y)
}
f1(5)
```

```{r}
# Vectorized
f2 <- function (x, y = 2) {
    out <- as.numeric (rep(NA, length(x)))
    if (any(x < 0)) warning ("Neg(s)")
    out[x >= 0] <- sqrt(x[x > 0]) + y
    return (out)
}
f2(5)
```

In the vectorized version we create an `out` vector filled with `NA` values and then only will fill the values which are `x >= 0` . Also, we use `as.numeric()` because by default NA values are logical which shouldn't be an issue but just in case.

Vectorization makes code harder and slower to write, maybe the time of develop a simple code, run, explain and maintain it, it is more 'person' efficient than write it vectorized.

Compiling is other way to speed up the code. It is the translation of R code into 'byte' code. The package `compile` allow to compile our functions, one at a time with `cmpfun()` (or `compile()` for expressions); or using `compilePKGS()` to compile package by package.

```{r}
what <- function (n = 100) {
    for (i in 1:n) {}
}
# timing the function 'what' n=6,000,000,000
system.time (what (6e9) )
# compiling and testing again: 
library(compiler)
what.cmp <- cmpfun(what)
system.time (what.cmp (6e9))
```

The previous result with `system.time()` will depends on how fast the computer is. Another approach is `enableJIT()` (or 'just-in-time' compilation) which given a number to specify how the compilation should work. For example, `enableJIT(3)` performs as much compilation as possible. Once we make this call, functions are compiled before their first use and will remain compiled. To 'uncompile' a function we can edit it with `fix()`, also it is possible to convert it into text like `what.cmp <- eval(parse(text=deparse(what.cmp, control="useSource")))`.

**Parallel Processing** can speed the things up using multiple cores of our computer. The package `parallel` allows control over the use of multiple cores. To know how many cores it has the function `detectCores()` will tell us. Requires three steps to use parallel: a cluster of cores with `makeCluster()` once per session; any necessary items from the global workspace need to be passed to the cluster with `clusterExport()`; and the cluster is passed to one of the functions that knows how to use it.

-   `parSapply()` : acts like `sapply()` but with parallel processing.

```{r}
library(parallel)
detectCores()
```
```{r}
clust <- makeCluster(10)
clusterExport (clust, c("what", "what.cmp"))
system.time (
    parSapply (clust, 1:10, function (i) what (6e9/10))
)
system.time (
    parSapply(clust, 1:10, function (i) what.cmp (6e9/10))
)
```

Function inside `parSapply()` are not compiled when `enableJIT()` is enabled, have to been compiled explicitly (or run the function first and then export it).

It is a good practice to stop the cluster with `stopCluster()` when parallel processing is complete.

For the last bit of information, R can interface with code in machine level, often originally written in C or Fortran. We run code like this all the time without knowing it.

## To remember

Be consistent with the code you write. Use comments to explain the code. The blank lines, spaces, indentation are useful to make de code readable.

-   Many bugs arise from unexpected input. Check NA values with `anyNA()` or using `na.rm=TRUE` argument in some functions. 
-   R sometimes convert one row or column to a vector, and then when we want to use that column (matrix), often the function will be expecting a matrix not a vector. 
-   Take care to missing values propagating through computations. 
-   Ensure that files, paths and folders exists and can be accessible, file.exists() and file.info() to see if a file is writable.
-   Some functions expects a single result, but using `if(class(obj) == "lm")` can produce a warning because often `class()` could return a vector of classes. Then `class(obj)[1]` will work.



